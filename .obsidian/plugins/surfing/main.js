/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/surfingIndex.ts
var surfingIndex_exports = {};
__export(surfingIndex_exports, {
  default: () => SurfingPlugin
});
module.exports = __toCommonJS(surfingIndex_exports);
var import_obsidian7 = require("obsidian");

// src/translations/helper.ts
var import_obsidian = require("obsidian");

// src/translations/locale/ar.ts
var ar_default = {};

// src/translations/locale/cz.ts
var cz_default = {};

// src/translations/locale/da.ts
var da_default = {};

// src/translations/locale/de.ts
var de_default = {};

// src/translations/locale/en.ts
var en_default = {
  "Search with": "Search with",
  "or enter address": "or enter address",
  "Default Search Engine": "Default Search Engine",
  "Set Custom Search Engine Url": "Set Custom Search Engine Url",
  "Set custom search engine url for yourself. 'Duckduckgo' By default": "Set custom search engine url for yourself. 'Duckduckgo' By default",
  "Custom Link to Highlight Format": "Custom Link to Highlight Format",
  "Copy Link to Highlight Format": "Copy Link to Highlight Format",
  "Set copy link to text fragment format. [{CONTENT}]({URL}) By default. You can also set {TIME:YYYY-MM-DD HH:mm:ss} to get the current date.": "Set copy link to text fragment format. [{CONTENT}]({URL}) By default. You can also set {TIME:YYYY-MM-DD HH:mm:ss} to get the current date.",
  "Open URL In Same Tab": "Open In Same Tab",
  "Custom": "Custom",
  "Baidu": "Baidu",
  "Yahoo": "Yahoo",
  "Bing": "Bing",
  "Google": "Google",
  "DuckDuckGo": "DuckDuckGo",
  "Toggle Same Tab In Web Browser": "Toggle Same Tab In Web Browser",
  "Clear Current Page History": "Clear Current Page History",
  "Open Current URL In External Browser": "Open Current URL In External Browser",
  "Search Text": "Search Text",
  "Copy Plain Text": "Copy Plain Text",
  "Copy Link to Highlight": "Copy Link to Highlight",
  "Copy Video Timestamp": "Copy Video Time",
  "Open URL In Obsidian Web From Other Software": "Open URL In Obsidian Web From Other Software",
  "Copy BookmarkLets Success": "Copy BookmarkLets Success",
  "Refresh Current Page": "Refresh Current Page",
  "Show Search Bar In Empty Page": "Show Search Bar In Empty Page",
  "You enabled obsidian-web-browser plugin, please disable it/disable surfing to avoid conflict.": "You enabled obsidian-web-browser plugin, please disable it/disable Surfing to avoid conflict.",
  "You didn't enable show tab title bar in apperance settings, please enable it to use surfing happily.": "You didn't enable show tab header in apperance settings, please enable it to use Surfing happily.",
  "Get Current Timestamp from Web Browser": "Get Current Timestamp from Web Browser",
  "Search In Current Page Title Bar": "Search In Current Page Title Bar",
  "   <- Drag or click on me": "   <- Drag or click on me",
  "Name": "Name",
  "Url": "Url",
  "Custom Search": "Custom Search",
  "Delete Custom Search": "Delete Custom Search",
  "Add new custom search engine": "Add new custom search engine",
  "Search all settings": "Search all settings",
  "General": "General",
  "Search": "Search",
  "Always Show Custom Engines": "Always Show Custom Engines"
};

// src/translations/locale/en-gb.ts
var en_gb_default = {};

// src/translations/locale/es.ts
var es_default = {};

// src/translations/locale/fr.ts
var fr_default = {};

// src/translations/locale/hi.ts
var hi_default = {};

// src/translations/locale/id.ts
var id_default = {};

// src/translations/locale/it.ts
var it_default = {};

// src/translations/locale/ja.ts
var ja_default = {};

// src/translations/locale/ko.ts
var ko_default = {};

// src/translations/locale/nl.ts
var nl_default = {};

// src/translations/locale/no.ts
var no_default = {};

// src/translations/locale/pl.ts
var pl_default = {};

// src/translations/locale/pt.ts
var pt_default = {};

// src/translations/locale/pt-br.ts
var pt_br_default = {};

// src/translations/locale/ro.ts
var ro_default = {};

// src/translations/locale/ru.ts
var ru_default = {};

// src/translations/locale/tr.ts
var tr_default = {};

// src/translations/locale/zh-cn.ts
var zh_cn_default = {
  "Search with": "\u4F7F\u7528",
  "or enter address": "\u641C\u7D22\uFF0C\u6216\u8F93\u5165\u5730\u5740",
  "Default Search Engine": "\u9ED8\u8BA4\u641C\u7D22\u5F15\u64CE",
  "Set Custom Search Engine Url": "\u8BBE\u7F6E\u81EA\u5B9A\u4E49\u641C\u7D22\u5F15\u64CE\u7F51\u5740",
  "Set custom search engine url for yourself. 'Duckduckgo' By default": "\u8BBE\u7F6E\u81EA\u5B9A\u4E49\u641C\u7D22\u5F15\u64CE\u7F51\u5740\u3002\u9ED8\u8BA4\u4E3A'Duckduckgo'",
  "Custom Link to Highlight Format": "\u81EA\u5B9A\u4E49\u6307\u5411\u7A81\u51FA\u663E\u793A\u7684\u94FE\u63A5\u7684\u683C\u5F0F",
  "Copy Link to Highlight Format": "\u590D\u5236\u6307\u5411\u7A81\u51FA\u663E\u793A\u7684\u94FE\u63A5\u7684\u683C\u5F0F",
  "Set copy link to text fragment format. [{CONTENT}]({URL}) By default. You can also set {TIME:YYYY-MM-DD HH:mm:ss} to get the current date.": "\u8BBE\u7F6E\u590D\u5236\u6587\u672C\u7247\u6BB5\u7684\u94FE\u63A5\u7684\u683C\u5F0F\u3002\u9ED8\u8BA4\u4E3A[{CONTENT}]({URL})\u3002\u4F60\u4E5F\u53EF\u4EE5\u8BBE\u7F6E{TIME:YYYY-MM-DD HH:mm:ss}\u6765\u83B7\u53D6\u5F53\u524D\u65E5\u671F\u65F6\u95F4\u3002",
  "Open URL In Same Tab": "\u5728\u540C\u4E00\u6807\u7B7E\u9875\u4E2D\u6253\u5F00\u7F51\u9875",
  "Custom": "\u81EA\u5B9A\u4E49",
  "Baidu": "\u767E\u5EA6",
  "Yahoo": "\u96C5\u864E",
  "Bing": "\u5FC5\u5E94",
  "Google": "\u8C37\u6B4C",
  "DuckDuckGo": "DuckDuckGo",
  "Toggle Same Tab In Web Browser": "\u5207\u6362\u5728\u6D4F\u89C8\u5668\u4E2D\u56FA\u5B9A\u6807\u7B7E\u9875\u8BBF\u95EE",
  "Clear Current Page History": "\u6E05\u9664\u5F53\u524D\u9875\u9762\u7684\u5386\u53F2\u8BB0\u5F55",
  "Open Current URL In External Browser": "\u5728\u5916\u90E8\u6D4F\u89C8\u5668\u4E2D\u6253\u5F00\u5F53\u524D\u7F51\u5740",
  "Search Text": "\u641C\u7D22\u6587\u672C",
  "Copy Plain Text": "\u590D\u5236\u7EAF\u6587\u672C",
  "Copy Link to Highlight": "\u590D\u5236\u6307\u5411\u7A81\u51FA\u663E\u793A\u7684\u94FE\u63A5",
  "Copy Video Timestamp": "\u590D\u5236\u89C6\u9891\u65F6\u95F4\u6233",
  "Open URL In Obsidian Web From Other Software": "\u4ECE\u522B\u7684\u8F6F\u4EF6\u5728 Obsidian Web \u4E2D\u6253\u5F00\u7F51\u5740",
  "Copy BookmarkLets Success": "\u590D\u5236 BookmarkLets \u6210\u529F",
  "Refresh Current Page": "\u5237\u65B0\u5F53\u524D\u9875\u9762",
  "Show Search Bar In Empty Page": "\u5728\u7A7A\u767D\u9875\u9762\u4E2D\u663E\u793A\u641C\u7D22\u680F",
  "You enabled obsidian-web-browser plugin, please disable it/disable surfing to avoid conflict.": "\u4F60\u542F\u7528\u4E86 obsidian-web-browser \u63D2\u4EF6\uFF0C\u8BF7\u7981\u7528\u5B83\u6216\u7981\u7528 surfing \u63D2\u4EF6\u4EE5\u907F\u514D\u51B2\u7A81\u3002",
  "You didn't enable show tab title bar in apperance settings, please enable it to use surfing happily.": "\u4F60\u6CA1\u6709\u5728\u5916\u89C2\u8BBE\u7F6E\u4E2D\u542F\u7528\u663E\u793A\u6807\u7B7E\u9875\u6807\u9898\uFF0C\u8BF7\u542F\u7528\u5B83\u4EE5\u4FBF\u4F7F\u7528 surfing\u3002",
  "Get Current Timestamp from Web Browser": "\u4ECE\u6D4F\u89C8\u5668\u83B7\u53D6\u5F53\u524D\u65F6\u95F4\u6233",
  "Search In Current Page Title Bar": "\u5728\u5F53\u524D\u9875\u9762\u6807\u9898\u680F\u4E2D\u641C\u7D22",
  "   <- Drag or click on me": "   <- \u62D6\u52A8\u6216\u70B9\u51FB",
  "Name": "\u540D\u79F0",
  "Url": "\u94FE\u63A5",
  "Custom Search": "\u81EA\u5B9A\u4E49\u641C\u7D22",
  "Delete Custom Search": "\u5220\u9664\u81EA\u5B9A\u4E49",
  "Add new custom search engine": "\u6DFB\u52A0\u65B0\u7684\u81EA\u5B9A\u4E49\u641C\u7D22\u5F15\u64CE",
  "Search all settings": "\u641C\u7D22\u8BBE\u7F6E",
  "General": "\u5E38\u89C4\u9009\u9879",
  "Search": "\u641C\u7D22\u9009\u9879",
  "Always Show Custom Engines": "\u59CB\u7EC8\u663E\u793A\u81EA\u5B9A\u4E49\u5F15\u64CE"
};

// src/translations/locale/zh-tw.ts
var zh_tw_default = {};

// src/translations/helper.ts
var localeMap = {
  ar: ar_default,
  cs: cz_default,
  da: da_default,
  de: de_default,
  en: en_default,
  "en-gb": en_gb_default,
  es: es_default,
  fr: fr_default,
  hi: hi_default,
  id: id_default,
  it: it_default,
  ja: ja_default,
  ko: ko_default,
  nl: nl_default,
  nn: no_default,
  pl: pl_default,
  pt: pt_default,
  "pt-br": pt_br_default,
  ro: ro_default,
  ru: ru_default,
  tr: tr_default,
  "zh-cn": zh_cn_default,
  "zh-tw": zh_tw_default
};
var locale = localeMap[import_obsidian.moment.locale()];
function t(str) {
  return locale && locale[str] || en_default[str];
}

// src/component/headerBar.ts
var HeaderBar = class {
  constructor(parent, plugin, removeChild) {
    this.onSearchBarEnterListener = new Array();
    this.removeChild = true;
    this.plugin = plugin;
    if (removeChild !== void 0)
      this.removeChild = removeChild;
    parent.addClass("wb-header-bar");
    if (this.removeChild)
      parent.empty();
    this.searchBar = parent.createEl("input", {
      type: "text",
      placeholder: t("Search with") + this.plugin.settings.defaultSearchEngine + t("or enter address"),
      cls: "wb-search-bar"
    });
    this.searchBar.addEventListener("keydown", (event) => {
      if (!event) {
        const event2 = window.event;
      }
      if (event.key === "Enter") {
        for (const listener of this.onSearchBarEnterListener) {
          listener(this.searchBar.value);
        }
      }
    }, false);
    this.searchBar.addEventListener("focusin", (event) => {
      this.searchBar.select();
    });
    this.searchBar.addEventListener("focusout", (event) => {
      window.getSelection()?.removeAllRanges();
      if (!this.removeChild) {
        this.searchBar.detach();
      }
    });
  }
  addOnSearchBarEnterListener(listener) {
    this.onSearchBarEnterListener.push(listener);
  }
  setSearchBarUrl(url) {
    this.searchBar.value = url;
  }
  focus() {
    this.searchBar.focus();
  }
};

// src/surfingView.ts
var import_obsidian4 = require("obsidian");
var import_electron2 = require("electron");
var import_obsidian5 = require("obsidian");

// src/component/searchBox.ts
var import_obsidian2 = require("obsidian");
var searchBox = class {
  constructor(leaf, webContents, plugin, removeChild) {
    this.leaf = leaf;
    this.webContents = webContents;
    this.plugin = plugin;
    this.onload();
  }
  onload() {
    const containerEl = this.leaf.view.contentEl;
    this.searchBoxEl = containerEl.createEl("div", {
      cls: "wb-search-box"
    });
    this.inputEl = this.searchBoxEl.createEl("input", {
      type: "text",
      placeholder: "",
      cls: "wb-search-input"
    });
    const searchButtonGroupEl = this.searchBoxEl.createEl("div", {
      cls: "wb-search-button-group"
    });
    this.backwardButtonEl = searchButtonGroupEl.createEl("div", {
      cls: "wb-search-button search-forward"
    });
    this.forwardButtonEl = searchButtonGroupEl.createEl("div", {
      cls: "wb-search-button search-backward"
    });
    this.closeButtonEl = searchButtonGroupEl.createEl("div", {
      cls: "wb-search-button search-close"
    });
    this.closeButtonEl.addEventListener("click", this.unload.bind(this));
    this.backwardButtonEl.addEventListener("click", this.backward.bind(this));
    this.forwardButtonEl.addEventListener("click", this.forward.bind(this));
    this.inputEl.addEventListener("keyup", this.search.bind(this));
    this.inputEl.addEventListener("keyup", this.exist.bind(this));
    (0, import_obsidian2.setIcon)(this.closeButtonEl, "x", 8);
    (0, import_obsidian2.setIcon)(this.backwardButtonEl, "arrow-up", 8);
    (0, import_obsidian2.setIcon)(this.forwardButtonEl, "arrow-down", 8);
    this.inputEl.focus();
  }
  search(event) {
    event.preventDefault();
    if (this.inputEl.value === "")
      return;
    if (event.key === "Enter" && !event.shiftKey) {
      this.forward();
    }
    if (event.key === "Enter" && event.shiftKey) {
      this.backward();
    }
  }
  exist(event) {
    event.preventDefault();
    if (event.key === "Esc") {
      this.unload();
    }
  }
  backward() {
    if (this.inputEl.value === "")
      return;
    if (!this.clicked) {
      this.webContents.findInPage(this.inputEl.value, {
        forward: false,
        findNext: true
      });
    } else {
      this.webContents.findInPage(this.inputEl.value, {
        forward: false,
        findNext: false
      });
    }
    this.clicked = true;
  }
  forward() {
    if (this.inputEl.value === "")
      return;
    if (!this.clicked) {
      this.webContents.findInPage(this.inputEl.value, {
        forward: true,
        findNext: true
      });
    } else {
      this.webContents.findInPage(this.inputEl.value, {
        forward: true,
        findNext: false
      });
    }
    this.clicked = true;
  }
  unload() {
    this.webContents.stopFindInPage("clearSelection");
    this.inputEl.value = "";
    this.closeButtonEl.removeEventListener("click", this.unload);
    this.backwardButtonEl.removeEventListener("click", this.backward);
    this.forwardButtonEl.removeEventListener("click", this.forward);
    this.inputEl.removeEventListener("keyup", this.search);
    this.inputEl.removeEventListener("keyup", this.exist);
    this.searchBoxEl.detach();
  }
};

// src/surfingPluginSetting.ts
var import_obsidian3 = require("obsidian");
var import_electron = require("electron");
var DEFAULT_SETTINGS = {
  defaultSearchEngine: "duckduckgo",
  customSearchEngine: [{
    name: "duckduckgo",
    url: "https://duckduckgo.com/?q="
  }],
  alwaysShowCustomSearch: false,
  showSearchBarInPage: false,
  customHighlightFormat: false,
  highlightFormat: "[{CONTENT}]({URL})",
  openInSameTab: false,
  openInObsidianWeb: false
};
var SEARCH_ENGINES = [
  {
    name: "google",
    url: "https://www.google.com/search?q="
  },
  {
    name: "bing",
    url: "https://www.bing.com/search?q="
  },
  {
    name: "duckduckgo",
    url: "https://duckduckgo.com/?q="
  },
  {
    name: "yahoo",
    url: "https://search.yahoo.com/search?p="
  },
  {
    name: "baidu",
    url: "https://www.baidu.com/s?wd="
  },
  {
    name: "yandex",
    url: "https://yandex.com/search/?text="
  },
  {
    name: "wikipeida",
    url: "https://en.wikipedia.org/w/index.php?search="
  }
];
var tabNameToTabIconId = {
  General: "chrome",
  Search: "search"
};
var SurfingSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.applyDebounceTimer = 0;
    this.tabContent = /* @__PURE__ */ new Map();
    this.selectedTab = "General";
    this.searchSettingInfo = /* @__PURE__ */ new Map();
    this.plugin = plugin;
  }
  applySettingsUpdate() {
    clearTimeout(this.applyDebounceTimer);
    const plugin = this.plugin;
    this.applyDebounceTimer = window.setTimeout(() => {
      plugin.saveSettings();
    }, 100);
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.generateSettingsTitle();
    this.addTabHeader();
  }
  generateSettingsTitle() {
    const linterHeader = this.containerEl.createDiv("wb-setting-title");
    linterHeader.createEl("h2", { text: "Web Browser" });
    this.generateSearchBar(linterHeader);
  }
  addTabHeader() {
    const navContainer = this.containerEl.createEl("nav", { cls: "wb-setting-header" });
    this.navigateEl = navContainer.createDiv("wb-setting-tab-group");
    const settingsEl = this.containerEl.createDiv("wb-setting-content");
    this.createTabAndContent("General", this.navigateEl, settingsEl, (el, tabName) => this.generateGeneralSettings(tabName, el));
    this.createTabAndContent("Search", this.navigateEl, settingsEl, (el, tabName) => this.generateSearchSettings(tabName, el));
    this.createSearchZeroState(settingsEl);
  }
  generateSearchBar(containerEl) {
    const searchSetting = new import_obsidian3.Setting(containerEl);
    searchSetting.settingEl.style.border = "none";
    searchSetting.addSearch((s) => {
      this.search = s;
    });
    this.search.setPlaceholder(t("Search all settings"));
    this.search.inputEl.onfocus = () => {
      for (const tabInfo of this.tabContent) {
        const tab = tabInfo[1];
        tab.navButton.removeClass("wb-navigation-item-selected");
        tab.content.show();
        tab.heading.show();
        const searchVal = this.search.getValue();
        if (this.selectedTab == "" && searchVal.trim() != "") {
          this.searchSettings(searchVal.toLowerCase());
        }
        this.selectedTab = "";
      }
      this.navigateEl.addClass("wb-setting-searching");
    };
    this.search.inputEl.onblur = () => {
      this.navigateEl.removeClass("wb-setting-searching");
    };
    this.search.onChange((value) => {
      this.searchSettings(value.toLowerCase());
    });
  }
  createTabAndContent(tabName, navEl, containerEl, generateTabContent) {
    const displayTabContent = this.selectedTab === tabName;
    const tabEl = navEl.createDiv("wb-navigation-item");
    const tabClass = "wb-desktop";
    tabEl.addClass(tabClass);
    (0, import_obsidian3.setIcon)(tabEl.createEl("div", { cls: "wb-navigation-item-icon" }), tabNameToTabIconId[tabName], 20);
    tabEl.createSpan().setText(t(tabName));
    tabEl.onclick = () => {
      if (this.selectedTab == tabName) {
        return;
      }
      tabEl.addClass("wb-navigation-item-selected");
      const tab = this.tabContent.get(tabName);
      (tab?.content).show();
      if (this.selectedTab != "") {
        const tabInfo = this.tabContent.get(this.selectedTab);
        tabInfo?.navButton.removeClass("wb-navigation-item-selected");
        (tabInfo?.content).hide();
      } else {
        this.searchZeroState.hide();
        for (const settingTab of this.searchSettingInfo) {
          for (const setting of settingTab[1]) {
            setting.containerEl.show();
          }
        }
        for (const tabInfo of this.tabContent) {
          const tab2 = tabInfo[1];
          tab2.heading.hide();
          if (tabName !== tabInfo[0]) {
            tab2.content.hide();
          }
        }
      }
      this.selectedTab = tabName;
    };
    const tabContent = containerEl.createDiv("wb-tab-settings");
    const tabHeader = tabContent.createEl("h2", { cls: "wb-setting-heading", text: tabName + " Settings" });
    tabHeader.hide();
    tabContent.id = tabName.toLowerCase().replace(" ", "-");
    if (!displayTabContent) {
      tabContent.hide();
    } else {
      tabEl.addClass("wb-navigation-item-selected");
    }
    if (generateTabContent) {
      generateTabContent(tabContent, tabName);
    }
    this.tabContent.set(tabName, { content: tabContent, heading: tabHeader, navButton: tabEl });
  }
  searchSettings(searchVal) {
    const tabsWithSettingsInSearchResults = /* @__PURE__ */ new Set();
    const showSearchResultAndAddTabToResultList = (settingContainer, tabName) => {
      settingContainer.show();
      if (!tabsWithSettingsInSearchResults.has(tabName)) {
        tabsWithSettingsInSearchResults.add(tabName);
      }
    };
    for (const tabSettingInfo of this.searchSettingInfo) {
      const tabName = tabSettingInfo[0];
      const tabSettings = tabSettingInfo[1];
      for (const settingInfo of tabSettings) {
        if (searchVal.trim() === "" || settingInfo.alias?.includes(searchVal) || settingInfo.description.includes(searchVal) || settingInfo.name.includes(searchVal)) {
          showSearchResultAndAddTabToResultList(settingInfo.containerEl, tabName);
        } else if (settingInfo.options) {
          for (const optionInfo of settingInfo.options) {
            if (optionInfo.description.toLowerCase().includes(searchVal) || optionInfo.name.toLowerCase().includes(searchVal)) {
              showSearchResultAndAddTabToResultList(settingInfo.containerEl, tabName);
              break;
            } else if (optionInfo.options) {
              for (const optionsForOption of optionInfo.options) {
                if (optionsForOption.description.toLowerCase().includes(searchVal) || optionsForOption.value.toLowerCase().includes(searchVal)) {
                  showSearchResultAndAddTabToResultList(settingInfo.containerEl, tabName);
                  break;
                }
              }
            }
            settingInfo.containerEl.hide();
          }
        } else {
          settingInfo.containerEl.hide();
        }
      }
    }
    for (const tabInfo of this.tabContent) {
      if (tabsWithSettingsInSearchResults.has(tabInfo[0])) {
        tabInfo[1].heading.show();
      } else {
        tabInfo[1].heading.hide();
      }
    }
    if (tabsWithSettingsInSearchResults.size === 0) {
      this.searchZeroState.show();
    } else {
      this.searchZeroState.hide();
    }
  }
  generateGeneralSettings(tabName, wbContainerEl) {
    this.addOpenInSameTab(tabName, wbContainerEl);
    this.addHighlightFormat(tabName, wbContainerEl);
    this.addOpenInObsidianWeb(tabName, wbContainerEl);
    this.addAboutInfo(tabName, wbContainerEl);
  }
  generateSearchSettings(tabName, wbContainerEl) {
    this.addInpageSearch(tabName, wbContainerEl);
    this.addSearchEngine(tabName, wbContainerEl);
  }
  addSettingToMasterSettingsList(tabName, containerEl, name = "", description = "", options = null, alias = null) {
    const settingInfo = {
      containerEl,
      name: name.toLowerCase(),
      description: description.toLowerCase(),
      options,
      alias
    };
    if (!this.searchSettingInfo.has(tabName)) {
      this.searchSettingInfo.set(tabName, [settingInfo]);
    } else {
      this.searchSettingInfo.get(tabName)?.push(settingInfo);
    }
  }
  createSearchZeroState(containerEl) {
    this.searchZeroState = containerEl.createDiv();
    this.searchZeroState.hide();
    this.searchZeroState.createEl(import_obsidian3.Platform.isMobile ? "h3" : "h2", { text: "No settings match search" }).style.textAlign = "center";
  }
  addInpageSearch(tabName, wbContainerEl) {
    const settingName = t("Show Search Bar In Empty Page");
    const setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showSearchBarInPage).onChange(async (value) => {
        this.plugin.settings.showSearchBarInPage = value;
        this.applySettingsUpdate();
        this.display();
      });
    });
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName);
  }
  addSearchEngine(tabName, wbContainerEl) {
    let settingName = t("Default Search Engine");
    let setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).addDropdown(async (drowdown) => {
      const aDropdown = drowdown.addOption("duckduckgo", t("DuckDuckGo")).addOption("google", t("Google")).addOption("bing", t("Bing")).addOption("yahoo", t("Yahoo")).addOption("baidu", t("Baidu"));
      this.plugin.settings.customSearchEngine.forEach((value, key) => {
        aDropdown.addOption(value.name, value.name);
      });
      aDropdown.setValue(this.plugin.settings.defaultSearchEngine).onChange(async (value) => {
        this.plugin.settings.defaultSearchEngine = value;
        this.applySettingsUpdate();
        this.display();
      });
    });
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName);
    settingName = t("Always Show Custom Engines");
    setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.alwaysShowCustomSearch).onChange(async (value) => {
        this.plugin.settings.alwaysShowCustomSearch = value;
        this.applySettingsUpdate();
        this.display();
      });
    });
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName);
    if (!this.plugin.settings.alwaysShowCustomSearch) {
      return;
    }
    if (typeof this.plugin.settings.customSearchEngine !== "object") {
      this.plugin.settings.customSearchEngine = DEFAULT_SETTINGS.customSearchEngine;
    }
    settingName = t("Add new custom search engine");
    setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).addButton((button) => button.setButtonText("+").onClick(async () => {
      this.plugin.settings.customSearchEngine.push({
        name: `Custom Search ${this.plugin.settings.customSearchEngine.length + 1}`,
        url: "https://www.google.com/search?q="
      });
      await this.plugin.saveSettings();
      this.display();
    }));
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName);
    this.plugin.settings.customSearchEngine.forEach((searchEngine, index) => {
      settingName = searchEngine.name ? searchEngine.name : t("Custom Search") + `${this.plugin.settings.customSearchEngine.length > 1 ? ` ${index + 1}` : ""}`;
      const topLevelSetting = new import_obsidian3.Setting(wbContainerEl).setClass("search-engine-setting").setName(settingName).addButton((button) => button.setButtonText(t("Delete Custom Search")).onClick(async () => {
        this.plugin.settings.customSearchEngine.splice(index, 1);
        await this.plugin.saveSettings();
        this.display();
      }));
      const mainSettingsEl = topLevelSetting.settingEl.createEl("div", "search-engine-main-settings");
      const mainSettingsNameEl = mainSettingsEl.createEl("div", "search-engine-main-settings-name");
      const mainSettingsUrlEl = mainSettingsEl.createEl("div", "search-engine-main-settings-url");
      mainSettingsNameEl.createEl("label", { text: t("Name") });
      mainSettingsNameEl.createEl("input", {
        cls: "search-engine-name-input",
        type: "text",
        value: searchEngine.name
      }).on("change", ".search-engine-name-input", async (evt) => {
        const target = evt.target;
        this.plugin.settings.customSearchEngine[index] = { ...searchEngine, name: target.value };
        await this.plugin.saveSettings();
      });
      mainSettingsUrlEl.createEl("label", { text: t("Url") });
      mainSettingsUrlEl.createEl("input", {
        cls: "search-engine-url-input",
        type: "text",
        value: searchEngine.url
      }).on("change", ".search-engine-url-input", async (evt) => {
        const target = evt.target;
        this.plugin.settings.customSearchEngine[index] = { ...searchEngine, url: target.value };
        await this.plugin.saveSettings();
      });
      this.addSettingToMasterSettingsList(tabName, topLevelSetting.settingEl, settingName);
    });
  }
  addHighlightFormat(tabName, wbContainerEl) {
    let settingName = t("Custom Link to Highlight Format");
    let setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.customHighlightFormat).onChange(async (value) => {
        this.plugin.settings.customHighlightFormat = value;
        this.applySettingsUpdate();
        this.display();
      });
    });
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName);
    if (!this.plugin.settings.customHighlightFormat) {
      return;
    }
    settingName = t("Copy Link to Highlight Format");
    const settingDesc = t("Set copy link to text fragment format. [{CONTENT}]({URL}) By default. You can also set {TIME:YYYY-MM-DD HH:mm:ss} to get the current date.");
    setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).setDesc(settingDesc).addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.highlightFormat).setValue(this.plugin.settings.highlightFormat).onChange(async (value) => {
      if (value === "") {
        this.plugin.settings.highlightFormat = DEFAULT_SETTINGS.highlightFormat;
        this.applySettingsUpdate();
        this.display();
      }
      this.plugin.settings.highlightFormat = value;
      this.applySettingsUpdate();
    }));
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName, settingDesc);
  }
  addOpenInSameTab(tabName, wbContainerEl) {
    const settingName = t("Open URL In Same Tab");
    const setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.openInSameTab).onChange(async (value) => {
        this.plugin.settings.openInSameTab = value;
        this.applySettingsUpdate();
        this.display();
      });
    });
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName);
  }
  addOpenInObsidianWeb(tabName, wbContainerEl) {
    const settingName = t("Open URL In Obsidian Web From Other Software");
    const setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.openInObsidianWeb).onChange(async (value) => {
        this.plugin.settings.openInObsidianWeb = value;
        this.applySettingsUpdate();
        this.display();
      });
    });
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName);
    if (!this.plugin.settings.openInObsidianWeb) {
      return;
    }
    const bookmarkLetsContainerEl = wbContainerEl.createDiv({ cls: "bookmarklets-container" });
    const bookmarkLetsBtn = bookmarkLetsContainerEl.createEl("button", {
      cls: "wb-btn"
    });
    bookmarkLetsBtn.createEl("a", {
      text: `Obsidian BookmarkLets Code`,
      cls: "cm-url",
      href: "javascript:(function(){var%20i%20%3Ddocument.location.href%3B%20document.location.href%3D%22obsidian%3A%2F%2Fweb-open%3Furl%3D%22%20%2B%20encodeURIComponent%28i%29%3B})();"
    });
    bookmarkLetsBtn.addEventListener("click", () => {
      import_electron.clipboard.writeText(`javascript:(function(){var%20i%20%3Ddocument.location.href%3B%20document.location.href%3D%22obsidian%3A%2F%2Fweb-open%3Furl%3D%22%20%2B%20encodeURIComponent%28i%29%3B})();`);
      new import_obsidian3.Notice(t("Copy BookmarkLets Success"));
    });
    bookmarkLetsContainerEl.createEl("span", {
      cls: "wb-btn-tip",
      text: t("   <- Drag or click on me")
    });
    this.addSettingToMasterSettingsList(tabName, bookmarkLetsContainerEl, settingName);
  }
  addAboutInfo(tabName, wbContainerEl) {
    const bookmarkLetsContainerEl = wbContainerEl.createDiv({ cls: "wb-about-card" });
    (0, import_obsidian3.setIcon)(bookmarkLetsContainerEl.createDiv({ cls: "wb-about-icon" }), "surfing");
    bookmarkLetsContainerEl.createEl("div", { cls: "wb-about-text", text: "Surfing" });
    const text = this.plugin.manifest.version;
    const url = "https://github.com/Quorafind/Obsidian-Surfing/releases/tag/" + text;
    bookmarkLetsContainerEl.createEl("a", { cls: "wb-about-version", href: url, text });
    this.addSettingToMasterSettingsList(tabName, bookmarkLetsContainerEl, "surfing");
  }
};

// src/surfingView.ts
var WEB_BROWSER_VIEW_ID = "surfing-view";
var SurfingView = class extends import_obsidian4.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.currentTitle = "New tab";
    this.plugin = plugin;
  }
  static spawnWebBrowserView(newLeaf, state) {
    const isOpenInSameTab = app.plugins.getPlugin("surfing").settings.openInSameTab;
    if (!isOpenInSameTab) {
      if (state.url.contains("bilibili")) {
        for (let i = 0; i < app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID).length; i++) {
          if (app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[i].getViewState().state.url.split("?t=")[0] === state.url.split("?t=")[0]) {
            app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[i].view.navigate(state.url, false, true);
            app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[i].rebuildView();
            return;
          }
        }
      }
      app.workspace.getLeaf(newLeaf).setViewState({ type: WEB_BROWSER_VIEW_ID, active: true, state });
      return;
    }
    const leafId = app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID).length ? localStorage.getItem("web-browser-leaf-id") : app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[0]?.id;
    if (!leafId) {
      let activeViewLeaf;
      activeViewLeaf = app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView)?.leaf;
      if (!activeViewLeaf)
        activeViewLeaf = app.workspace.getActiveViewOfType(import_obsidian4.ItemView)?.getViewType() === "empty" ? app.workspace.getActiveViewOfType(import_obsidian4.ItemView)?.leaf : void 0;
      if (!activeViewLeaf)
        return;
      const leaf = app.workspace.getActiveViewOfType(import_obsidian4.ItemView)?.getViewType() === "empty" ? activeViewLeaf : app.workspace.createLeafBySplit(activeViewLeaf);
      localStorage.setItem("web-browser-leaf-id", leaf.id);
      leaf.setViewState({ type: WEB_BROWSER_VIEW_ID, active: true, state });
      if (!(leaf.view.getViewType() === "empty")) {
        leaf.rebuildView();
      }
      leaf.setPinned(true);
      leaf.tabHeaderInnerTitleEl.parentElement?.parentElement?.addClass("same-tab");
      return;
    } else {
      if (!app.workspace.getLeafById(leafId)) {
        const newLeafID = app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[0]?.id;
        if (newLeafID) {
          localStorage.setItem("web-browser-leaf-id", newLeafID);
          (app.workspace.getLeafById(newLeafID)?.view).navigate(state.url, true);
          app.workspace.getLeafById(newLeafID)?.rebuildView();
          return;
        }
      }
      if (app.workspace.getLeafById(leafId)?.view.getViewType() === WEB_BROWSER_VIEW_ID) {
        (app.workspace.getLeafById(leafId)?.view).navigate(state.url, true);
        app.workspace.getLeafById(leafId).rebuildView();
        return;
      }
    }
  }
  getDisplayText() {
    return this.currentTitle;
  }
  getViewType() {
    return WEB_BROWSER_VIEW_ID;
  }
  async onOpen() {
    this.navigation = true;
    this.contentEl.empty();
    this.headerBar = new HeaderBar(this.headerEl.children[2], this.plugin);
    this.favicon = document.createElement("img");
    this.favicon.width = 16;
    this.favicon.height = 16;
    this.frame = document.createElement("webview");
    this.frame.setAttribute("allowpopups", "");
    this.frame.addClass("wb-frame");
    this.contentEl.addClass("wb-view-content");
    this.contentEl.appendChild(this.frame);
    this.headerBar.addOnSearchBarEnterListener((url) => {
      this.navigate(url);
    });
    this.frame.addEventListener("dom-ready", (event) => {
      const webContents = import_electron2.remote.webContents.fromId(this.frame.getWebContentsId());
      webContents.setWindowOpenHandler((event2) => {
        SurfingView.spawnWebBrowserView(true, { url: event2.url });
        return {
          action: "allow"
        };
      });
      try {
        webContents.executeJavaScript(`
										window.getComputedStyle( document.body ,null).getPropertyValue('background-color');
				`, true).then((result) => {
          const colorArr = result.slice(result.indexOf("(") + 1, result.indexOf(")")).split(", ");
          const brightness = Math.sqrt(colorArr[0] ** 2 * 0.241 + colorArr[1] ** 2 * 0.691 + colorArr[2] ** 2 * 0.068);
          if (brightness > 120 && app.getTheme() === "obsidian") {
            webContents.insertCSS(`
							html {
								filter: invert(90%) hue-rotate(180deg);
							}

							img, svg, div[class*="language-"] {
								filter: invert(110%) hue-rotate(180deg);
								opacity: .8;
							}
							
							video{
								filter: invert(110%) hue-rotate(180deg);
								opacity: 1;
							}
						`);
          }
        });
      } catch (err) {
        console.error("Failed to get background color: ", err);
      }
      webContents.on("context-menu", (event2, params) => {
        event2.preventDefault();
        run(params);
      }, false);
      const run = (0, import_obsidian4.debounce)((params) => {
        const { Menu: Menu2, MenuItem } = import_electron2.remote;
        const menu = new Menu2();
        menu.append(new MenuItem({
          label: t("Open Current URL In External Browser"),
          click: function() {
            window.open(params.pageURL, "_blank");
          }
        }));
        if (params.selectionText) {
          menu.append(new MenuItem({ type: "separator" }));
          menu.append(new MenuItem({
            label: t("Search Text"),
            click: function() {
              try {
                SurfingView.spawnWebBrowserView(true, { url: params.selectionText });
                console.log("Page URL copied to clipboard");
              } catch (err) {
                console.error("Failed to copy: ", err);
              }
            }
          }));
          menu.append(new MenuItem({ type: "separator" }));
          menu.append(new MenuItem({
            label: t("Copy Plain Text"),
            click: function() {
              try {
                webContents.copy();
                console.log("Page URL copied to clipboard");
              } catch (err) {
                console.error("Failed to copy: ", err);
              }
            }
          }));
          const highlightFormat = this.plugin.settings.highlightFormat;
          menu.append(new MenuItem({
            label: t("Copy Link to Highlight"),
            click: function() {
              try {
                const linkToHighlight = params.pageURL.replace(/\#\:\~\:text\=(.*)/g, "") + "#:~:text=" + encodeURIComponent(params.selectionText);
                const selectionText = params.selectionText;
                let link = "";
                if (highlightFormat.contains("{TIME")) {
                  const timeString = highlightFormat.match(/\{TIME\:[^\{\}\[\]]*\}/g)?.[0];
                  if (timeString) {
                    const momentTime = (0, import_obsidian5.moment)().format(timeString.replace(/{TIME:([^\}]*)}/g, "$1"));
                    link = highlightFormat.replace(timeString, momentTime);
                  }
                }
                link = (link != "" ? link : highlightFormat).replace(/\{URL\}/g, linkToHighlight).replace(/\{CONTENT\}/g, selectionText);
                import_electron2.clipboard.writeText(link);
                console.log("Link URL copied to clipboard");
              } catch (err) {
                console.error("Failed to copy: ", err);
              }
            }
          }));
          menu.popup(webContents);
        }
        if (params.pageURL?.contains("bilibili")) {
          menu.append(new MenuItem({
            label: t("Copy Video Timestamp"),
            click: function() {
              try {
                webContents.executeJavaScript(`
											var time = document.querySelectorAll('.bpx-player-ctrl-time-current')[0].innerHTML;
											var timeYMSArr=time.split(':');
											var joinTimeStr='00h00m00s';
											if(timeYMSArr.length===3){
												 joinTimeStr=timeYMSArr[0]+'h'+timeYMSArr[1]+'m'+timeYMSArr[2]+'s';
											}else if(timeYMSArr.length===2){
												 joinTimeStr=timeYMSArr[0]+'m'+timeYMSArr[1]+'s';
											}
											var timeStr= "";
											timeStr = window.location.href.split('?')[0]+'?t=' + joinTimeStr;
										`, true).then((result) => {
                  import_electron2.clipboard.writeText("[" + result.split("?t=")[1] + "](" + result + ")");
                });
                console.log("Page URL copied to clipboard");
              } catch (err) {
                console.error("Failed to copy: ", err);
              }
            }
          }));
        }
        setTimeout(() => {
          menu.popup(webContents);
        }, 0);
      }, 10, true);
      webContents.on("before-input-event", (event2, input) => {
        if (input.type !== "keyDown") {
          return;
        }
        const emulatedKeyboardEvent = new KeyboardEvent("keydown", {
          code: input.code,
          key: input.key,
          shiftKey: input.shift,
          altKey: input.alt,
          ctrlKey: input.control,
          metaKey: input.meta,
          repeat: input.isAutoRepeat
        });
        if (emulatedKeyboardEvent.key === "/") {
          webContents.executeJavaScript(`
											document.activeElement instanceof HTMLInputElement
										`, true).then((result) => {
            if (!result)
              this.headerBar.focus();
          });
          return;
        }
        activeDocument.body.dispatchEvent(emulatedKeyboardEvent);
        if (emulatedKeyboardEvent.ctrlKey && emulatedKeyboardEvent.key === "f") {
          this.searchBox = new searchBox(this.leaf, webContents, this.plugin);
        }
      });
    });
    this.frame.addEventListener("focus", (event) => {
      app.workspace.setActiveLeaf(this.leaf);
    });
    this.frame.addEventListener("page-favicon-updated", (event) => {
      this.favicon.src = event.favicons[0];
      this.leaf.tabHeaderInnerIconEl.empty();
      this.leaf.tabHeaderInnerIconEl.appendChild(this.favicon);
    });
    this.frame.addEventListener("page-title-updated", (event) => {
      this.leaf.tabHeaderInnerTitleEl.innerText = event.title;
      this.currentTitle = event.title;
    });
    this.frame.addEventListener("will-navigate", (event) => {
      this.navigate(event.url, true, false);
    });
    this.frame.addEventListener("did-navigate-in-page", (event) => {
      this.navigate(event.url, true, false);
    });
    this.frame.addEventListener("new-window", (event) => {
      console.log("Trying to open new window at url: " + event.url);
      event.preventDefault();
    });
    this.frame.addEventListener("did-attach-webview", (event) => {
      console.log("Webview attached");
    });
  }
  async setState(state, result) {
    this.navigate(state.url, false);
  }
  clearHistory() {
    const webContents = import_electron2.remote.webContents.fromId(this.frame.getWebContentsId());
    if (!webContents)
      return;
    webContents.clearHistory();
    webContents.executeJavaScript("history.pushState({}, '', location.href)");
    this.leaf.history.backHistory.splice(0);
    this.leaf.history.forwardHistory.splice(0);
  }
  getState() {
    return { url: this.currentUrl };
  }
  navigate(url, addToHistory = true, updateWebView = true) {
    if (url === "") {
      return;
    }
    if (addToHistory) {
      if (this.leaf.history.backHistory.last()?.state?.state?.url !== this.currentUrl) {
        this.leaf.history.backHistory.push({
          state: {
            type: WEB_BROWSER_VIEW_ID,
            state: this.getState()
          },
          title: this.currentTitle,
          icon: "search"
        });
        this.headerEl.children[1].children[0].setAttribute("aria-disabled", "false");
      }
    }
    const urlRegEx = /^(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#?&//=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$/g;
    const urlRegEx2 = /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+(:[0-9]+)?|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w\-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)/g;
    if (urlRegEx.test(url)) {
      const first7 = url.slice(0, 7).toLowerCase();
      const first8 = url.slice(0, 8).toLowerCase();
      if (!(first7 === "http://" || first7 === "file://" || first8 === "https://")) {
        url = "https://" + url;
      }
    } else if (!(url.startsWith("file://") || /\.htm(l)?/g.test(url)) && !urlRegEx2.test(encodeURI(url))) {
      const allSearchEngine = [...SEARCH_ENGINES, ...this.plugin.settings.customSearchEngine];
      const currentSearchEngine = allSearchEngine.find((engine) => engine.name === this.plugin.settings.defaultSearchEngine);
      url = (currentSearchEngine ? currentSearchEngine.url : SEARCH_ENGINES[0].url) + url;
    }
    this.currentUrl = url;
    this.headerBar.setSearchBarUrl(url);
    if (updateWebView) {
      this.frame.setAttribute("src", url);
    }
    this.searchBox?.unload();
    app.workspace.requestSaveLayout();
  }
  getCurrentTimestamp(editor) {
    const webContents = import_electron2.remote.webContents.fromId(this.frame.getWebContentsId());
    webContents.executeJavaScript(`
					var time = document.querySelectorAll('.bpx-player-ctrl-time-current')[0].innerHTML;
					var timeYMSArr=time.split(':');
					var joinTimeStr='00h00m00s';
					if(timeYMSArr.length===3){
						 joinTimeStr=timeYMSArr[0]+'h'+timeYMSArr[1]+'m'+timeYMSArr[2]+'s';
					}else if(timeYMSArr.length===2){
						 joinTimeStr=timeYMSArr[0]+'m'+timeYMSArr[1]+'s';
					}
					var timeStr= "";
					timeStr = window.location.href.split('?')[0]+'?t=' + joinTimeStr;
				`, true).then((result) => {
      const timestamp = "[" + result.split("?t=")[1] + "](" + result + ") ";
      const originalCursor = editor?.posToOffset(editor?.getCursor());
      editor?.replaceRange(timestamp, editor?.getCursor());
      if (originalCursor)
        editor?.setCursor(editor?.offsetToPos(originalCursor + timestamp.length));
    });
  }
  refresh() {
    const webContents = import_electron2.remote.webContents.fromId(this.frame.getWebContentsId());
    webContents.reload();
  }
};

// src/surfingFileView.ts
var import_obsidian6 = require("obsidian");
var HTML_FILE_EXTENSIONS = ["html", "htm"];
var WEB_BROWSER_FILE_VIEW_ID = "surfing-file-view";
var SurfingFileView = class extends import_obsidian6.FileView {
  constructor(leaf) {
    super(leaf);
  }
  async onLoadFile(file) {
    const adapter = this.app.vault.adapter;
    const urlString = "file:///" + (adapter.getBasePath() + "/" + file.path).toString().replace(/\s/g, "%20");
    SurfingView.spawnWebBrowserView(true, { url: urlString });
    if (this.leaf)
      this.leaf.detach();
  }
  onunload() {
  }
  canAcceptExtension(extension) {
    return HTML_FILE_EXTENSIONS.includes(extension);
  }
  getViewType() {
    return WEB_BROWSER_FILE_VIEW_ID;
  }
};

// node_modules/monkey-around/mjs/index.js
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const original = obj[method], hadOwn = obj.hasOwnProperty(method);
  let current = createWrapper(original);
  if (original)
    Object.setPrototypeOf(current, original);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, original || Function);
  }
}

// src/component/inPageSearchBar.ts
var InPageSearchBar = class {
  constructor(parent, plugin) {
    this.onSearchBarEnterListener = new Array();
    this.plugin = plugin;
    parent.addClass("wb-page-search-bar");
    this.inPageSearchBarContainerEl = parent.createEl("div", {
      cls: "wb-page-search-bar-container"
    });
    this.inPageSearchBarContainerEl.createEl("div", {
      text: "Surfing",
      cls: "wb-page-search-bar-text"
    });
    this.inPageSearchBarEl = this.inPageSearchBarContainerEl.createEl("input", {
      type: "text",
      placeholder: t("Search with") + this.plugin.settings.defaultSearchEngine + t("or enter address"),
      cls: "wb-page-search-bar-input"
    });
    this.inPageSearchBarEl.addEventListener("keyup", (event) => {
      if (!event) {
        const event2 = window.event;
      }
      if (event.key === "Enter") {
        for (const listener of this.onSearchBarEnterListener) {
          listener(this.inPageSearchBarEl.value);
        }
      }
    }, false);
    this.inPageSearchBarEl.addEventListener("focusin", (event) => {
      this.inPageSearchBarEl.select();
    });
    this.inPageSearchBarEl.addEventListener("focusout", (event) => {
      window.getSelection()?.removeAllRanges();
    });
  }
  addOnSearchBarEnterListener(listener) {
    this.onSearchBarEnterListener.push(listener);
  }
  focus() {
    this.inPageSearchBarEl.focus();
  }
};

// src/surfingIndex.ts
var SurfingPlugin = class extends import_obsidian7.Plugin {
  async onload() {
    await this.loadSettings();
    this.checkWebBrowser();
    this.addSettingTab(new SurfingSettingTab(this.app, this));
    this.registerView(WEB_BROWSER_VIEW_ID, (leaf) => new SurfingView(leaf, this));
    this.registerView(WEB_BROWSER_FILE_VIEW_ID, (leaf) => new SurfingFileView(leaf));
    try {
      this.registerExtensions(HTML_FILE_EXTENSIONS, WEB_BROWSER_FILE_VIEW_ID);
    } catch (error) {
      new import_obsidian7.Notice(`File extensions ${HTML_FILE_EXTENSIONS} had been registered by other plugin!`);
    }
    this.updateEmptyLeaves(false);
    this.registerContextMenu();
    this.registerCustomURI();
    this.dispatchWindowOpen();
    this.onLayoutChangeEventRef = this.app.workspace.on("layout-change", () => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian7.ItemView);
      if (activeView)
        this.addHeaderAndSearchBar(activeView);
    });
    this.registerCommands();
    this.registerCustomIcon();
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(WEB_BROWSER_VIEW_ID);
    this.app.workspace.offref(this.onLayoutChangeEventRef);
    this.updateEmptyLeaves(true);
  }
  addHeaderAndSearchBar(currentView) {
    if (!currentView)
      return;
    if (currentView.getViewType() != "empty")
      return;
    if (!currentView.headerEl.children[2].hasClass("web-browser-header-bar")) {
      const headerBar = new HeaderBar(currentView.headerEl.children[2], this);
      if (!this.settings.showSearchBarInPage)
        headerBar.focus();
      headerBar.addOnSearchBarEnterListener((url) => {
        SurfingView.spawnWebBrowserView(false, { url });
      });
    }
    if (!currentView.contentEl.children[0].hasClass("wb-page-search-bar") && this.settings.showSearchBarInPage) {
      const inPageSearchBar = new InPageSearchBar(currentView.contentEl.children[0], this);
      if (currentView.contentEl.children[0].children[0]) {
        currentView.contentEl.children[0].children[0].style.opacity = "0.4";
      }
      inPageSearchBar.focus();
      inPageSearchBar.addOnSearchBarEnterListener((url) => {
        SurfingView.spawnWebBrowserView(false, { url });
      });
    }
  }
  removeHeaderAndSearchBar(currentView) {
    if (!currentView)
      return;
    if (currentView.getViewType() != "empty")
      return;
    if (currentView.headerEl.children[2].hasClass("web-browser-header-bar")) {
      currentView.headerEl.children[2].empty();
      currentView.headerEl.children[2].removeClass("web-browser-header-bar");
    }
    if (currentView.contentEl.children[0].hasClass("wb-page-search-bar") && this.settings.showSearchBarInPage) {
      currentView.contentEl.children[0].children[1].detach();
      currentView.contentEl.children[0].removeClass("wb-page-search-bar");
    }
  }
  updateEmptyLeaves(removeHeader) {
    const emptyLeaves = this.app.workspace.getLeavesOfType("empty");
    emptyLeaves.forEach((leaf) => {
      if (leaf.view instanceof import_obsidian7.ItemView) {
        if (!removeHeader)
          this.addHeaderAndSearchBar(leaf.view);
        if (removeHeader)
          this.removeHeaderAndSearchBar(leaf.view);
      }
    });
  }
  registerCustomURI() {
    if (!this.settings.openInObsidianWeb)
      return;
    this.registerObsidianProtocolHandler("web-open", async (e) => {
      let url = e.url;
      if (!url)
        return;
      if (decodeURI(url) !== url)
        url = decodeURI(url).toString().replace(/\s/g, "%20");
      SurfingView.spawnWebBrowserView(true, { url });
    });
  }
  registerContextMenu() {
    this.registerEvent(this.app.workspace.on("editor-menu", (menu, editor, view) => {
      if (!editor) {
        return;
      }
      if (editor.getSelection().length === 0)
        return;
      const selection = editor.getSelection();
      menu.addItem((item) => {
        const searchEngines = [...SEARCH_ENGINES, ...this.settings.customSearchEngine];
        const subMenu = item.setTitle(`Search In WebBrowser`).setIcon("search").setSubmenu();
        searchEngines.forEach((engine) => {
          subMenu.addItem((item2) => {
            item2.setIcon("search").setTitle(engine.name).onClick(() => {
              SurfingView.spawnWebBrowserView(true, { url: engine.url + selection });
            });
          });
        });
        if (this.settings.defaultSearchEngine === "custom") {
          subMenu.addItem((item2) => {
            item2.setIcon("search").setTitle("custom").onClick(() => {
              SurfingView.spawnWebBrowserView(true, { url: this.settings.customSearchEngine + selection });
            });
          });
        }
      });
    }));
  }
  registerCommands() {
    this.addCommand({
      id: "open-current-url-with-external-browser",
      name: t("Open Current URL In External Browser"),
      checkCallback: (checking) => {
        const webbrowserView = this.app.workspace.getActiveViewOfType(SurfingView);
        if (webbrowserView) {
          if (!checking) {
            window.open(webbrowserView.getState()?.url, "_blank");
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "clear-current-page-history",
      name: t("Clear Current Page History"),
      checkCallback: (checking) => {
        const webbrowserView = this.app.workspace.getActiveViewOfType(SurfingView);
        if (webbrowserView) {
          if (!checking) {
            webbrowserView.clearHistory();
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "refresh-page",
      name: t("Refresh Current Page"),
      checkCallback: (checking) => {
        const webbrowserView = this.app.workspace.getActiveViewOfType(SurfingView);
        if (webbrowserView) {
          if (!checking) {
            webbrowserView.refresh();
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "toggle-same-tab-globally",
      name: t("Toggle Same Tab In Web Browser"),
      callback: async () => {
        this.settings.openInSameTab = !this.settings.openInSameTab;
        await this.saveSettings();
      }
    });
    this.addCommand({
      id: "get-current-timestamp",
      name: t("Get Current Timestamp from Web Browser"),
      editorCallback: (editor, view) => {
        const lastActiveLeaves = this.app.workspace.getLeavesOfType("surfing-view");
        if (lastActiveLeaves.length === 0)
          return;
        const lastActiveLeaf = lastActiveLeaves.sort((a, b) => b.activeTime - a.activeTime)[0];
        const webbrowserView = lastActiveLeaf.view;
        const url = webbrowserView.getState()?.url;
        if (!url?.contains("bilibili"))
          return;
        webbrowserView.getCurrentTimestamp(editor);
      }
    });
    this.addCommand({
      id: "search-in-current-page-title-bar",
      name: t("Search In Current Page Title Bar"),
      callback: () => {
        const currentView = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView);
        if (!currentView)
          return;
        if (currentView.headerEl.childNodes.length > 4)
          return;
        const searchBarEl = new HeaderBar(currentView.headerEl, this, false);
        searchBarEl.addOnSearchBarEnterListener((url) => {
          SurfingView.spawnWebBrowserView(false, { url });
        });
        searchBarEl.focus();
      }
    });
  }
  registerCustomIcon() {
    (0, import_obsidian7.addIcon)("surfing", `<svg t="1669432317981" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1590" data-darkreader-inline-fill="" width="100" height="100"><path d="M330.926 1023.978c-11.78 0-21.328-9.562-21.328-21.344v-42.652c0-11.782 9.546-21.344 21.328-21.344s21.342 9.562 21.342 21.344v42.652c0 11.782-9.56 21.344-21.342 21.344z" fill="#EAAD7A" p-id="1591" data-darkreader-inline-fill="" style="--darkreader-inline-fill:#e2a36a;"></path><path d="M650.892 273.08C624.644 115.932 579.958 16.656 578.052 12.532a21.332 21.332 0 0 0-25.904-11.5c-1.406 0.468-35.186 11.28-70.262 24.842-20.936 8.062-37.998 15.466-50.7 21.936-22.046 11.25-32.014 20.092-35.358 31.404-2.578 7.188-24.764 54.842-48.232 105.246-39.138 84.088-92.746 199.27-136.086 298.016-23.796 54.248-41.92 97.714-53.84 129.212-21.952 57.998-20.89 69.652-17.204 78.872 4.172 10.466 13.282 21.842 82.808 55.342 36.28 17.466 85.76 39.278 147.07 64.902 104.088 43.464 207.894 83.372 208.926 83.746 2.468 0.968 5.062 1.438 7.656 1.438 3.124 0 6.218-0.688 9.124-2.062a21.284 21.284 0 0 0 11.124-12.532c35.308-106.152 55.808-217.832 60.84-331.952 4.034-91.246-1.716-184.21-17.122-276.362z" fill="#ED5564" p-id="1592" data-darkreader-inline-fill="" style="--darkreader-inline-fill:#cc5b60;"></path><path d="M650.892 273.08C624.644 115.932 579.958 16.656 578.052 12.532a21.332 21.332 0 0 0-25.904-11.5c-0.656 0.218-8.31 2.686-19.842 6.592a21.938 21.938 0 0 1 3.094 4.906c1.89 4.124 46.59 103.4 72.84 260.548 15.376 92.152 21.154 185.116 17.124 276.362-5.06 114.12-25.53 225.798-60.872 331.952a21.216 21.216 0 0 1-3.282 6.156c11.28 4.406 17.81 6.906 18.06 7 2.468 0.968 5.062 1.438 7.656 1.438 3.124 0 6.218-0.688 9.124-2.062a21.284 21.284 0 0 0 11.124-12.532c35.308-106.152 55.808-217.832 60.84-331.952 4.034-91.244-1.716-184.208-17.122-276.36z" fill="#FFFFFF" opacity=".2" p-id="1593" data-darkreader-inline-fill="" style="--darkreader-inline-fill:#ebe3d5;"></path><path d="M181.622 874.642c0 2.468 0.406 4.938 1.266 7.282 0.954 2.624 9.89 26.124 32.092 49.934 21.014 22.562 58.2 49.436 115.948 49.436h383.996c128.744 0 186.428-91.588 188.834-95.494a21.314 21.314 0 0 0 3.156-11.156H181.622z" fill="#F4BE8E" p-id="1594" data-darkreader-inline-fill="" style="--darkreader-inline-fill:#ecb177;"></path><path d="M685.924 584.064c-6.782-2.25-13.532-3.876-19.562-5.062a1292.052 1292.052 0 0 1-3.656 42.81c12.844 3.032 24.876 7.936 29.188 13.686-7.25 3.718-26.344 10.906-73.402 17.844-42.218 6.218-97.95 11-161.196 13.75-122.15 5.342-251.97 2.376-315.686-7.218-11.656-1.782-22.514 6.25-24.28 17.904-1.75 11.656 6.264 22.53 17.92 24.28 44.826 6.75 118.102 10.376 199.598 10.376 39.28 0 80.496-0.844 121.336-2.594 64.154-2.718 121.274-7.5 165.118-13.78 71.778-10.312 92.806-22.438 102.368-30.686 10.406-8.938 12.594-18.75 12.594-25.376 0-14.688-6.562-41.466-50.34-55.934z" fill="#434A54" p-id="1595" data-darkreader-inline-fill="" style="--darkreader-inline-fill:#555755;"></path></svg>`);
  }
  checkWebBrowser() {
    const webBrowser = app.plugins.getPlugin("obsidian-web-browser");
    if (webBrowser)
      new import_obsidian7.Notice(t("You enabled obsidian-web-browser plugin, please disable it/disable surfing to avoid conflict."), 4e3);
    const tabHeader = app.vault.getConfig("showViewHeader");
    if (!tabHeader)
      new import_obsidian7.Notice(t("You didn't enable show tab title bar in apperance settings, please enable it to use surfing happily."), 4e3);
  }
  dispatchWindowOpen() {
    const uninstaller = around(window, {
      open: (next) => function(url, target, features) {
        let urlString = "";
        if (typeof url === "string") {
          urlString = url;
        } else if (url instanceof URL) {
          urlString = url.toString();
        }
        if (decodeURI(urlString) !== urlString)
          urlString = decodeURI(urlString).toString().replace(/\s/g, "%20");
        if (urlString === "about:blank" && features || !urlString.startsWith("http://") && !urlString.startsWith("https://") && !(urlString.startsWith("file://") && /\.htm(l)?/g.test(urlString)) || urlString !== "about:blank" && target === "_blank") {
          return next(url, target, features);
        }
        SurfingView.spawnWebBrowserView(true, { url: urlString });
        return null;
      }
    });
    this.register(uninstaller);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
