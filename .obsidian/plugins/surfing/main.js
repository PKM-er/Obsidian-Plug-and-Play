/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/surfingIndex.ts
var surfingIndex_exports = {};
__export(surfingIndex_exports, {
  default: () => SurfingPlugin
});
module.exports = __toCommonJS(surfingIndex_exports);
var import_obsidian9 = require("obsidian");

// src/translations/helper.ts
var import_obsidian = require("obsidian");

// src/translations/locale/ar.ts
var ar_default = {};

// src/translations/locale/cz.ts
var cz_default = {};

// src/translations/locale/da.ts
var da_default = {};

// src/translations/locale/de.ts
var de_default = {};

// src/translations/locale/en.ts
var en_default = {
  "Search with": " Search with ",
  "or enter address": " or enter address",
  "Default Search Engine": "Default Search Engine",
  "Set Custom Search Engine Url": "Set Custom Search Engine Url",
  "Set custom search engine url for yourself. 'Duckduckgo' By default": "Set custom search engine url for yourself. 'Duckduckgo' By default",
  "Custom Link to Highlight Format": "Custom Link to Highlight Format",
  "Copy Link to Highlight Format": "Copy Link to Highlight Format",
  "Set copy link to text fragment format. [{CONTENT}]({URL}) By default. You can also set {TIME:YYYY-MM-DD HH:mm:ss} to get the current date.": "Set copy link to text fragment format. [{CONTENT}]({URL}) By default. You can also set {TIME:YYYY-MM-DD HH:mm:ss} to get the current date.",
  "Open URL In Same Tab": "Open In Same Tab",
  "Custom": "Custom",
  "Baidu": "Baidu",
  "Yahoo": "Yahoo",
  "Bing": "Bing",
  "Google": "Google",
  "DuckDuckGo": "DuckDuckGo",
  "Toggle Same Tab In Web Browser": "Toggle Same Tab In Web Browser",
  "Clear Current Page History": "Clear Current Page History",
  "Open Current URL In External Browser": "Open Current URL In External Browser",
  "Search Text": "Search Text",
  "Copy Plain Text": "Copy Plain Text",
  "Copy Link to Highlight": "Copy Link to Highlight",
  "Copy Video Timestamp": "Copy Video Time",
  "Open URL In Obsidian Web From Other Software": "Open URL In Obsidian Web From Other Software",
  "(Reload to take effect)": "(Reload to take effect)",
  "Copy BookmarkLets Success": "Copy BookmarkLets Success",
  "Refresh Current Page": "Refresh Current Page",
  "Show Search Bar In Empty Page": "Show Search Bar In Empty Page",
  "You enabled obsidian-web-browser plugin, please disable it/disable surfing to avoid conflict.": "You enabled obsidian-web-browser plugin, please disable it/disable Surfing to avoid conflict.",
  "You didn't enable show tab title bar in apperance settings, please enable it to use surfing happily.": "You didn't enable show tab header in apperance settings, please enable it to use Surfing happily.",
  "Get Current Timestamp from Web Browser": "Get Current Timestamp from Web Browser",
  "Search In Current Page Title Bar": "Search In Current Page Title Bar",
  "   <- Drag or click on me": "   <- Drag or click on me",
  "Name": "Name",
  "Url": "Url",
  "Custom Search": "Custom Search",
  "Delete Custom Search": "Delete Custom Search",
  "Add new custom search engine": "Add new custom search engine",
  "Search all settings": "Search all settings",
  "General": "General",
  "Search": "Search",
  "Theme": "Theme",
  "Always Show Custom Engines": "Always Show Custom Engines",
  "Save Current Page As Markdown": "Save Current Page As Markdown",
  "Save As Markdown Path": "Save As Markdown Path",
  "Path like /_Tempcard": "Path like /_Tempcard",
  "Search Engine": "Search Engine",
  "settings": "settings",
  "Using ": "Using ",
  " to search": " to search",
  "Surfing Iframe": "Surfing Iframe",
  "Surfing is using iframe to prevent crashed when loading some websites.": "Surfing is using iframe to prevent crashed when loading some websites.",
  "Open With External Browser": "Open With External Browser",
  "Open With Surfing": "Open With Surfing",
  "When click on the URL from same domain name in the note, jump to the same surfing view rather than opening a new Surfing view.": "When click on the URL from same domain name in the note, jump to the same surfing view rather than opening a new Surfing view.",
  "Jump to Opened Page": "Jump to Opened Page",
  "Open Quick Switcher": "Open Quick Switcher | Ctrl/CMD+O",
  "Close Current Leaf": "Close Current Leaf | Ctrl/CMD+W",
  "Create A New Note": "Create A New Note | Ctrl/CMD+N",
  "Show Other Search Engines When Searching": "Show Other Search Engines When Searching",
  "Random Icons From Default Art": "Random Icons From Default Art",
  "Working On, Not Available Now": "Working On, Not Available Now"
};

// src/translations/locale/en-gb.ts
var en_gb_default = {};

// src/translations/locale/es.ts
var es_default = {};

// src/translations/locale/fr.ts
var fr_default = {};

// src/translations/locale/hi.ts
var hi_default = {};

// src/translations/locale/id.ts
var id_default = {};

// src/translations/locale/it.ts
var it_default = {};

// src/translations/locale/ja.ts
var ja_default = {};

// src/translations/locale/ko.ts
var ko_default = {};

// src/translations/locale/nl.ts
var nl_default = {};

// src/translations/locale/no.ts
var no_default = {};

// src/translations/locale/pl.ts
var pl_default = {};

// src/translations/locale/pt.ts
var pt_default = {};

// src/translations/locale/pt-br.ts
var pt_br_default = {};

// src/translations/locale/ro.ts
var ro_default = {};

// src/translations/locale/ru.ts
var ru_default = {};

// src/translations/locale/tr.ts
var tr_default = {};

// src/translations/locale/zh-cn.ts
var zh_cn_default = {
  "Search with": "\u4F7F\u7528 ",
  "or enter address": " \u641C\u7D22\uFF0C\u6216\u8F93\u5165\u5730\u5740",
  "Default Search Engine": "\u9ED8\u8BA4\u641C\u7D22\u5F15\u64CE",
  "Set Custom Search Engine Url": "\u8BBE\u7F6E\u81EA\u5B9A\u4E49\u641C\u7D22\u5F15\u64CE\u7F51\u5740",
  "Set custom search engine url for yourself. 'Duckduckgo' By default": "\u8BBE\u7F6E\u81EA\u5B9A\u4E49\u641C\u7D22\u5F15\u64CE\u7F51\u5740\u3002\u9ED8\u8BA4\u4E3A'Duckduckgo'",
  "Custom Link to Highlight Format": "\u81EA\u5B9A\u4E49\u6307\u5411\u7A81\u51FA\u663E\u793A\u7684\u94FE\u63A5\u7684\u683C\u5F0F",
  "Copy Link to Highlight Format": "\u590D\u5236\u6307\u5411\u7A81\u51FA\u663E\u793A\u7684\u94FE\u63A5\u7684\u683C\u5F0F",
  "Set copy link to text fragment format. [{CONTENT}]({URL}) By default. You can also set {TIME:YYYY-MM-DD HH:mm:ss} to get the current date.": "\u8BBE\u7F6E\u590D\u5236\u6587\u672C\u7247\u6BB5\u7684\u94FE\u63A5\u7684\u683C\u5F0F\u3002\u9ED8\u8BA4\u4E3A[{CONTENT}]({URL})\u3002\u4F60\u4E5F\u53EF\u4EE5\u8BBE\u7F6E{TIME:YYYY-MM-DD HH:mm:ss}\u6765\u83B7\u53D6\u5F53\u524D\u65E5\u671F\u65F6\u95F4\u3002",
  "Open URL In Same Tab": "\u5728\u540C\u4E00\u6807\u7B7E\u9875\u4E2D\u6253\u5F00\u7F51\u9875",
  "Custom": "\u81EA\u5B9A\u4E49",
  "Baidu": "\u767E\u5EA6",
  "Yahoo": "\u96C5\u864E",
  "Bing": "\u5FC5\u5E94",
  "Google": "\u8C37\u6B4C",
  "DuckDuckGo": "DuckDuckGo",
  "Toggle Same Tab In Web Browser": "\u5207\u6362\u5728\u6D4F\u89C8\u5668\u4E2D\u56FA\u5B9A\u6807\u7B7E\u9875\u8BBF\u95EE",
  "Clear Current Page History": "\u6E05\u9664\u5F53\u524D\u9875\u9762\u7684\u5386\u53F2\u8BB0\u5F55",
  "Open Current URL In External Browser": "\u5728\u5916\u90E8\u6D4F\u89C8\u5668\u4E2D\u6253\u5F00\u5F53\u524D\u7F51\u5740",
  "Search Text": "\u641C\u7D22\u6587\u672C",
  "Copy Plain Text": "\u590D\u5236\u7EAF\u6587\u672C",
  "Copy Link to Highlight": "\u590D\u5236\u6307\u5411\u7A81\u51FA\u663E\u793A\u7684\u94FE\u63A5",
  "Copy Video Timestamp": "\u590D\u5236\u89C6\u9891\u65F6\u95F4\u6233",
  "Open URL In Obsidian Web From Other Software": "\u4ECE\u522B\u7684\u8F6F\u4EF6\u5728 Obsidian Web \u4E2D\u6253\u5F00\u7F51\u5740",
  "(Reload to take effect)": "\uFF08\u91CD\u542F Ob \u4EE5\u751F\u6548\uFF09",
  "Copy BookmarkLets Success": "\u590D\u5236 BookmarkLets \u6210\u529F",
  "Refresh Current Page": "\u5237\u65B0\u5F53\u524D\u9875\u9762",
  "Show Search Bar In Empty Page": "\u5728\u7A7A\u767D\u9875\u9762\u4E2D\u663E\u793A\u641C\u7D22\u680F",
  "You enabled obsidian-web-browser plugin, please disable it/disable surfing to avoid conflict.": "\u4F60\u542F\u7528\u4E86 obsidian-web-browser \u63D2\u4EF6\uFF0C\u8BF7\u7981\u7528\u5B83\u6216\u7981\u7528 surfing \u63D2\u4EF6\u4EE5\u907F\u514D\u51B2\u7A81\u3002",
  "You didn't enable show tab title bar in apperance settings, please enable it to use surfing happily.": "\u4F60\u6CA1\u6709\u5728\u5916\u89C2\u8BBE\u7F6E\u4E2D\u542F\u7528\u663E\u793A\u6807\u7B7E\u9875\u6807\u9898\uFF0C\u8BF7\u542F\u7528\u5B83\u4EE5\u4FBF\u4F7F\u7528 surfing\u3002",
  "Get Current Timestamp from Web Browser": "\u4ECE\u6D4F\u89C8\u5668\u83B7\u53D6\u5F53\u524D\u65F6\u95F4\u6233",
  "Search In Current Page Title Bar": "\u5728\u5F53\u524D\u9875\u9762\u6807\u9898\u680F\u4E2D\u641C\u7D22",
  "   <- Drag or click on me": "   <- \u62D6\u52A8\u6216\u70B9\u51FB",
  "Name": "\u540D\u79F0",
  "Url": "\u94FE\u63A5",
  "Custom Search": "\u81EA\u5B9A\u4E49\u641C\u7D22",
  "Delete Custom Search": "\u5220\u9664\u81EA\u5B9A\u4E49",
  "Add new custom search engine": "\u6DFB\u52A0\u65B0\u7684\u81EA\u5B9A\u4E49\u641C\u7D22\u5F15\u64CE",
  "Search all settings": "\u641C\u7D22\u8BBE\u7F6E",
  "General": "\u5E38\u89C4\u9009\u9879",
  "Search": "\u641C\u7D22\u9009\u9879",
  "Theme": "\u4E3B\u9898\u9009\u9879",
  "Always Show Custom Engines": "\u59CB\u7EC8\u663E\u793A\u81EA\u5B9A\u4E49\u5F15\u64CE",
  "Save Current Page As Markdown": "\u4FDD\u5B58\u5F53\u524D\u7F51\u9875\u4E3A Markdown",
  "Save As Markdown Path": "\u4FDD\u5B58\u4E3A Markdown \u8DEF\u5F84",
  "Path like /_Tempcard": "\u8DEF\u5F84\u4F8B\u5982 /_Tempcard",
  "Search Engine": "\u641C\u7D22\u5F15\u64CE",
  "settings": "\u8BBE\u7F6E",
  "Using ": "\u4F7F\u7528",
  " to search": "\u6765\u68C0\u7D22",
  "Surfing Iframe": "Surfing Iframe",
  "Surfing is using iframe to prevent crashed when loading some websites.": "Surfing \u4F7F\u7528 iframe \u6765\u9632\u6B62\u52A0\u8F7D\u67D0\u4E9B\u7F51\u7AD9\u65F6\u5D29\u6E83\u3002",
  "Open With External Browser": "\u5728\u5916\u90E8\u6D4F\u89C8\u5668\u4E2D\u6253\u5F00",
  "Open With Surfing": "\u5728 Surfing \u4E2D\u6253\u5F00",
  "When click on the URL from same domain name in the note, jump to the same surfing view rather than opening a new Surfing view.": "\u5F53\u5728\u7B14\u8BB0\u4E2D\u70B9\u51FB\u76F8\u540C\u57DF\u540D\u7684 URL \u65F6\uFF0C\u8DF3\u8F6C\u5230\u76F8\u540C\u7684 Surfing \u89C6\u56FE\u800C\u4E0D\u662F\u6253\u5F00\u65B0\u7684 Surfing \u89C6\u56FE\u3002",
  "Jump to Opened Page": "\u8DF3\u8F6C\u5230\u5DF2\u6253\u5F00\u7684\u9875\u9762",
  "Open Quick Switcher": "\u6253\u5F00\u5FEB\u901F\u5207\u6362 | Ctrl/CMD+O",
  "Close Current Leaf": "\u5173\u95ED\u5F53\u524D\u7684\u9875\u9762 | Ctrl/CMD+W",
  "Create A New Note": "\u65B0\u5EFA\u7B14\u8BB0 | Ctrl/CMD+N",
  "Show Other Search Engines When Searching": "\u641C\u7D22\u65F6\u663E\u793A\u5176\u5B83\u641C\u7D22\u5F15\u64CE",
  "Random Icons From Default Art": "\u4ECE\u9ED8\u8BA4\u7684 Art \u4E2D\u6311\u9009\u968F\u673A Icon",
  "Working On, Not Available Now": "\u6B63\u5728\u5EFA\u8BBE\u4E2D\uFF0C\u5F53\u524D\u4E0D\u53EF\u7528"
};

// src/translations/locale/zh-tw.ts
var zh_tw_default = {};

// src/translations/helper.ts
var localeMap = {
  ar: ar_default,
  cs: cz_default,
  da: da_default,
  de: de_default,
  en: en_default,
  "en-gb": en_gb_default,
  es: es_default,
  fr: fr_default,
  hi: hi_default,
  id: id_default,
  it: it_default,
  ja: ja_default,
  ko: ko_default,
  nl: nl_default,
  nn: no_default,
  pl: pl_default,
  pt: pt_default,
  "pt-br": pt_br_default,
  ro: ro_default,
  ru: ru_default,
  tr: tr_default,
  "zh-cn": zh_cn_default,
  "zh-tw": zh_tw_default
};
var locale = localeMap[import_obsidian.moment.locale()];
function t(str) {
  return locale && locale[str] || en_default[str];
}

// src/component/headerBar.ts
var HeaderBar = class {
  constructor(parent, plugin, removeChild) {
    this.onSearchBarEnterListener = new Array();
    this.removeChild = true;
    this.plugin = plugin;
    if (removeChild !== void 0)
      this.removeChild = removeChild;
    parent.addClass("wb-header-bar");
    if (this.removeChild)
      parent.empty();
    this.searchBar = parent.createEl("input", {
      type: "text",
      placeholder: t("Search with") + this.plugin.settings.defaultSearchEngine + t("or enter address"),
      cls: "wb-search-bar"
    });
    this.searchBar.addEventListener("keydown", (event) => {
      if (!event) {
        const event2 = window.event;
      }
      if (event.key === "Enter") {
        for (const listener of this.onSearchBarEnterListener) {
          listener(this.searchBar.value);
        }
      }
    }, false);
    this.searchBar.addEventListener("focusin", (event) => {
      this.searchBar.select();
    });
    this.searchBar.addEventListener("focusout", (event) => {
      window.getSelection()?.removeAllRanges();
      if (!this.removeChild) {
        this.searchBar.detach();
      }
    });
  }
  addOnSearchBarEnterListener(listener) {
    this.onSearchBarEnterListener.push(listener);
  }
  setSearchBarUrl(url) {
    this.searchBar.value = url;
  }
  focus() {
    this.searchBar.focus();
  }
};

// src/surfingView.ts
var import_obsidian4 = require("obsidian");
var import_electron2 = require("electron");

// src/component/searchBox.ts
var import_obsidian2 = require("obsidian");
var searchBox = class {
  constructor(leaf, webContents, plugin, removeChild) {
    this.leaf = leaf;
    this.webContents = webContents;
    this.plugin = plugin;
    this.onload();
  }
  onload() {
    const containerEl = this.leaf.view.contentEl;
    this.searchBoxEl = containerEl.createEl("div", {
      cls: "wb-search-box"
    });
    this.inputEl = this.searchBoxEl.createEl("input", {
      type: "text",
      placeholder: "",
      cls: "wb-search-input"
    });
    const searchButtonGroupEl = this.searchBoxEl.createEl("div", {
      cls: "wb-search-button-group"
    });
    this.backwardButtonEl = searchButtonGroupEl.createEl("div", {
      cls: "wb-search-button search-forward"
    });
    this.forwardButtonEl = searchButtonGroupEl.createEl("div", {
      cls: "wb-search-button search-backward"
    });
    this.closeButtonEl = searchButtonGroupEl.createEl("div", {
      cls: "wb-search-button search-close"
    });
    this.closeButtonEl.addEventListener("click", this.unload.bind(this));
    this.backwardButtonEl.addEventListener("click", this.backward.bind(this));
    this.forwardButtonEl.addEventListener("click", this.forward.bind(this));
    this.inputEl.addEventListener("keyup", this.search.bind(this));
    this.inputEl.addEventListener("keyup", this.exist.bind(this));
    (0, import_obsidian2.setIcon)(this.closeButtonEl, "x", 8);
    (0, import_obsidian2.setIcon)(this.backwardButtonEl, "arrow-up", 8);
    (0, import_obsidian2.setIcon)(this.forwardButtonEl, "arrow-down", 8);
    this.inputEl.focus();
  }
  search(event) {
    event.preventDefault();
    if (this.inputEl.value === "")
      return;
    if (event.key === "Enter" && !event.shiftKey) {
      this.forward();
    }
    if (event.key === "Enter" && event.shiftKey) {
      this.backward();
    }
  }
  exist(event) {
    event.preventDefault();
    if (event.key === "Escape") {
      this.unload();
    }
  }
  backward() {
    if (this.inputEl.value === "")
      return;
    if (!this.clicked) {
      this.webContents.findInPage(this.inputEl.value, {
        forward: false,
        findNext: true
      });
    } else {
      this.webContents.findInPage(this.inputEl.value, {
        forward: false,
        findNext: false
      });
    }
    this.clicked = true;
  }
  forward() {
    if (this.inputEl.value === "")
      return;
    if (!this.clicked) {
      this.webContents.findInPage(this.inputEl.value, {
        forward: true,
        findNext: true
      });
    } else {
      this.webContents.findInPage(this.inputEl.value, {
        forward: true,
        findNext: false
      });
    }
    this.clicked = true;
  }
  unload() {
    this.webContents.stopFindInPage("clearSelection");
    this.inputEl.value = "";
    this.closeButtonEl.removeEventListener("click", this.unload);
    this.backwardButtonEl.removeEventListener("click", this.backward);
    this.forwardButtonEl.removeEventListener("click", this.forward);
    this.inputEl.removeEventListener("keyup", this.search);
    this.inputEl.removeEventListener("keyup", this.exist);
    this.searchBoxEl.detach();
  }
};

// src/surfingPluginSetting.ts
var import_obsidian3 = require("obsidian");
var import_electron = require("electron");
var DEFAULT_SETTINGS = {
  defaultSearchEngine: "duckduckgo",
  customSearchEngine: [{
    name: "duckduckgo",
    url: "https://duckduckgo.com/?q="
  }],
  alwaysShowCustomSearch: false,
  showOtherSearchEngines: false,
  showSearchBarInPage: false,
  markdownPath: "/",
  customHighlightFormat: false,
  highlightFormat: "[{CONTENT}]({URL})",
  highlightInSameTab: false,
  openInSameTab: false,
  openInObsidianWeb: false,
  useCustomIcons: false
};
var SEARCH_ENGINES = [
  {
    name: "google",
    url: "https://www.google.com/search?q="
  },
  {
    name: "bing",
    url: "https://www.bing.com/search?q="
  },
  {
    name: "duckduckgo",
    url: "https://duckduckgo.com/?q="
  },
  {
    name: "yahoo",
    url: "https://search.yahoo.com/search?p="
  },
  {
    name: "baidu",
    url: "https://www.baidu.com/s?wd="
  },
  {
    name: "yandex",
    url: "https://yandex.com/search/?text="
  },
  {
    name: "wikipeida",
    url: "https://en.wikipedia.org/w/index.php?search="
  }
];
var tabNameToTabIconId = {
  General: "chrome",
  Search: "search",
  Theme: "brush"
};
var SurfingSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.applyDebounceTimer = 0;
    this.tabContent = /* @__PURE__ */ new Map();
    this.selectedTab = "General";
    this.searchSettingInfo = /* @__PURE__ */ new Map();
    this.plugin = plugin;
  }
  applySettingsUpdate() {
    clearTimeout(this.applyDebounceTimer);
    const plugin = this.plugin;
    this.applyDebounceTimer = window.setTimeout(() => {
      plugin.saveSettings();
    }, 100);
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.generateSettingsTitle();
    this.addTabHeader();
  }
  generateSettingsTitle() {
    const linterHeader = this.containerEl.createDiv("wb-setting-title");
    linterHeader.createEl("h2", { text: "Web Browser" });
    this.generateSearchBar(linterHeader);
  }
  addTabHeader() {
    const navContainer = this.containerEl.createEl("nav", { cls: "wb-setting-header" });
    this.navigateEl = navContainer.createDiv("wb-setting-tab-group");
    const settingsEl = this.containerEl.createDiv("wb-setting-content");
    this.createTabAndContent("General", this.navigateEl, settingsEl, (el, tabName) => this.generateGeneralSettings(tabName, el));
    this.createTabAndContent("Search", this.navigateEl, settingsEl, (el, tabName) => this.generateSearchSettings(tabName, el));
    this.createTabAndContent("Theme", this.navigateEl, settingsEl, (el, tabName) => this.generateThemeSettings(tabName, el));
    this.createSearchZeroState(settingsEl);
  }
  generateSearchBar(containerEl) {
    const searchSetting = new import_obsidian3.Setting(containerEl);
    searchSetting.settingEl.style.border = "none";
    searchSetting.addSearch((s) => {
      this.search = s;
    });
    this.search.setPlaceholder(t("Search all settings"));
    this.search.inputEl.oninput = () => {
      for (const tabInfo of this.tabContent) {
        const tab = tabInfo[1];
        tab.navButton.removeClass("wb-navigation-item-selected");
        tab.content.show();
        tab.heading.show();
        const searchVal = this.search.getValue();
        if (this.selectedTab == "" && searchVal.trim() != "") {
          this.searchSettings(searchVal.toLowerCase());
        }
        this.selectedTab = "";
      }
      this.navigateEl.addClass("wb-setting-searching");
    };
    this.search.inputEl.onblur = () => {
      this.navigateEl.removeClass("wb-setting-searching");
    };
    this.search.onChange((value) => {
      if (value === "") {
        this.navigateEl.children[0].dispatchEvent(new PointerEvent("click"));
      }
      this.searchSettings(value.toLowerCase());
    });
  }
  createTabAndContent(tabName, navigateEl, containerEl, generateTabContent) {
    const displayTabContent = this.selectedTab === tabName;
    const tabEl = navigateEl.createDiv("wb-navigation-item");
    const tabClass = "wb-desktop";
    tabEl.addClass(tabClass);
    (0, import_obsidian3.setIcon)(tabEl.createEl("div", { cls: "wb-navigation-item-icon" }), tabNameToTabIconId[tabName], 20);
    tabEl.createSpan().setText(t(tabName));
    tabEl.onclick = () => {
      if (this.selectedTab == tabName) {
        return;
      }
      tabEl.addClass("wb-navigation-item-selected");
      const tab = this.tabContent.get(tabName);
      (tab?.content).show();
      if (this.selectedTab != "") {
        const tabInfo = this.tabContent.get(this.selectedTab);
        tabInfo?.navButton.removeClass("wb-navigation-item-selected");
        (tabInfo?.content).hide();
      } else {
        this.searchZeroState.hide();
        for (const settingTab of this.searchSettingInfo) {
          for (const setting of settingTab[1]) {
            setting.containerEl.show();
          }
        }
        for (const tabInfo of this.tabContent) {
          const tab2 = tabInfo[1];
          tab2.heading.hide();
          if (tabName !== tabInfo[0]) {
            tab2.content.hide();
          }
        }
      }
      this.selectedTab = tabName;
    };
    const tabContent = containerEl.createDiv("wb-tab-settings");
    const tabHeader = tabContent.createEl("h2", { cls: "wb-setting-heading", text: tabName + " Settings" });
    tabHeader.hide();
    tabContent.id = tabName.toLowerCase().replace(" ", "-");
    if (!displayTabContent) {
      tabContent.hide();
    } else {
      tabEl.addClass("wb-navigation-item-selected");
    }
    if (generateTabContent) {
      generateTabContent(tabContent, tabName);
    }
    this.tabContent.set(tabName, { content: tabContent, heading: tabHeader, navButton: tabEl });
  }
  searchSettings(searchVal) {
    const tabsWithSettingsInSearchResults = /* @__PURE__ */ new Set();
    const showSearchResultAndAddTabToResultList = (settingContainer, tabName) => {
      settingContainer.show();
      if (!tabsWithSettingsInSearchResults.has(tabName)) {
        tabsWithSettingsInSearchResults.add(tabName);
      }
    };
    for (const tabSettingInfo of this.searchSettingInfo) {
      const tabName = tabSettingInfo[0];
      const tabSettings = tabSettingInfo[1];
      for (const settingInfo of tabSettings) {
        if (searchVal.trim() === "" || settingInfo.alias?.includes(searchVal) || settingInfo.description.includes(searchVal) || settingInfo.name.includes(searchVal)) {
          showSearchResultAndAddTabToResultList(settingInfo.containerEl, tabName);
        } else if (settingInfo.options) {
          for (const optionInfo of settingInfo.options) {
            if (optionInfo.description.toLowerCase().includes(searchVal) || optionInfo.name.toLowerCase().includes(searchVal)) {
              showSearchResultAndAddTabToResultList(settingInfo.containerEl, tabName);
              break;
            } else if (optionInfo.options) {
              for (const optionsForOption of optionInfo.options) {
                if (optionsForOption.description.toLowerCase().includes(searchVal) || optionsForOption.value.toLowerCase().includes(searchVal)) {
                  showSearchResultAndAddTabToResultList(settingInfo.containerEl, tabName);
                  break;
                }
              }
            }
            settingInfo.containerEl.hide();
          }
        } else {
          settingInfo.containerEl.hide();
        }
      }
    }
    for (const tabInfo of this.tabContent) {
      if (tabsWithSettingsInSearchResults.has(tabInfo[0])) {
        tabInfo[1].heading.show();
      } else {
        tabInfo[1].heading.hide();
      }
    }
    if (tabsWithSettingsInSearchResults.size === 0) {
      this.searchZeroState.show();
    } else {
      this.searchZeroState.hide();
    }
  }
  generateGeneralSettings(tabName, wbContainerEl) {
    this.addOpenInSameTab(tabName, wbContainerEl);
    this.addHighlightFormat(tabName, wbContainerEl);
    this.addMarkdownPath(tabName, wbContainerEl);
    this.addOpenInObsidianWeb(tabName, wbContainerEl);
    this.addAboutInfo(tabName, wbContainerEl);
  }
  generateSearchSettings(tabName, wbContainerEl) {
    this.addInpageSearch(tabName, wbContainerEl);
    this.addSearchEngine(tabName, wbContainerEl);
  }
  generateThemeSettings(tabName, wbContainerEl) {
    this.addMyIcons(tabName, wbContainerEl);
  }
  addSettingToMasterSettingsList(tabName, containerEl, name = "", description = "", options = null, alias = null) {
    const settingInfo = {
      containerEl,
      name: name.toLowerCase(),
      description: description.toLowerCase(),
      options,
      alias
    };
    if (!this.searchSettingInfo.has(tabName)) {
      this.searchSettingInfo.set(tabName, [settingInfo]);
    } else {
      this.searchSettingInfo.get(tabName)?.push(settingInfo);
    }
  }
  createSearchZeroState(containerEl) {
    this.searchZeroState = containerEl.createDiv();
    this.searchZeroState.hide();
    this.searchZeroState.createEl(import_obsidian3.Platform.isMobile ? "h3" : "h2", { text: "No settings match search" }).style.textAlign = "center";
  }
  addInpageSearch(tabName, wbContainerEl) {
    const settingName = t("Show Search Bar In Empty Page");
    const setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showSearchBarInPage).onChange(async (value) => {
        this.plugin.settings.showSearchBarInPage = value;
        this.applySettingsUpdate();
        this.display();
      });
    });
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName);
  }
  addSearchEngine(tabName, wbContainerEl) {
    let settingName = t("Default Search Engine");
    let setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).addDropdown(async (drowdown) => {
      const aDropdown = drowdown.addOption("duckduckgo", t("DuckDuckGo")).addOption("google", t("Google")).addOption("bing", t("Bing")).addOption("yahoo", t("Yahoo")).addOption("baidu", t("Baidu"));
      this.plugin.settings.customSearchEngine.forEach((value, key) => {
        aDropdown.addOption(value.name, value.name);
      });
      aDropdown.setValue(this.plugin.settings.defaultSearchEngine).onChange(async (value) => {
        this.plugin.settings.defaultSearchEngine = value;
        this.applySettingsUpdate();
        this.display();
      });
    });
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName);
    settingName = t("Show Other Search Engines When Searching") + " " + t("(Reload to take effect)");
    setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showOtherSearchEngines).onChange(async (value) => {
        this.plugin.settings.showOtherSearchEngines = value;
        this.applySettingsUpdate();
      });
    });
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName);
    settingName = t("Always Show Custom Engines");
    setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.alwaysShowCustomSearch).onChange(async (value) => {
        this.plugin.settings.alwaysShowCustomSearch = value;
        this.applySettingsUpdate();
        this.display();
      });
    });
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName);
    if (!this.plugin.settings.alwaysShowCustomSearch) {
      return;
    }
    if (typeof this.plugin.settings.customSearchEngine !== "object") {
      this.plugin.settings.customSearchEngine = DEFAULT_SETTINGS.customSearchEngine;
    }
    settingName = t("Add new custom search engine");
    setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).addButton((button) => button.setButtonText("+").onClick(async () => {
      this.plugin.settings.customSearchEngine.push({
        name: `Custom Search ${this.plugin.settings.customSearchEngine.length + 1}`,
        url: "https://www.google.com/search?q="
      });
      await this.plugin.saveSettings();
      this.display();
    }));
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName);
    this.plugin.settings.customSearchEngine.forEach((searchEngine, index) => {
      settingName = searchEngine.name ? searchEngine.name : t("Custom Search") + `${this.plugin.settings.customSearchEngine.length > 1 ? ` ${index + 1}` : ""}`;
      const topLevelSetting = new import_obsidian3.Setting(wbContainerEl).setClass("search-engine-setting").setName(settingName).addButton((button) => button.setButtonText(t("Delete Custom Search")).onClick(async () => {
        this.plugin.settings.customSearchEngine.splice(index, 1);
        await this.plugin.saveSettings();
        this.display();
      }));
      const mainSettingsEl = topLevelSetting.settingEl.createEl("div", "search-engine-main-settings");
      const mainSettingsNameEl = mainSettingsEl.createEl("div", "search-engine-main-settings-name");
      const mainSettingsUrlEl = mainSettingsEl.createEl("div", "search-engine-main-settings-url");
      mainSettingsNameEl.createEl("label", { text: t("Name") });
      mainSettingsNameEl.createEl("input", {
        cls: "search-engine-name-input",
        type: "text",
        value: searchEngine.name
      }).on("change", ".search-engine-name-input", async (evt) => {
        const target = evt.target;
        this.plugin.settings.customSearchEngine[index] = { ...searchEngine, name: target.value };
        await this.plugin.saveSettings();
      });
      mainSettingsUrlEl.createEl("label", { text: t("Url") });
      mainSettingsUrlEl.createEl("input", {
        cls: "search-engine-url-input",
        type: "text",
        value: searchEngine.url
      }).on("change", ".search-engine-url-input", async (evt) => {
        const target = evt.target;
        this.plugin.settings.customSearchEngine[index] = { ...searchEngine, url: target.value };
        await this.plugin.saveSettings();
      });
      this.addSettingToMasterSettingsList(tabName, topLevelSetting.settingEl, settingName + t("Search Engine"));
    });
  }
  addMarkdownPath(tabName, wbContainerEl) {
    const settingName = t("Save As Markdown Path");
    const setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).addText((text) => text.setPlaceholder(t("Path like /_Tempcard")).setValue(this.plugin.settings.markdownPath).onChange(async (value) => {
      this.plugin.settings.markdownPath = value;
      this.applySettingsUpdate();
    }));
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName);
  }
  addHighlightFormat(tabName, wbContainerEl) {
    let settingName = t("Custom Link to Highlight Format");
    let setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.customHighlightFormat).onChange(async (value) => {
        this.plugin.settings.customHighlightFormat = value;
        this.applySettingsUpdate();
        this.display();
      });
    });
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName);
    if (!this.plugin.settings.customHighlightFormat) {
      return;
    }
    settingName = t("Copy Link to Highlight Format");
    let settingDesc = t("Set copy link to text fragment format. [{CONTENT}]({URL}) By default. You can also set {TIME:YYYY-MM-DD HH:mm:ss} to get the current date.");
    setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).setDesc(settingDesc).addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.highlightFormat).setValue(this.plugin.settings.highlightFormat).onChange(async (value) => {
      if (value === "") {
        this.plugin.settings.highlightFormat = DEFAULT_SETTINGS.highlightFormat;
        this.applySettingsUpdate();
        this.display();
      }
      this.plugin.settings.highlightFormat = value;
      this.applySettingsUpdate();
    }));
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName, settingDesc);
    settingName = t("Jump to Opened Page");
    settingDesc = t("When click on the URL from same domain name in the note, jump to the same surfing view rather than opening a new Surfing view.");
    setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).setDesc(settingDesc).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.highlightInSameTab).onChange(async (value) => {
        this.plugin.settings.highlightInSameTab = value;
        this.applySettingsUpdate();
      });
    });
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName, settingDesc);
  }
  addOpenInSameTab(tabName, wbContainerEl) {
    const settingName = t("Open URL In Same Tab");
    const setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.openInSameTab).onChange(async (value) => {
        this.plugin.settings.openInSameTab = value;
        this.applySettingsUpdate();
        this.display();
      });
    });
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName);
  }
  addOpenInObsidianWeb(tabName, wbContainerEl) {
    const settingName = t("Open URL In Obsidian Web From Other Software") + " " + t("(Reload to take effect)");
    const setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.openInObsidianWeb).onChange(async (value) => {
        this.plugin.settings.openInObsidianWeb = value;
        this.applySettingsUpdate();
        this.display();
      });
    });
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, settingName);
    if (!this.plugin.settings.openInObsidianWeb) {
      return;
    }
    const bookmarkLetsContainerEl = wbContainerEl.createDiv({ cls: "bookmarklets-container" });
    const bookmarkLetsBtn = bookmarkLetsContainerEl.createEl("button", {
      cls: "wb-btn"
    });
    bookmarkLetsBtn.createEl("a", {
      text: `Obsidian BookmarkLets Code`,
      cls: "cm-url",
      href: "javascript:(function(){var%20i%20%3Ddocument.location.href%3B%20document.location.href%3D%22obsidian%3A%2F%2Fweb-open%3Furl%3D%22%20%2B%20encodeURIComponent%28i%29%3B})();"
    });
    bookmarkLetsBtn.addEventListener("click", (e) => {
      e.preventDefault();
      import_electron.clipboard.writeText(`javascript:(function(){var%20i%20%3Ddocument.location.href%3B%20document.location.href%3D%22obsidian%3A%2F%2Fweb-open%3Furl%3D%22%20%2B%20encodeURIComponent%28i%29%3B})();`);
      new import_obsidian3.Notice(t("Copy BookmarkLets Success"));
    });
    bookmarkLetsContainerEl.createEl("span", {
      cls: "wb-btn-tip",
      text: t("   <- Drag or click on me")
    });
    this.addSettingToMasterSettingsList(tabName, bookmarkLetsContainerEl, settingName);
  }
  addAboutInfo(tabName, wbContainerEl) {
    const bookmarkLetsContainerEl = wbContainerEl.createDiv({ cls: "wb-about-card" });
    (0, import_obsidian3.setIcon)(bookmarkLetsContainerEl.createDiv({ cls: "wb-about-icon" }), "surfing");
    bookmarkLetsContainerEl.createEl("div", { cls: "wb-about-text", text: "Surfing" });
    const text = this.plugin.manifest.version;
    const url = "https://github.com/Quorafind/Obsidian-Surfing/releases/tag/" + text;
    bookmarkLetsContainerEl.createEl("a", { cls: "wb-about-version", href: url, text });
    this.addSettingToMasterSettingsList(tabName, bookmarkLetsContainerEl, "surfing");
  }
  addMyIcons(tabName, wbContainerEl) {
    let settingName = t("Working On, Not Available Now");
    let setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName);
    setting.settingEl.classList.add("wb-theme-settings-working-on");
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, "theme");
    settingName = t("Random Icons From Default Art");
    setting = new import_obsidian3.Setting(wbContainerEl).setName(settingName).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.useCustomIcons).setDisabled(true).onChange(async (value) => {
        this.plugin.settings.useCustomIcons = value;
        this.applySettingsUpdate();
      });
    });
    this.addSettingToMasterSettingsList(tabName, setting.settingEl, "theme surfing");
  }
};

// src/surfingView.ts
var WEB_BROWSER_VIEW_ID = "surfing-view";
var SurfingView = class extends import_obsidian4.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.currentTitle = "New tab";
    this.plugin = plugin;
  }
  static spawnWebBrowserView(newLeaf, state) {
    const pluginSettings = app.plugins.getPlugin("surfing").settings;
    const isOpenInSameTab = pluginSettings.openInSameTab;
    const highlightInSameTab = pluginSettings.highlightInSameTab;
    if (!isOpenInSameTab) {
      if (state.url.contains("bilibili")) {
        for (let i = 0; i < app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID).length; i++) {
          if (app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[i].getViewState().state.url.split("?t=")[0] === state.url.split("?t=")[0]) {
            app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[i].view.navigate(state.url, false, true);
            app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[i].rebuildView();
            app.workspace.setActiveLeaf(app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[i]);
            return;
          }
        }
      } else if (state.url.contains("#:~:text=") && highlightInSameTab) {
        for (let i = 0; i < app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID).length; i++) {
          if (app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[i].getViewState().state.url.split("#:~:text=")[0] === state.url.split("#:~:text=")[0]) {
            app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[i].view.navigate(state.url, false, true);
            app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[i].rebuildView();
            app.workspace.setActiveLeaf(app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[i]);
            return;
          }
        }
      }
      app.workspace.getLeaf(newLeaf).setViewState({ type: WEB_BROWSER_VIEW_ID, active: true, state });
      return;
    }
    const leafId = app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID).length ? localStorage.getItem("web-browser-leaf-id") : app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[0]?.id;
    if (!leafId) {
      let activeViewLeaf;
      activeViewLeaf = app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView)?.leaf;
      if (!activeViewLeaf)
        activeViewLeaf = app.workspace.getActiveViewOfType(import_obsidian4.ItemView)?.getViewType() === "empty" ? app.workspace.getActiveViewOfType(import_obsidian4.ItemView)?.leaf : void 0;
      if (!activeViewLeaf)
        return;
      const leaf = app.workspace.getActiveViewOfType(import_obsidian4.ItemView)?.getViewType() === "empty" ? activeViewLeaf : app.workspace.createLeafBySplit(activeViewLeaf);
      localStorage.setItem("web-browser-leaf-id", leaf.id);
      leaf.setViewState({ type: WEB_BROWSER_VIEW_ID, active: true, state });
      if (!(leaf.view.getViewType() === "empty")) {
        leaf.rebuildView();
      }
      leaf.setPinned(true);
      leaf.tabHeaderInnerTitleEl.parentElement?.parentElement?.addClass("same-tab");
      return;
    } else {
      if (!app.workspace.getLeafById(leafId)) {
        const newLeafID = app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[0]?.id;
        if (newLeafID) {
          localStorage.setItem("web-browser-leaf-id", newLeafID);
          (app.workspace.getLeafById(newLeafID)?.view).navigate(state.url, true);
          app.workspace.getLeafById(newLeafID)?.rebuildView();
          return;
        }
      }
      if (app.workspace.getLeafById(leafId)?.view.getViewType() === WEB_BROWSER_VIEW_ID) {
        (app.workspace.getLeafById(leafId)?.view).navigate(state.url, true);
        app.workspace.getLeafById(leafId).rebuildView();
        return;
      }
    }
  }
  getDisplayText() {
    return this.currentTitle;
  }
  getViewType() {
    return WEB_BROWSER_VIEW_ID;
  }
  async onOpen() {
    this.navigation = true;
    this.contentEl.empty();
    this.headerBar = new HeaderBar(this.headerEl.children[2], this.plugin);
    this.favicon = document.createElement("img");
    this.favicon.width = 16;
    this.favicon.height = 16;
    this.frame = document.createElement("webview");
    this.frame.setAttribute("allowpopups", "");
    this.frame.addClass("wb-frame");
    this.contentEl.addClass("wb-view-content");
    this.contentEl.appendChild(this.frame);
    this.headerBar.addOnSearchBarEnterListener((url) => {
      this.navigate(url);
    });
    this.frame.addEventListener("dom-ready", (event) => {
      const webContents = import_electron2.remote.webContents.fromId(this.frame.getWebContentsId());
      webContents.setWindowOpenHandler((event2) => {
        SurfingView.spawnWebBrowserView(true, { url: event2.url });
        return {
          action: "allow"
        };
      });
      this.registerContextMenuInWebcontents();
      try {
        webContents.executeJavaScript(`
										window.getComputedStyle( document.body ,null).getPropertyValue('background-color');
				`, true).then((result) => {
          const colorArr = result.slice(result.indexOf("(") + 1, result.indexOf(")")).split(", ");
          const brightness = Math.sqrt(colorArr[0] ** 2 * 0.241 + colorArr[1] ** 2 * 0.691 + colorArr[2] ** 2 * 0.068);
          if (brightness > 120 && app.getTheme() === "obsidian") {
            webContents.insertCSS(`
							html {
								filter: invert(90%) hue-rotate(180deg);
							}

							img, svg, div[class*="language-"] {
								filter: invert(110%) hue-rotate(180deg);
								opacity: .8;
							}
							
							video{
								filter: invert(110%) hue-rotate(180deg);
								opacity: 1;
							}
						`);
          }
        });
      } catch (err) {
        console.error("Failed to get background color: ", err);
      }
      webContents.on("before-input-event", (event2, input) => {
        if (input.type !== "keyDown") {
          return;
        }
        const emulatedKeyboardEvent = new KeyboardEvent("keydown", {
          code: input.code,
          key: input.key,
          shiftKey: input.shift,
          altKey: input.alt,
          ctrlKey: input.control,
          metaKey: input.meta,
          repeat: input.isAutoRepeat
        });
        if (emulatedKeyboardEvent.key === "/") {
          webContents.executeJavaScript(`
											document.activeElement instanceof HTMLInputElement
										`, true).then((result) => {
            if (!result)
              this.headerBar.focus();
          });
          return;
        }
        activeDocument.body.dispatchEvent(emulatedKeyboardEvent);
        if (emulatedKeyboardEvent.ctrlKey && emulatedKeyboardEvent.key === "f") {
          this.searchBox = new searchBox(this.leaf, webContents, this.plugin);
        }
      });
    });
    this.frame.addEventListener("focus", (event) => {
      app.workspace.setActiveLeaf(this.leaf);
    });
    this.frame.addEventListener("page-favicon-updated", (event) => {
      if (event.favicons[0] !== void 0)
        this.favicon.src = event.favicons[0];
      this.leaf.tabHeaderInnerIconEl.empty();
      this.leaf.tabHeaderInnerIconEl.appendChild(this.favicon);
    });
    this.frame.addEventListener("page-title-updated", (event) => {
      this.leaf.tabHeaderInnerTitleEl.innerText = event.title;
      this.currentTitle = event.title;
    });
    this.frame.addEventListener("will-navigate", (event) => {
      this.navigate(event.url, true, false);
    });
    this.frame.addEventListener("did-navigate-in-page", (event) => {
      this.navigate(event.url, true, false);
      this.menu = void 0;
    });
    this.frame.addEventListener("new-window", (event) => {
      console.log("Trying to open new window at url: " + event.url);
      event.preventDefault();
    });
    this.frame.addEventListener("did-attach-webview", (event) => {
      console.log("Webview attached");
    });
    this.initHeaderButtons();
  }
  initHeaderButtons() {
    this.addAction("settings", t("settings"), () => {
      app.setting.open();
      app.setting.openTabById("surfing");
    });
  }
  async setState(state, result) {
    this.navigate(state.url, false);
  }
  registerContextMenuInWebcontents() {
    const webContents = import_electron2.remote.webContents.fromId(this.frame.getWebContentsId());
    webContents.on("context-menu", (event, params) => {
      event.preventDefault();
      run(params);
    }, false);
    const run = (0, import_obsidian4.debounce)((params) => {
      const { Menu: Menu2, MenuItem } = import_electron2.remote;
      this.menu = new Menu2();
      this.menu.append(new MenuItem({
        label: t("Open Current URL In External Browser"),
        click: function() {
          window.open(params.pageURL, "_blank");
        }
      }));
      this.menu.append(new MenuItem({
        label: t("Save Current Page As Markdown"),
        click: async function() {
          try {
            webContents.executeJavaScript(`
											document.body.outerHTML
										`, true).then(async (result) => {
              const url = params.pageURL.replace(/\?(.*)/g, "");
              const parseContent = result.replaceAll(/src="(?!(https|http))([^"]*)"/g, 'src="' + url + '$2"');
              const content = (0, import_obsidian4.htmlToMarkdown)(parseContent);
              const currentTitle = webContents.getTitle().replace(/[/\\?%*:|"<>]/g, "-");
              const file = await app.vault.create((app.plugins.getPlugin("surfing").settings.markdownPath ? app.plugins.getPlugin("surfing").settings.markdownPath + "/" : "/") + currentTitle + ".md", content);
              await app.workspace.openLinkText(file.path, "", true);
            });
            console.log("Page Title copied to clipboard");
          } catch (err) {
            console.error("Failed to copy: ", err);
          }
        }
      }));
      if (params.selectionText) {
        this.menu.append(new MenuItem({ type: "separator" }));
        this.menu.append(new MenuItem({
          label: t("Search Text"),
          click: function() {
            try {
              SurfingView.spawnWebBrowserView(true, { url: params.selectionText });
              console.log("Page URL copied to clipboard");
            } catch (err) {
              console.error("Failed to copy: ", err);
            }
          }
        }));
        this.menu.append(new MenuItem({ type: "separator" }));
        this.menu.append(new MenuItem({
          label: t("Copy Plain Text"),
          click: function() {
            try {
              webContents.copy();
              console.log("Page URL copied to clipboard");
            } catch (err) {
              console.error("Failed to copy: ", err);
            }
          }
        }));
        const highlightFormat = this.plugin.settings.highlightFormat;
        this.menu.append(new MenuItem({
          label: t("Copy Link to Highlight"),
          click: function() {
            try {
              const linkToHighlight = params.pageURL.replace(/\#\:\~\:text\=(.*)/g, "") + "#:~:text=" + encodeURIComponent(params.selectionText);
              const selectionText = params.selectionText;
              let link = "";
              if (highlightFormat.contains("{TIME")) {
                const timeString = highlightFormat.match(/\{TIME\:[^\{\}\[\]]*\}/g)?.[0];
                if (timeString) {
                  const momentTime = (0, import_obsidian4.moment)().format(timeString.replace(/{TIME:([^\}]*)}/g, "$1"));
                  link = highlightFormat.replace(timeString, momentTime);
                }
              }
              link = (link != "" ? link : highlightFormat).replace(/\{URL\}/g, linkToHighlight).replace(/\{CONTENT\}/g, selectionText);
              import_electron2.clipboard.writeText(link);
              console.log("Link URL copied to clipboard");
            } catch (err) {
              console.error("Failed to copy: ", err);
            }
          }
        }));
        this.menu.popup(webContents);
      }
      if (params.pageURL?.contains("bilibili")) {
        this.menu.append(new MenuItem({
          label: t("Copy Video Timestamp"),
          click: function() {
            try {
              webContents.executeJavaScript(`
											var time = document.querySelectorAll('.bpx-player-ctrl-time-current')[0].innerHTML;
											var timeYMSArr=time.split(':');
											var joinTimeStr='00h00m00s';
											if(timeYMSArr.length===3){
												 joinTimeStr=timeYMSArr[0]+'h'+timeYMSArr[1]+'m'+timeYMSArr[2]+'s';
											}else if(timeYMSArr.length===2){
												 joinTimeStr=timeYMSArr[0]+'m'+timeYMSArr[1]+'s';
											}
											var timeStr= "";
											var pageStrMatch = window.location.href.match(/(p=[1-9]{1,})/g);
											var pageStr = "";
											if(typeof pageStrMatch === "object" && pageStrMatch.length > 0){
											    pageStr = '&' + pageStrMatch[0];
											}else if(typeof pageStrMatch === "string") {
											    pageStr = '&' + pageStrMatch;
											}
											timeStr = window.location.href.split('?')[0]+'?t=' + joinTimeStr + pageStr;
										`, true).then((result) => {
                import_electron2.clipboard.writeText("[" + result.split("?t=")[1].replace(/&p=[1-9]{1,}/g, "") + "](" + result + ")");
              });
              console.log("Page URL copied to clipboard");
            } catch (err) {
              console.error("Failed to copy: ", err);
            }
          }
        }));
      }
      setTimeout(() => {
        this.menu.popup(webContents);
        if (this.currentUrl !== params.pageURL && !params.selectionText) {
          this.menu.popup(webContents);
        }
      }, 0);
    }, 10, true);
  }
  clearHistory() {
    const webContents = import_electron2.remote.webContents.fromId(this.frame.getWebContentsId());
    if (!webContents)
      return;
    webContents.clearHistory();
    webContents.executeJavaScript("history.pushState({}, '', location.href)");
    this.leaf.history.backHistory.splice(0);
    this.leaf.history.forwardHistory.splice(0);
  }
  getState() {
    return { url: this.currentUrl };
  }
  getCurrentTitle() {
    return this.currentTitle;
  }
  navigate(url, addToHistory = true, updateWebView = true) {
    if (url === "") {
      return;
    }
    if (addToHistory) {
      if (this.leaf.history.backHistory.last()?.state?.state?.url !== this.currentUrl) {
        this.leaf.history.backHistory.push({
          state: {
            type: WEB_BROWSER_VIEW_ID,
            state: this.getState()
          },
          title: this.currentTitle,
          icon: "search"
        });
        this.headerEl.children[1].children[0].setAttribute("aria-disabled", "false");
      }
    }
    const urlRegEx = /^(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#?&//=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$/g;
    const urlRegEx2 = /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+(:[0-9]+)?|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w\-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)/g;
    if (urlRegEx.test(url)) {
      const first7 = url.slice(0, 7).toLowerCase();
      const first8 = url.slice(0, 8).toLowerCase();
      if (!(first7 === "http://" || first7 === "file://" || first8 === "https://")) {
        url = "https://" + url;
      }
    } else if (!(url.startsWith("file://") || /\.htm(l)?/g.test(url)) && !urlRegEx2.test(encodeURI(url)) || !/^(https?|file):\/\//g.test(url)) {
      const allSearchEngine = [...SEARCH_ENGINES, ...this.plugin.settings.customSearchEngine];
      const currentSearchEngine = allSearchEngine.find((engine) => engine.name === this.plugin.settings.defaultSearchEngine);
      url = (currentSearchEngine ? currentSearchEngine.url : SEARCH_ENGINES[0].url) + url;
    }
    this.currentUrl = url;
    this.headerBar.setSearchBarUrl(url);
    if (updateWebView) {
      this.frame.setAttribute("src", url);
    }
    this.searchBox?.unload();
    app.workspace.requestSaveLayout();
  }
  getCurrentTimestamp(editor) {
    const webContents = import_electron2.remote.webContents.fromId(this.frame.getWebContentsId());
    webContents.executeJavaScript(`
					var time = document.querySelectorAll('.bpx-player-ctrl-time-current')[0].innerHTML;
					var timeYMSArr=time.split(':');
					var joinTimeStr='00h00m00s';
					if(timeYMSArr.length===3){
						 joinTimeStr=timeYMSArr[0]+'h'+timeYMSArr[1]+'m'+timeYMSArr[2]+'s';
					}else if(timeYMSArr.length===2){
						 joinTimeStr=timeYMSArr[0]+'m'+timeYMSArr[1]+'s';
					}
					var timeStr= "";
					timeStr = window.location.href.split('?')[0]+'?t=' + joinTimeStr;
				`, true).then((result) => {
      const timestamp = "[" + result.split("?t=")[1] + "](" + result + ") ";
      const originalCursor = editor?.posToOffset(editor?.getCursor());
      editor?.replaceRange(timestamp, editor?.getCursor());
      if (originalCursor)
        editor?.setCursor(editor?.offsetToPos(originalCursor + timestamp.length));
    });
  }
  refresh() {
    const webContents = import_electron2.remote.webContents.fromId(this.frame.getWebContentsId());
    webContents.reload();
  }
};

// src/surfingFileView.ts
var import_obsidian5 = require("obsidian");
var HTML_FILE_EXTENSIONS = ["html", "htm"];
var WEB_BROWSER_FILE_VIEW_ID = "surfing-file-view";
var SurfingFileView = class extends import_obsidian5.FileView {
  constructor(leaf) {
    super(leaf);
  }
  async onLoadFile(file) {
    const adapter = this.app.vault.adapter;
    const urlString = "file:///" + (adapter.getBasePath() + "/" + file.path).toString().replace(/\s/g, "%20");
    SurfingView.spawnWebBrowserView(true, { url: urlString });
    if (this.leaf)
      this.leaf.detach();
  }
  onunload() {
  }
  canAcceptExtension(extension) {
    return HTML_FILE_EXTENSIONS.includes(extension);
  }
  getViewType() {
    return WEB_BROWSER_FILE_VIEW_ID;
  }
};

// node_modules/monkey-around/mjs/index.js
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const original = obj[method], hadOwn = obj.hasOwnProperty(method);
  let current = createWrapper(original);
  if (original)
    Object.setPrototypeOf(current, original);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, original || Function);
  }
}

// src/component/suggester/suggest.ts
var import_obsidian6 = require("obsidian");

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}

// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (true) {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x = _ref.x, y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  if (true) {
    var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
    }
  }
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === "fixed");
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
    if (true) {
      console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
    }
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce2(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/format.js
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function(p, c) {
    return p.replace(/%s/, c);
  }, str);
}

// node_modules/@popperjs/core/lib/utils/validateModifiers.js
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function validateModifiers(modifiers) {
  modifiers.forEach(function(modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self) {
      return self.indexOf(value) === index;
    }).forEach(function(key) {
      switch (key) {
        case "name":
          if (typeof modifier.name !== "string") {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
          }
          break;
        case "enabled":
          if (typeof modifier.enabled !== "boolean") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
          }
          break;
        case "phase":
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
          }
          break;
        case "fn":
          if (typeof modifier.fn !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "effect":
          if (modifier.effect != null && typeof modifier.effect !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "requires":
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
          }
          break;
        case "requiresIfExists":
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
          }
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
            return '"' + s + '"';
          }).join(", ") + '; but "' + key + '" was provided.');
      }
      modifier.requires && modifier.requires.forEach(function(requirement) {
        if (modifiers.find(function(mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

// node_modules/@popperjs/core/lib/utils/uniqueBy.js
function uniqueBy(arr, fn2) {
  var identifiers = /* @__PURE__ */ new Set();
  return arr.filter(function(item) {
    var identifier = fn2(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        if (true) {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
            var name = _ref.name;
            return name;
          });
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function(_ref2) {
              var name = _ref2.name;
              return name === "flip";
            });
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          var _getComputedStyle = getComputedStyle(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
          if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
          }
        }
        runModifierEffects();
        return instance.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      update: debounce2(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect4 = _ref3.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});

// src/component/suggester/suggest.ts
var wrapAround = (value, size) => {
  return (value % size + size) % size;
};
var Suggest = class {
  constructor(owner, containerEl, scope) {
    this.owner = owner;
    this.containerEl = containerEl;
    containerEl.on("click", ".suggestion-item", this.onSuggestionClick.bind(this));
    containerEl.on("mousemove", ".suggestion-item", this.onSuggestionMouseover.bind(this));
    scope.register([], "ArrowUp", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem - 1, true);
        return false;
      }
    });
    scope.register([], "ArrowDown", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem + 1, true);
        return false;
      }
    });
    scope.register([], "Enter", (event) => {
      if (!event.isComposing) {
        this.useSelectedItem(event);
        return false;
      }
    });
    const pluginSettings = app.plugins.getPlugin("surfing").settings;
    const searchEngines = [...SEARCH_ENGINES, ...pluginSettings.customSearchEngine];
    for (let i = 0; i < searchEngines.length; i++) {
      if (i === 9) {
        scope.register(["Mod"], "0", (event) => {
          if (!event.isComposing) {
            this.setSelectedItem(i, false);
            this.useSelectedItem(event);
            return false;
          }
        });
        break;
      }
      scope.register(["Mod"], `${i + 1}`, (event) => {
        if (!event.isComposing) {
          this.setSelectedItem(i, false);
          this.useSelectedItem(event);
          return false;
        }
      });
    }
  }
  onSuggestionClick(event, el) {
    event.preventDefault();
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
    this.useSelectedItem(event);
  }
  onSuggestionMouseover(_event, el) {
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
  }
  setSuggestions(values) {
    this.containerEl.empty();
    const suggestionEls = [];
    values.forEach((value, index) => {
      const suggestionEl = this.containerEl.createDiv("suggestion-item");
      this.owner.renderSuggestion(value, suggestionEl);
      if (index < 10) {
        suggestionEl.createEl("div", {
          text: `${import_obsidian6.Platform.isMacOS ? "CMD + " : "Ctrl + "}${index != 9 ? index + 1 : 0}`,
          cls: "wb-search-suggestion-index"
        });
      }
      suggestionEls.push(suggestionEl);
    });
    this.values = values;
    this.suggestions = suggestionEls;
    this.setSelectedItem(0, false);
  }
  useSelectedItem(event) {
    const currentValue = this.values[this.selectedItem];
    if (currentValue) {
      this.owner.selectSuggestion(currentValue, event);
    }
  }
  setSelectedItem(selectedIndex, scrollIntoView) {
    const normalizedIndex = wrapAround(selectedIndex, this.suggestions.length);
    const prevSelectedSuggestion = this.suggestions[this.selectedItem];
    const selectedSuggestion = this.suggestions[normalizedIndex];
    prevSelectedSuggestion?.removeClass("is-selected");
    selectedSuggestion?.addClass("is-selected");
    this.selectedItem = normalizedIndex;
    if (scrollIntoView) {
      selectedSuggestion.scrollIntoView(false);
    }
  }
};
var TextInputSuggest = class {
  constructor(app2, inputEl) {
    this.app = app2;
    this.inputEl = inputEl;
    this.scope = new import_obsidian6.Scope();
    this.suggestEl = createDiv("wb-search-suggestion-container");
    const suggestion = this.suggestEl.createDiv("wb-search-suggestion");
    this.suggest = new Suggest(this, suggestion, this.scope);
    this.scope.register([], "Escape", this.close.bind(this));
    this.inputEl.addEventListener("input", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("focus", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("blur", this.close.bind(this));
    this.suggestEl.on("mousedown", ".wb-search-suggestion-container", (event) => {
      event.preventDefault();
    });
  }
  onInputChanged() {
    const inputStr = this.inputEl.value;
    const suggestions = this.getSuggestions(inputStr);
    if (!suggestions || /^\s{0,}$/.test(inputStr)) {
      this.close();
      return;
    }
    if (suggestions.length > 0) {
      this.suggest.setSuggestions(suggestions);
      this.open(this.app.dom.appContainerEl, this.inputEl);
    } else {
      this.close();
    }
  }
  open(container, inputEl) {
    this.app.keymap.pushScope(this.scope);
    container.appendChild(this.suggestEl);
    this.popper = createPopper(inputEl, this.suggestEl, {
      placement: "bottom-start",
      modifiers: [
        {
          name: "sameWidth",
          enabled: true,
          fn: ({ state, instance }) => {
            const targetWidth = `${state.rects.reference.width}px`;
            if (state.styles.popper.width === targetWidth) {
              return;
            }
            state.styles.popper.width = targetWidth;
            instance.update();
          },
          phase: "beforeWrite",
          requires: ["computeStyles"]
        },
        {
          name: "offset",
          options: {
            offset: [0, 5]
          }
        }
      ]
    });
  }
  close() {
    this.app.keymap.popScope(this.scope);
    this.suggest.setSuggestions([]);
    if (this.popper)
      this.popper.destroy();
    this.suggestEl.detach();
  }
};

// src/utils/urltest.ts
var checkIfWebBrowserAvailable = (url) => {
  return url.startsWith("http://") || url.startsWith("https://") || url.startsWith("file://") && /\.htm(l)?/g.test(url);
};
var getFinalUrl = (url, value) => {
  const urlRegEx = /^(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#?&//=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$/g;
  const urlRegEx2 = /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+(:[0-9]+)?|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w\-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)/g;
  let tempValue = value;
  if (urlRegEx.test(tempValue)) {
    const first7 = tempValue.slice(0, 7).toLowerCase();
    const first8 = tempValue.slice(0, 8).toLowerCase();
    if (!(first7 === "http://" || first7 === "file://" || first8 === "https://")) {
      tempValue = "https://" + tempValue;
    }
  } else if (!(tempValue.startsWith("file://") || /\.htm(l)?/g.test(tempValue)) && !urlRegEx2.test(encodeURI(tempValue))) {
    tempValue = url + tempValue;
  }
  if (!/^(https?|file):\/\//g.test(tempValue))
    tempValue = url + tempValue;
  return tempValue;
};

// src/component/suggester/searchSuggester.ts
var SearchEngineSuggester = class extends TextInputSuggest {
  constructor(app2, plugin, inputEl) {
    super(app2, inputEl);
    this.app = app2;
    this.inputEl = inputEl;
    this.searchEnginesString = [];
    this.plugin = plugin;
  }
  getSuggestions(inputStr) {
    this.searchEnginesString = [];
    const currentDefault = this.plugin.settings.defaultSearchEngine;
    this.searchEngines = [...SEARCH_ENGINES, ...this.plugin.settings.customSearchEngine].sort(function(x, y) {
      return x.name == currentDefault ? -1 : y.name == currentDefault ? 1 : 0;
    });
    this.searchEngines.forEach((item) => {
      this.searchEnginesString.push(item.name);
    });
    return this.searchEnginesString;
  }
  renderSuggestion(item, el) {
    el.createEl("div", {
      text: t("Search with") + item,
      cls: "wb-search-suggestion-text"
    });
    el.classList.add("wb-search-suggest-item");
  }
  selectSuggestion(item) {
    const currentInputValue = this.inputEl.value;
    console.log("hellow");
    if (/^\s{0,}$/.test(currentInputValue))
      return;
    const currentSearchEngine = this.searchEngines.find((engine) => engine.name === item);
    const url = currentSearchEngine ? currentSearchEngine.url : SEARCH_ENGINES[0].url;
    const finalUrl = getFinalUrl(url, currentInputValue);
    SurfingView.spawnWebBrowserView(false, { url: finalUrl });
  }
};

// src/component/inPageSearchBar.ts
var InPageSearchBar = class {
  constructor(parent, plugin) {
    this.onSearchBarEnterListener = new Array();
    this.plugin = plugin;
    this.inPageSearchBarContainerEl = parent.createEl("div", {
      cls: "wb-page-search-bar-container"
    });
    this.inPageSearchBarContainerEl.createEl("div", {
      text: "Surfing",
      cls: "wb-page-search-bar-text"
    });
    this.SearchBarInputContainerEl = this.inPageSearchBarContainerEl.createEl("div", {
      cls: "wb-page-search-bar-input-container"
    });
    this.inPageSearchBarInputEl = this.SearchBarInputContainerEl.createEl("input", {
      type: "text",
      placeholder: t("Search with") + this.plugin.settings.defaultSearchEngine + t("or enter address"),
      cls: "wb-page-search-bar-input"
    });
    this.inPageSearchBarInputEl.addEventListener("keyup", (event) => {
      if (!event) {
        const event2 = window.event;
      }
      if (event.key === "Enter") {
        for (const listener of this.onSearchBarEnterListener) {
          listener(this.inPageSearchBarInputEl.value);
        }
      }
    }, false);
    this.inPageSearchBarInputEl.addEventListener("focusin", (event) => {
      this.inPageSearchBarInputEl.select();
    });
    this.inPageSearchBarInputEl.addEventListener("focusout", (event) => {
      window.getSelection()?.removeAllRanges();
    });
    if (this.plugin.settings.showOtherSearchEngines)
      this.searchEnginesSuggester = new SearchEngineSuggester(app, this.plugin, this.inPageSearchBarInputEl);
  }
  addOnSearchBarEnterListener(listener) {
    this.onSearchBarEnterListener.push(listener);
  }
  focus() {
    this.inPageSearchBarInputEl.focus();
  }
};

// src/surfingIframeView.ts
var import_obsidian7 = require("obsidian");
var WEB_BROWSER_IFRAME_VIEW_ID = "surfing-iframe-view";
function genId(size) {
  const chars = [];
  for (let n = 0; n < size; n++)
    chars.push((16 * Math.random() | 0).toString(16));
  return chars.join("");
}
var SurfingIframeView = class extends import_obsidian7.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.currentTitle = t("Surfing Iframe");
    this.plugin = plugin;
  }
  getDisplayText() {
    return this.currentTitle;
  }
  getIcon() {
    return "surfing";
  }
  getViewType() {
    return WEB_BROWSER_IFRAME_VIEW_ID;
  }
  async onOpen() {
    this.navigation = true;
    this.contentEl.empty();
    this.initHeaderButtons();
    this.headerBar = new HeaderBar(this.headerEl.children[2], this.plugin);
    this.favicon = document.createElement("img");
    this.favicon.width = 16;
    this.favicon.height = 16;
    this.frame = document.createElement("iframe");
    this.frame.setAttribute("allowpopups", "");
    this.currentID = "surfing-iframe-" + genId(8);
    this.frame.setAttribute("id", this.currentID);
    this.frame.addClass("wb-frame");
    this.contentEl.createEl("div", {
      cls: "wb-frame-notice",
      text: t("Surfing is using iframe to prevent crashed when loading some websites.")
    });
    this.contentEl.addClass("wb-view-content");
    this.contentEl.appendChild(this.frame);
    this.headerBar.addOnSearchBarEnterListener((url) => {
      this.navigate(url);
    });
  }
  async setState(state, result) {
    this.navigate(state.url, false);
  }
  getState() {
    return { url: this.currentUrl };
  }
  navigate(url, addToHistory = true, updateWebView = true) {
    if (url === "") {
      return;
    }
    if (addToHistory) {
      if (this.leaf.history.backHistory.last()?.state?.state?.url !== this.currentUrl) {
        this.leaf.history.backHistory.push({
          state: {
            type: WEB_BROWSER_IFRAME_VIEW_ID,
            state: this.getState()
          },
          title: this.currentTitle,
          icon: "search"
        });
        this.headerEl.children[1].children[0].setAttribute("aria-disabled", "false");
      }
    }
    const urlRegEx = /^(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#?&//=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$/g;
    const urlRegEx2 = /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+(:[0-9]+)?|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w\-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)/g;
    if (urlRegEx.test(url)) {
      const first7 = url.slice(0, 7).toLowerCase();
      const first8 = url.slice(0, 8).toLowerCase();
      if (!(first7 === "http://" || first7 === "file://" || first8 === "https://")) {
        url = "https://" + url;
      }
    } else if (!(url.startsWith("file://") || /\.htm(l)?/g.test(url)) && !urlRegEx2.test(encodeURI(url))) {
      const allSearchEngine = [...SEARCH_ENGINES, ...this.plugin.settings.customSearchEngine];
      const currentSearchEngine = allSearchEngine.find((engine) => engine.name === this.plugin.settings.defaultSearchEngine);
      url = (currentSearchEngine ? currentSearchEngine.url : SEARCH_ENGINES[0].url) + url;
    }
    this.currentUrl = url;
    this.headerBar.setSearchBarUrl(url);
    if (updateWebView) {
      this.frame.setAttribute("src", url);
    }
    app.workspace.requestSaveLayout();
  }
  initHeaderButtons() {
    this.addAction("settings", t("settings"), () => {
      app.setting.open();
      app.setting.openTabById("surfing");
    });
  }
};

// src/component/SearchBarIconList.ts
var import_obsidian8 = require("obsidian");
var SearchBarIconList = class {
  constructor(parent, view, plugin) {
    this.plugin = plugin;
    this.view = view;
    this.iconListEl = parent.createEl("div", {
      cls: "wb-icon-list-container"
    });
    this.createBtnEl = this.iconListEl.createEl("div", {
      cls: "wb-create-btn"
    });
    this.searchBtnEl = this.iconListEl.createEl("div", {
      cls: "wb-search-btn"
    });
    this.closeBtnEl = this.iconListEl.createEl("div", {
      cls: "wb-close-btn"
    });
    this.closeBtn = new import_obsidian8.ButtonComponent(this.closeBtnEl);
    this.createBtn = new import_obsidian8.ButtonComponent(this.createBtnEl);
    this.searchBtn = new import_obsidian8.ButtonComponent(this.searchBtnEl);
    this.createBtn.setIcon("file-plus").onClick(() => {
      app.commands.executeCommandById("file-explorer:new-file");
    });
    this.searchBtn.setIcon("file-search-2").onClick(() => {
      app.commands.executeCommandById("switcher:open");
    });
    this.closeBtn.setIcon("x-square").onClick(() => {
      if (this.view?.leaf)
        this.view?.leaf.detach();
    });
    this.closeBtn.setTooltip(t("Close Current Leaf"));
    this.createBtn.setTooltip(t("Create A New Note"));
    this.searchBtn.setTooltip(t("Open Quick Switcher"));
  }
  onunload() {
    this.searchBtn.buttonEl.detach();
    this.createBtn.buttonEl.detach();
    this.closeBtn.buttonEl.detach();
  }
};

// src/surfingIndex.ts
var SurfingPlugin = class extends import_obsidian9.Plugin {
  async onload() {
    await this.loadSettings();
    this.checkWebBrowser();
    this.addSettingTab(new SurfingSettingTab(this.app, this));
    this.registerView(WEB_BROWSER_VIEW_ID, (leaf) => new SurfingView(leaf, this));
    this.registerView(WEB_BROWSER_FILE_VIEW_ID, (leaf) => new SurfingFileView(leaf));
    this.registerView(WEB_BROWSER_IFRAME_VIEW_ID, (leaf) => new SurfingIframeView(leaf, this));
    try {
      this.registerExtensions(HTML_FILE_EXTENSIONS, WEB_BROWSER_FILE_VIEW_ID);
    } catch (error) {
      new import_obsidian9.Notice(`File extensions ${HTML_FILE_EXTENSIONS} had been registered by other plugin!`);
    }
    this.updateEmptyLeaves(false);
    this.registerContextMenu();
    this.registerCustomURI();
    this.patchMarkdownView();
    this.patchWindowOpen();
    this.patchMarkdownView();
    if ((0, import_obsidian9.requireApiVersion)("1.0.4"))
      this.patchEditMode();
    this.onLayoutChangeEventRef = this.app.workspace.on("layout-change", () => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian9.ItemView);
      if (activeView)
        this.addHeaderAndSearchBar(activeView);
    });
    this.registerCommands();
    this.registerCustomIcon();
    this.patchEmptyView();
    this.patchMarkdownPreviewRenderer();
    this.patchWorkspaceLeaf();
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(WEB_BROWSER_VIEW_ID);
    this.app.workspace.offref(this.onLayoutChangeEventRef);
    this.updateEmptyLeaves(true);
  }
  addHeaderAndSearchBar(currentView) {
    if (!currentView)
      return;
    if (currentView.getViewType() != "empty")
      return;
    if (!currentView.headerEl.children[2].hasClass("web-browser-header-bar")) {
      const headerBar = new HeaderBar(currentView.headerEl.children[2], this);
      if (!this.settings.showSearchBarInPage)
        headerBar.focus();
      headerBar.addOnSearchBarEnterListener((url) => {
        SurfingView.spawnWebBrowserView(false, { url });
      });
    }
    if (!currentView.contentEl.children[0].hasClass("wb-page-search-bar") && this.settings.showSearchBarInPage) {
      const inPageContainerEl = currentView.contentEl.children[0].createEl("div", {
        cls: "wb-search-bar-container"
      });
      currentView.contentEl.children[0]?.addClass("wb-page-search-bar");
      const inPageSearchBar = new InPageSearchBar(inPageContainerEl, this);
      new SearchBarIconList(currentView.contentEl.children[0], currentView, this);
      inPageSearchBar.focus();
      inPageSearchBar.addOnSearchBarEnterListener((url) => {
        if (/^\s{0,}$/.test(url) || this.settings.showOtherSearchEngines)
          return;
        SurfingView.spawnWebBrowserView(false, { url });
      });
    }
  }
  removeHeaderAndSearchBar(currentView) {
    if (!currentView)
      return;
    if (currentView.getViewType() != "empty")
      return;
    if (currentView.headerEl.children[2].hasClass("web-browser-header-bar")) {
      currentView.headerEl.children[2].empty();
      currentView.headerEl.children[2].removeClass("web-browser-header-bar");
    }
    if (currentView.contentEl.children[0].hasClass("wb-page-search-bar") && this.settings.showSearchBarInPage) {
      currentView.contentEl.children[0].children[1]?.detach();
      currentView.contentEl.children[0].children[1]?.empty();
      currentView.contentEl.children[0].children[1]?.detach();
      currentView.contentEl.children[0].removeClass("wb-page-search-bar");
    }
  }
  updateEmptyLeaves(removeHeader) {
    const emptyLeaves = this.app.workspace.getLeavesOfType("empty");
    emptyLeaves.forEach((leaf) => {
      if (leaf.view instanceof import_obsidian9.ItemView) {
        if (!removeHeader)
          this.addHeaderAndSearchBar(leaf.view);
        if (removeHeader)
          this.removeHeaderAndSearchBar(leaf.view);
      }
    });
  }
  registerCustomURI() {
    if (!this.settings.openInObsidianWeb)
      return;
    this.registerObsidianProtocolHandler("web-open", async (e) => {
      let url = e.url;
      if (!url)
        return;
      if (decodeURI(url) !== url)
        url = decodeURI(url).toString().replace(/\s/g, "%20");
      SurfingView.spawnWebBrowserView(true, { url });
    });
  }
  registerContextMenu() {
    this.registerEvent(this.app.workspace.on("editor-menu", (menu, editor, view) => {
      if (!editor) {
        return;
      }
      if (editor.getSelection().length === 0) {
        const token = editor.getClickableTokenAt(editor.getCursor());
        if (token && token.type === "external-link") {
          menu.addItem((item) => {
            item.setIcon("surfing").setTitle(t("Open With Surfing")).onClick(() => {
              SurfingView.spawnWebBrowserView(true, { url: token.text });
            });
          }).addItem((item) => {
            item.setIcon("surfing").setTitle(t("Open With External Browser")).onClick(() => {
              window.open(token.text, "_blank", "external");
            });
          });
        }
        return;
      }
      const selection = editor.getSelection();
      menu.addItem((item) => {
        const searchEngines = [...SEARCH_ENGINES, ...this.settings.customSearchEngine];
        const subMenu = item.setTitle(`Search In WebBrowser`).setIcon("search").setSubmenu();
        searchEngines.forEach((engine) => {
          subMenu.addItem((item2) => {
            item2.setIcon("search").setTitle(engine.name).onClick(() => {
              SurfingView.spawnWebBrowserView(true, { url: engine.url + selection });
            });
          });
        });
      });
    }));
  }
  registerCommands() {
    this.addCommand({
      id: "open-current-url-with-external-browser",
      name: t("Open Current URL In External Browser"),
      checkCallback: (checking) => {
        const webbrowserView = this.app.workspace.getActiveViewOfType(SurfingView);
        if (webbrowserView) {
          if (!checking) {
            window.open(webbrowserView.getState()?.url, "_blank");
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "clear-current-page-history",
      name: t("Clear Current Page History"),
      checkCallback: (checking) => {
        const webbrowserView = this.app.workspace.getActiveViewOfType(SurfingView);
        if (webbrowserView) {
          if (!checking) {
            webbrowserView.clearHistory();
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "refresh-page",
      name: t("Refresh Current Page"),
      checkCallback: (checking) => {
        const webbrowserView = this.app.workspace.getActiveViewOfType(SurfingView);
        if (webbrowserView) {
          if (!checking) {
            webbrowserView.refresh();
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "toggle-same-tab-globally",
      name: t("Toggle Same Tab In Web Browser"),
      callback: async () => {
        this.settings.openInSameTab = !this.settings.openInSameTab;
        await this.saveSettings();
      }
    });
    this.addCommand({
      id: "get-current-timestamp",
      name: t("Get Current Timestamp from Web Browser"),
      editorCallback: (editor, view) => {
        const lastActiveLeaves = this.app.workspace.getLeavesOfType("surfing-view");
        if (lastActiveLeaves.length === 0)
          return;
        const lastActiveLeaf = lastActiveLeaves.sort((a, b) => b.activeTime - a.activeTime)[0];
        const webbrowserView = lastActiveLeaf.view;
        const url = webbrowserView.getState()?.url;
        if (!url?.contains("bilibili"))
          return;
        webbrowserView.getCurrentTimestamp(editor);
      }
    });
    this.addCommand({
      id: "search-in-current-page-title-bar",
      name: t("Search In Current Page Title Bar"),
      callback: () => {
        const currentView = this.app.workspace.getActiveViewOfType(import_obsidian9.MarkdownView);
        if (!currentView)
          return;
        if (currentView.headerEl.childNodes.length > 4)
          return;
        const searchBarEl = new HeaderBar(currentView.headerEl, this, false);
        searchBarEl.addOnSearchBarEnterListener((url) => {
          SurfingView.spawnWebBrowserView(false, { url });
        });
        searchBarEl.focus();
      }
    });
    const searchEngines = [...SEARCH_ENGINES, ...this.settings.customSearchEngine];
    searchEngines.forEach((engine) => {
      this.addCommand({
        id: "using" + engine.name.replace(/\s/g, "-") + "-to-search",
        name: t("Using ") + engine.name + t(" to search"),
        editorCallback: (editor, view) => {
          if (editor.getSelection().length === 0)
            return;
          const selection = editor.getSelection();
          SurfingView.spawnWebBrowserView(true, { url: engine.url + selection });
        }
      });
    });
  }
  registerCustomIcon() {
    (0, import_obsidian9.addIcon)("surfing", `<svg t="1669432317981" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1590" data-darkreader-inline-fill="" width="100" height="100"><path d="M330.926 1023.978c-11.78 0-21.328-9.562-21.328-21.344v-42.652c0-11.782 9.546-21.344 21.328-21.344s21.342 9.562 21.342 21.344v42.652c0 11.782-9.56 21.344-21.342 21.344z" fill="#EAAD7A" p-id="1591" data-darkreader-inline-fill="" style="--darkreader-inline-fill:#e2a36a;"></path><path d="M650.892 273.08C624.644 115.932 579.958 16.656 578.052 12.532a21.332 21.332 0 0 0-25.904-11.5c-1.406 0.468-35.186 11.28-70.262 24.842-20.936 8.062-37.998 15.466-50.7 21.936-22.046 11.25-32.014 20.092-35.358 31.404-2.578 7.188-24.764 54.842-48.232 105.246-39.138 84.088-92.746 199.27-136.086 298.016-23.796 54.248-41.92 97.714-53.84 129.212-21.952 57.998-20.89 69.652-17.204 78.872 4.172 10.466 13.282 21.842 82.808 55.342 36.28 17.466 85.76 39.278 147.07 64.902 104.088 43.464 207.894 83.372 208.926 83.746 2.468 0.968 5.062 1.438 7.656 1.438 3.124 0 6.218-0.688 9.124-2.062a21.284 21.284 0 0 0 11.124-12.532c35.308-106.152 55.808-217.832 60.84-331.952 4.034-91.246-1.716-184.21-17.122-276.362z" fill="#ED5564" p-id="1592" data-darkreader-inline-fill="" style="--darkreader-inline-fill:#cc5b60;"></path><path d="M650.892 273.08C624.644 115.932 579.958 16.656 578.052 12.532a21.332 21.332 0 0 0-25.904-11.5c-0.656 0.218-8.31 2.686-19.842 6.592a21.938 21.938 0 0 1 3.094 4.906c1.89 4.124 46.59 103.4 72.84 260.548 15.376 92.152 21.154 185.116 17.124 276.362-5.06 114.12-25.53 225.798-60.872 331.952a21.216 21.216 0 0 1-3.282 6.156c11.28 4.406 17.81 6.906 18.06 7 2.468 0.968 5.062 1.438 7.656 1.438 3.124 0 6.218-0.688 9.124-2.062a21.284 21.284 0 0 0 11.124-12.532c35.308-106.152 55.808-217.832 60.84-331.952 4.034-91.244-1.716-184.208-17.122-276.36z" fill="#FFFFFF" opacity=".2" p-id="1593" data-darkreader-inline-fill="" style="--darkreader-inline-fill:#ebe3d5;"></path><path d="M181.622 874.642c0 2.468 0.406 4.938 1.266 7.282 0.954 2.624 9.89 26.124 32.092 49.934 21.014 22.562 58.2 49.436 115.948 49.436h383.996c128.744 0 186.428-91.588 188.834-95.494a21.314 21.314 0 0 0 3.156-11.156H181.622z" fill="#F4BE8E" p-id="1594" data-darkreader-inline-fill="" style="--darkreader-inline-fill:#ecb177;"></path><path d="M685.924 584.064c-6.782-2.25-13.532-3.876-19.562-5.062a1292.052 1292.052 0 0 1-3.656 42.81c12.844 3.032 24.876 7.936 29.188 13.686-7.25 3.718-26.344 10.906-73.402 17.844-42.218 6.218-97.95 11-161.196 13.75-122.15 5.342-251.97 2.376-315.686-7.218-11.656-1.782-22.514 6.25-24.28 17.904-1.75 11.656 6.264 22.53 17.92 24.28 44.826 6.75 118.102 10.376 199.598 10.376 39.28 0 80.496-0.844 121.336-2.594 64.154-2.718 121.274-7.5 165.118-13.78 71.778-10.312 92.806-22.438 102.368-30.686 10.406-8.938 12.594-18.75 12.594-25.376 0-14.688-6.562-41.466-50.34-55.934z" fill="#434A54" p-id="1595" data-darkreader-inline-fill="" style="--darkreader-inline-fill:#555755;"></path></svg>`);
  }
  checkWebBrowser() {
    const webBrowser = app.plugins.getPlugin("obsidian-web-browser");
    if (webBrowser)
      new import_obsidian9.Notice(t("You enabled obsidian-web-browser plugin, please disable it/disable surfing to avoid conflict."), 4e3);
    const tabHeader = app.vault.getConfig("showViewHeader");
    if (!tabHeader)
      new import_obsidian9.Notice(t("You didn't enable show tab title bar in apperance settings, please enable it to use surfing happily."), 4e3);
  }
  patchMarkdownView() {
    this.register(around(import_obsidian9.MarkdownView.prototype, {
      triggerClickableToken: (next) => function(token, newLeaf, ...args) {
        if (token.type === "external-link") {
          if (newLeaf === "tab" || newLeaf === "window") {
            window.open(token.text, "_blank", "external");
            return;
          }
          const url = token.text !== decodeURI(token.text) ? decodeURI(token.text) : token.text;
          if (checkIfWebBrowserAvailable(url)) {
            SurfingView.spawnWebBrowserView(true, { url });
          } else {
            window.open(url, "_blank", "external");
          }
          return;
        }
        return next.call(this, token, newLeaf, ...args);
      }
    }));
  }
  patchEditMode() {
    const patchLivePreivewView = () => {
      const view = app.workspace.getLeavesOfType("markdown").first()?.view;
      if (!view)
        return false;
      const editMode = view.editMode ?? view.sourceMode;
      if (!editMode)
        throw new Error("Failed to patch external link: no edit view found");
      const MarkdownEditView = editMode.constructor;
      this.register(around(MarkdownEditView.prototype, {
        triggerClickableToken: (next) => function(token, newLeaf, ...args) {
          if (token.type === "external-link") {
            if (newLeaf === "tab" || newLeaf === "window") {
              window.open(token.text, "_blank", "external");
              return;
            }
            const url = token.text !== decodeURI(token.text) ? decodeURI(token.text) : token.text;
            if (checkIfWebBrowserAvailable(url)) {
              SurfingView.spawnWebBrowserView(true, { url });
            } else {
              window.open(url, "_blank", "external");
            }
            return;
          }
          return next.call(this, token, newLeaf, ...args);
        }
      }));
      console.log("Obsidian-Surfing: editmode external link patched");
      return true;
    };
    this.app.workspace.onLayoutReady(() => {
      if (!patchLivePreivewView()) {
        const evt = app.workspace.on("layout-change", () => {
          patchLivePreivewView() && app.workspace.offref(evt);
        });
        this.registerEvent(evt);
      }
    });
  }
  patchWindowOpen() {
    const uninstaller = around(window, {
      open: (next) => function(url, target, features) {
        let urlString = "";
        if (typeof url === "string") {
          urlString = url;
        } else if (url instanceof URL) {
          urlString = url.toString();
        }
        if (decodeURI(urlString) !== urlString)
          urlString = decodeURI(urlString).toString().replace(/\s/g, "%20");
        if (urlString === "about:blank" && features || !checkIfWebBrowserAvailable(urlString) || urlString !== "about:blank" && (target === "_blank" || target === "_self") || features === "external") {
          return next(url, target, features);
        }
        if (urlString && !target && !features) {
          SurfingView.spawnWebBrowserView(true, { url: urlString });
        }
        return null;
      }
    });
    this.register(uninstaller);
  }
  patchMarkdownPreviewRenderer() {
    const uninstaller = around(import_obsidian9.MarkdownPreviewRenderer, {
      registerDomEvents: (next) => function(el, instance, ...args) {
        el?.on("click", ".external-link", (event, targetEl) => {
          if (targetEl) {
            const url = targetEl.getAttribute("href");
            if (url) {
              if (event.ctrlKey) {
                window.open(url, "_blank", "external");
                return;
              }
              if (checkIfWebBrowserAvailable(url)) {
                SurfingView.spawnWebBrowserView(true, { url });
              } else {
                window.open(url, "_blank", "external");
              }
              return;
            }
          }
        });
        return next.call(this, el, instance, ...args);
      }
    });
    this.register(uninstaller);
  }
  patchEmptyView() {
    const patchEmptyView = () => {
      const view = app.workspace.getLeavesOfType("empty").first()?.view;
      const leaf = app.workspace.getLeavesOfType("empty").first();
      if (!view)
        return false;
      const EmptyView = view.constructor;
      this.register(around(EmptyView.prototype, {
        onOpen: (next) => function(...args) {
          if (!this.contentEl.querySelector(".surfing-settings-icon")) {
            const iconEl = this.contentEl.createDiv({
              cls: "surfing-settings-icon"
            });
            iconEl.addEventListener("click", () => {
              app.setting.open();
              app.setting.openTabById("surfing");
            });
            (0, import_obsidian9.setIcon)(iconEl, "settings");
          }
          return next.call(this, ...args);
        }
      }));
      leaf?.rebuildView();
      console.log("Obsidian-Surfing: empty view patched");
      return true;
    };
    this.app.workspace.onLayoutReady(() => {
      if (!patchEmptyView()) {
        const evt = app.workspace.on("layout-change", () => {
          patchEmptyView() && app.workspace.offref(evt);
        });
        this.registerEvent(evt);
      }
    });
  }
  patchWorkspaceLeaf() {
    this.register(around(import_obsidian9.WorkspaceLeaf.prototype, {
      setViewState: (next) => {
        return function(state, ...rest) {
          if (this.getRoot()?.type === "floating" && state.type === WEB_BROWSER_VIEW_ID) {
            return next.call(this, {
              type: WEB_BROWSER_IFRAME_VIEW_ID,
              active: true,
              state: {
                url: state.state.url
              }
            }, ...rest);
          }
          if (this.getRoot()?.type === "split" && state.type === WEB_BROWSER_IFRAME_VIEW_ID) {
            return next.call(this, {
              type: WEB_BROWSER_VIEW_ID,
              active: true,
              state: {
                url: state.state.url
              }
            }, ...rest);
          }
          return next.apply(this, [state, ...rest]);
        };
      },
      setDimension: (old) => {
        return async function(dimension) {
          await old.call(this, dimension);
          if (dimension === null && (this.view instanceof SurfingView || this.view instanceof SurfingIframeView)) {
            app.workspace.setActiveLeaf(this);
          }
        };
      }
    }));
    this.register(around(import_obsidian9.Workspace.prototype, {
      setActiveLeaf: (next) => {
        return function(leaf, params) {
          if (leaf.view instanceof SurfingView && leaf?.getRoot()?.type === "floating") {
            leaf.setViewState({
              type: WEB_BROWSER_IFRAME_VIEW_ID,
              active: true,
              state: {
                url: leaf.view.getState()?.url
              }
            });
            return;
          }
          if (leaf.view instanceof SurfingIframeView && leaf?.getRoot()?.type === "split") {
            leaf.setViewState({
              type: WEB_BROWSER_VIEW_ID,
              active: true,
              state: {
                url: leaf.view.getState()?.url
              }
            });
            return;
          }
          return next.call(this, leaf, params);
        };
      },
      moveLeafToPopout: (old) => {
        return function(leaf, data) {
          const result = old.call(this, leaf, data);
          app.workspace.setActiveLeaf(leaf);
          return result;
        };
      }
    }));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
