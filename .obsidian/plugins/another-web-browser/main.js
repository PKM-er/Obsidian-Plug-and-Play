/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/anotherWebBrowserIndex.ts
var anotherWebBrowserIndex_exports = {};
__export(anotherWebBrowserIndex_exports, {
  SEARCH_ENGINES: () => SEARCH_ENGINES,
  default: () => AnotherWebBrowserPlugin2
});
module.exports = __toCommonJS(anotherWebBrowserIndex_exports);
var import_electron2 = require("electron");
var import_obsidian5 = require("obsidian");

// src/translations/helper.ts
var import_obsidian = require("obsidian");

// src/translations/locale/ar.ts
var ar_default = {};

// src/translations/locale/cz.ts
var cz_default = {};

// src/translations/locale/da.ts
var da_default = {};

// src/translations/locale/de.ts
var de_default = {};

// src/translations/locale/en.ts
var en_default = {
  "Search with": "Search with",
  "or enter address": "or enter address",
  "Default Search Engine": "Default Search Engine",
  "Set Custom Search Engine Url": "Set Custom Search Engine Url",
  "Set custom search engine url for yourself. 'Duckduckgo' By default": "Set custom search engine url for yourself. 'Duckduckgo' By default",
  "Custom Link to Highlight Format": "Custom Link to Highlight Format",
  "Copy Link to Highlight Format": "Copy Link to Highlight Format",
  "Set copy link to text fragment format. [{CONTENT}]({URL}) By default. You can also set {TIME:YYYY-MM-DD HH:mm:ss} to get the current date.": "Set copy link to text fragment format. [{CONTENT}]({URL}) By default. You can also set {TIME:YYYY-MM-DD HH:mm:ss} to get the current date.",
  "Open URL In Same Tab": "Open In Same Tab",
  "Custom": "Custom",
  "Baidu": "Baidu",
  "Yahoo": "Yahoo",
  "Bing": "Bing",
  "Google": "Google",
  "DuckDuckGo": "DuckDuckGo",
  "Toggle Same Tab In Web Browser": "Toggle Same Tab In Web Browser",
  "Clear Current Page History": "Clear Current Page History",
  "Open Current URL In External Browser": "Open Current URL In External Browser",
  "Search Text": "Search Text",
  "Copy Plain Text": "Copy Plain Text",
  "Copy Link to Highlight": "Copy Link to Highlight",
  "Copy Video Timestamp": "Copy Video Time",
  "Open URL In Obsidian Web": "Open URL In Obsidian Web",
  "Copy BookmarkLets Success": "Copy BookmarkLets Success",
  "Refresh Current Page": "Refresh Current Page"
};

// src/translations/locale/en-gb.ts
var en_gb_default = {};

// src/translations/locale/es.ts
var es_default = {};

// src/translations/locale/fr.ts
var fr_default = {};

// src/translations/locale/hi.ts
var hi_default = {};

// src/translations/locale/id.ts
var id_default = {};

// src/translations/locale/it.ts
var it_default = {};

// src/translations/locale/ja.ts
var ja_default = {};

// src/translations/locale/ko.ts
var ko_default = {};

// src/translations/locale/nl.ts
var nl_default = {};

// src/translations/locale/no.ts
var no_default = {};

// src/translations/locale/pl.ts
var pl_default = {};

// src/translations/locale/pt.ts
var pt_default = {};

// src/translations/locale/pt-br.ts
var pt_br_default = {};

// src/translations/locale/ro.ts
var ro_default = {};

// src/translations/locale/ru.ts
var ru_default = {};

// src/translations/locale/tr.ts
var tr_default = {};

// src/translations/locale/zh-cn.ts
var zh_cn_default = {
  "Search with": "\u4F7F\u7528",
  "or enter address": "\u641C\u7D22\uFF0C\u6216\u8F93\u5165\u5730\u5740",
  "Default Search Engine": "\u9ED8\u8BA4\u641C\u7D22\u5F15\u64CE",
  "Set Custom Search Engine Url": "\u8BBE\u7F6E\u81EA\u5B9A\u4E49\u641C\u7D22\u5F15\u64CE\u7F51\u5740",
  "Set custom search engine url for yourself. 'Duckduckgo' By default": "\u8BBE\u7F6E\u81EA\u5B9A\u4E49\u641C\u7D22\u5F15\u64CE\u7F51\u5740\u3002\u9ED8\u8BA4\u4E3A'Duckduckgo'",
  "Custom Link to Highlight Format": "\u81EA\u5B9A\u4E49\u6307\u5411\u7A81\u51FA\u663E\u793A\u7684\u94FE\u63A5\u7684\u683C\u5F0F",
  "Copy Link to Text Fragment Format": "\u590D\u5236\u6307\u5411\u7A81\u51FA\u663E\u793A\u7684\u94FE\u63A5\u7684\u683C\u5F0F",
  "Set copy link to text fragment format. [{CONTENT}]({URL}) By default. You can also set {TIME:YYYY-MM-DD HH:mm:ss} to get the current date.": "\u8BBE\u7F6E\u590D\u5236\u6587\u672C\u7247\u6BB5\u7684\u94FE\u63A5\u7684\u683C\u5F0F\u3002\u9ED8\u8BA4\u4E3A[{CONTENT}]({URL})\u3002\u4F60\u4E5F\u53EF\u4EE5\u8BBE\u7F6E{TIME:YYYY-MM-DD HH:mm:ss}\u6765\u83B7\u53D6\u5F53\u524D\u65E5\u671F\u65F6\u95F4\u3002",
  "Open URL In Same Tab": "\u5728\u540C\u4E00\u6807\u7B7E\u9875\u4E2D\u6253\u5F00\u7F51\u9875",
  "Custom": "\u81EA\u5B9A\u4E49",
  "Baidu": "\u767E\u5EA6",
  "Yahoo": "\u96C5\u864E",
  "Bing": "\u5FC5\u5E94",
  "Google": "\u8C37\u6B4C",
  "DuckDuckGo": "DuckDuckGo",
  "Toggle Same Tab In Web Browser": "\u5207\u6362\u5728\u6D4F\u89C8\u5668\u4E2D\u56FA\u5B9A\u6807\u7B7E\u9875\u8BBF\u95EE",
  "Clear Current Page History": "\u6E05\u9664\u5F53\u524D\u9875\u9762\u7684\u5386\u53F2\u8BB0\u5F55",
  "Open Current URL In External Browser": "\u5728\u5916\u90E8\u6D4F\u89C8\u5668\u4E2D\u6253\u5F00\u5F53\u524D\u7F51\u5740",
  "Search Text": "\u641C\u7D22\u6587\u672C",
  "Copy Plain Text": "\u590D\u5236\u7EAF\u6587\u672C",
  "Copy Link to Highlight": "\u590D\u5236\u6307\u5411\u7A81\u51FA\u663E\u793A\u7684\u94FE\u63A5",
  "Copy Video Timestamp": "\u590D\u5236\u89C6\u9891\u65F6\u95F4\u6233",
  "Open URL In Obsidian Web": "\u5728 Obsidian Web \u4E2D\u6253\u5F00\u7F51\u5740",
  "Copy BookmarkLets Success": "\u590D\u5236 BookmarkLets \u6210\u529F",
  "Refresh Current Page": "\u5237\u65B0\u5F53\u524D\u9875\u9762"
};

// src/translations/locale/zh-tw.ts
var zh_tw_default = {};

// src/translations/helper.ts
var localeMap = {
  ar: ar_default,
  cs: cz_default,
  da: da_default,
  de: de_default,
  en: en_default,
  "en-gb": en_gb_default,
  es: es_default,
  fr: fr_default,
  hi: hi_default,
  id: id_default,
  it: it_default,
  ja: ja_default,
  ko: ko_default,
  nl: nl_default,
  nn: no_default,
  pl: pl_default,
  pt: pt_default,
  "pt-br": pt_br_default,
  ro: ro_default,
  ru: ru_default,
  tr: tr_default,
  "zh-cn": zh_cn_default,
  "zh-tw": zh_tw_default
};
var locale = localeMap[import_obsidian.moment.locale()];
function t(str) {
  return locale && locale[str] || en_default[str];
}

// src/header_bar.ts
var HeaderBar = class {
  constructor(parent, plugin) {
    this.onSearchBarEnterListener = new Array();
    this.plugin = plugin;
    parent.addClass("web-browser-header-bar");
    parent.empty();
    this.searchBar = parent.createEl("input", {
      type: "text",
      placeholder: t("Search with") + this.plugin.settings.defaultSearchEngine + t("or enter address"),
      cls: "web-browser-search-bar"
    });
    this.searchBar.addEventListener("keydown", (event) => {
      if (!event) {
        const event2 = window.event;
      }
      if (event.key === "Enter") {
        for (const listener of this.onSearchBarEnterListener) {
          listener(this.searchBar.value);
        }
      }
    }, false);
    this.searchBar.addEventListener("focusin", (event) => {
      this.searchBar.select();
    });
    this.searchBar.addEventListener("focusout", (event) => {
      window.getSelection()?.removeAllRanges();
    });
  }
  addOnSearchBarEnterListener(listener) {
    this.onSearchBarEnterListener.push(listener);
  }
  setSearchBarUrl(url) {
    this.searchBar.value = url;
  }
  focus() {
    this.searchBar.focus();
  }
};

// src/web_browser_view.ts
var import_obsidian2 = require("obsidian");
var import_electron = require("electron");
var import_obsidian3 = require("obsidian");
var WEB_BROWSER_VIEW_ID = "another-web-browser-view";
var WebBrowserView = class extends import_obsidian2.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.currentTitle = "New tab";
    this.plugin = plugin;
  }
  static spawnWebBrowserView(newLeaf, state) {
    const isOpenInSameTab = app.plugins.getPlugin("another-web-browser").settings.openInSameTab;
    if (!isOpenInSameTab) {
      if (state.url.contains("bilibili")) {
        for (let i = 0; i < app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID).length; i++) {
          if (app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[i].getViewState().state.url.split("?t=")[0] === state.url.split("?t=")[0]) {
            app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[i].view.navigate(state.url, false, true);
            app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[i].rebuildView();
            return;
          }
        }
      }
      app.workspace.getLeaf(newLeaf).setViewState({ type: WEB_BROWSER_VIEW_ID, active: true, state });
      return;
    }
    const leafId = app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID).length ? localStorage.getItem("web-browser-leaf-id") : app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[0]?.id;
    if (!leafId) {
      let activeViewLeaf;
      activeViewLeaf = app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView)?.leaf;
      if (!activeViewLeaf)
        activeViewLeaf = app.workspace.getActiveViewOfType(import_obsidian2.ItemView)?.getViewType() === "empty" ? app.workspace.getActiveViewOfType(import_obsidian2.ItemView)?.leaf : void 0;
      if (!activeViewLeaf)
        return;
      const leaf = app.workspace.getActiveViewOfType(import_obsidian2.ItemView)?.getViewType() === "empty" ? activeViewLeaf : app.workspace.createLeafBySplit(activeViewLeaf);
      localStorage.setItem("web-browser-leaf-id", leaf.id);
      leaf.setViewState({ type: WEB_BROWSER_VIEW_ID, active: true, state });
      if (!(leaf.view.getViewType() === "empty")) {
        leaf.rebuildView();
      }
      leaf.setPinned(true);
      leaf.tabHeaderInnerTitleEl.parentElement?.parentElement?.addClass("same-tab");
      return;
    } else {
      if (!app.workspace.getLeafById(leafId)) {
        const newLeafID = app.workspace.getLeavesOfType(WEB_BROWSER_VIEW_ID)[0]?.id;
        if (newLeafID) {
          localStorage.setItem("web-browser-leaf-id", newLeafID);
          (app.workspace.getLeafById(newLeafID)?.view).navigate(state.url, true);
          app.workspace.getLeafById(newLeafID)?.rebuildView();
          return;
        }
      }
      if (app.workspace.getLeafById(leafId)?.view.getViewType() === WEB_BROWSER_VIEW_ID) {
        (app.workspace.getLeafById(leafId)?.view).navigate(state.url, true);
        app.workspace.getLeafById(leafId).rebuildView();
        return;
      }
    }
  }
  getDisplayText() {
    return this.currentTitle;
  }
  getViewType() {
    return WEB_BROWSER_VIEW_ID;
  }
  async onOpen() {
    this.navigation = true;
    this.contentEl.empty();
    this.headerBar = new HeaderBar(this.headerEl.children[2], this.plugin);
    this.favicon = document.createElement("img");
    this.favicon.width = 16;
    this.favicon.height = 16;
    this.frame = document.createElement("webview");
    this.frame.setAttribute("allowpopups", "");
    this.frame.addClass("web-browser-frame");
    this.contentEl.addClass("web-browser-view-content");
    this.contentEl.appendChild(this.frame);
    this.headerBar.addOnSearchBarEnterListener((url) => {
      this.navigate(url);
    });
    this.frame.addEventListener("dom-ready", (event) => {
      const webContents = import_electron.remote.webContents.fromId(this.frame.getWebContentsId());
      webContents.setWindowOpenHandler((event2) => {
        WebBrowserView.spawnWebBrowserView(true, { url: event2.url });
        return {
          action: "allow"
        };
      });
      webContents.on("context-menu", (event2, params) => {
        event2.preventDefault();
        run(params);
      }, false);
      const run = (0, import_obsidian2.debounce)((params) => {
        const { Menu: Menu2, MenuItem } = import_electron.remote;
        const menu = new Menu2();
        menu.append(new MenuItem({
          label: t("Open Current URL In External Browser"),
          click: function() {
            FunctionHooks.ogWindow$Open.call(window, params.pageURL, "_blank");
          }
        }));
        if (params.selectionText) {
          menu.append(new MenuItem({ type: "separator" }));
          menu.append(new MenuItem({
            label: t("Search Text"),
            click: function() {
              try {
                WebBrowserView.spawnWebBrowserView(true, { url: params.selectionText });
                console.log("Page URL copied to clipboard");
              } catch (err) {
                console.error("Failed to copy: ", err);
              }
            }
          }));
          menu.append(new MenuItem({ type: "separator" }));
          menu.append(new MenuItem({
            label: t("Copy Plain Text"),
            click: function() {
              try {
                webContents.copy();
                console.log("Page URL copied to clipboard");
              } catch (err) {
                console.error("Failed to copy: ", err);
              }
            }
          }));
          const highlightFormat = this.plugin.settings.highlightFormat;
          menu.append(new MenuItem({
            label: t("Copy Link to Highlight"),
            click: function() {
              try {
                const linkToHighlight = params.pageURL.replace(/\#\:\~\:text\=(.*)/g, "") + "#:~:text=" + encodeURIComponent(params.selectionText);
                const selectionText = params.selectionText;
                let link = "";
                if (highlightFormat.contains("{TIME")) {
                  const timeString = highlightFormat.match(/\{TIME\:[^\{\}\[\]]*\}/g)?.[0];
                  if (timeString) {
                    const momentTime = (0, import_obsidian3.moment)().format(timeString.replace(/{TIME:([^\}]*)}/g, "$1"));
                    link = highlightFormat.replace(timeString, momentTime);
                  }
                }
                link = (link != "" ? link : highlightFormat).replace(/\{URL\}/g, linkToHighlight).replace(/\{CONTENT\}/g, selectionText);
                import_electron.clipboard.writeText(link);
                console.log("Link URL copied to clipboard");
              } catch (err) {
                console.error("Failed to copy: ", err);
              }
            }
          }));
          menu.popup(webContents);
        }
        if (params.pageURL?.contains("bilibili")) {
          menu.append(new MenuItem({
            label: t("Copy Video Timestamp"),
            click: function() {
              try {
                webContents.executeJavaScript(`
											var time = document.querySelectorAll('.bpx-player-ctrl-time-current')[0].innerHTML;
											var timeYMSArr=time.split(':');
											var joinTimeStr='00h00m00s';
											if(timeYMSArr.length===3){
												 joinTimeStr=timeYMSArr[0]+'h'+timeYMSArr[1]+'m'+timeYMSArr[2]+'s';
											}else if(timeYMSArr.length===2){
												 joinTimeStr=timeYMSArr[0]+'m'+timeYMSArr[1]+'s';
											}
											var timeStr= "";
											timeStr = window.location.href.split('?')[0]+'?t=' + joinTimeStr;
										`, true).then((result) => {
                  import_electron.clipboard.writeText("[" + result.split("?t=")[1] + "](" + result + ")");
                });
                console.log("Page URL copied to clipboard");
              } catch (err) {
                console.error("Failed to copy: ", err);
              }
            }
          }));
        }
        setTimeout(() => {
          menu.popup(webContents);
        }, 0);
      }, 10, true);
      webContents.on("before-input-event", (event2, input) => {
        if (input.type !== "keyDown") {
          return;
        }
        const emulatedKeyboardEvent = new KeyboardEvent("keydown", {
          code: input.code,
          key: input.key,
          shiftKey: input.shift,
          altKey: input.alt,
          ctrlKey: input.control,
          metaKey: input.meta,
          repeat: input.isAutoRepeat
        });
        activeDocument.body.dispatchEvent(emulatedKeyboardEvent);
      });
    });
    this.frame.addEventListener("focus", (event) => {
      app.workspace.setActiveLeaf(this.leaf);
    });
    this.frame.addEventListener("page-favicon-updated", (event) => {
      this.favicon.src = event.favicons[0];
      this.leaf.tabHeaderInnerIconEl.empty();
      this.leaf.tabHeaderInnerIconEl.appendChild(this.favicon);
    });
    this.frame.addEventListener("page-title-updated", (event) => {
      this.leaf.tabHeaderInnerTitleEl.innerText = event.title;
      this.currentTitle = event.title;
    });
    this.frame.addEventListener("will-navigate", (event) => {
      this.navigate(event.url, true, false);
    });
    this.frame.addEventListener("did-navigate-in-page", (event) => {
      this.navigate(event.url, true, false);
    });
    this.frame.addEventListener("new-window", (event) => {
      console.log("Trying to open new window at url: " + event.url);
      event.preventDefault();
    });
    this.frame.addEventListener("did-attach-webview", (event) => {
      console.log("Webview attached");
    });
  }
  async setState(state, result) {
    this.navigate(state.url, false);
  }
  clearHistory() {
    const webContents = import_electron.remote.webContents.fromId(this.frame.getWebContentsId());
    if (!webContents)
      return;
    webContents.clearHistory();
    webContents.executeJavaScript("history.pushState({}, '', location.href)");
    this.leaf.history.backHistory.splice(0);
    this.leaf.history.forwardHistory.splice(0);
  }
  getState() {
    return { url: this.currentUrl };
  }
  navigate(url, addToHistory = true, updateWebView = true) {
    if (url === "") {
      return;
    }
    if (addToHistory) {
      if (this.leaf.history.backHistory.last()?.state?.state?.url !== this.currentUrl) {
        this.leaf.history.backHistory.push({
          state: {
            type: WEB_BROWSER_VIEW_ID,
            state: this.getState()
          },
          title: this.currentTitle,
          icon: "search"
        });
        this.headerEl.children[1].children[0].setAttribute("aria-disabled", "false");
      }
    }
    const urlRegEx = /^(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#?&//=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$/g;
    const urlRegEx2 = /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+(:[0-9]+)?|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w\-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)/g;
    if (urlRegEx.test(url)) {
      const first7 = url.slice(0, 7).toLowerCase();
      const first8 = url.slice(0, 8).toLowerCase();
      if (!(first7 === "http://" || first7 === "file://" || first8 === "https://")) {
        url = "https://" + url;
      }
    } else if (!(url.startsWith("file://") || /\.htm(l)?/g.test(url)) && !urlRegEx2.test(encodeURI(url))) {
      url = (this.plugin.settings.defaultSearchEngine != "custom" ? SEARCH_ENGINES[this.plugin.settings.defaultSearchEngine] : this.plugin.settings.customSearchUrl) + url;
    }
    this.currentUrl = url;
    this.headerBar.setSearchBarUrl(url);
    if (updateWebView) {
      this.frame.setAttribute("src", url);
    }
    app.workspace.requestSaveLayout();
  }
  getCurrentTimestamp(editor) {
    const webContents = import_electron.remote.webContents.fromId(this.frame.getWebContentsId());
    webContents.executeJavaScript(`
					var time = document.querySelectorAll('.bpx-player-ctrl-time-current')[0].innerHTML;
					var timeYMSArr=time.split(':');
					var joinTimeStr='00h00m00s';
					if(timeYMSArr.length===3){
						 joinTimeStr=timeYMSArr[0]+'h'+timeYMSArr[1]+'m'+timeYMSArr[2]+'s';
					}else if(timeYMSArr.length===2){
						 joinTimeStr=timeYMSArr[0]+'m'+timeYMSArr[1]+'s';
					}
					var timeStr= "";
					timeStr = window.location.href.split('?')[0]+'?t=' + joinTimeStr;
				`, true).then((result) => {
      const timestamp = "[" + result.split("?t=")[1] + "](" + result + ") ";
      const originalCursor = editor?.posToOffset(editor?.getCursor());
      editor?.replaceRange(timestamp, editor?.getCursor());
      if (originalCursor)
        editor?.setCursor(editor?.offsetToPos(originalCursor + timestamp.length));
    });
  }
  refresh() {
    const webContents = import_electron.remote.webContents.fromId(this.frame.getWebContentsId());
    webContents.reload();
  }
};

// src/hooks.ts
var FunctionHooks = class {
  static onload() {
    FunctionHooks.ogWindow$Open = window.open;
    window.open = (url, target, features) => {
      let urlString = "";
      if (typeof url === "string") {
        urlString = url;
      } else if (url instanceof URL) {
        urlString = url.toString();
      }
      if (decodeURI(urlString) !== urlString)
        urlString = decodeURI(urlString).toString().replace(/\s/g, "%20");
      if (urlString === "about:blank" && features || !urlString.startsWith("http://") && !urlString.startsWith("https://") && !(urlString.startsWith("file://") && /\.htm(l)?/g.test(urlString))) {
        return FunctionHooks.ogWindow$Open.call(window, url, target, features);
      }
      WebBrowserView.spawnWebBrowserView(true, { url: urlString });
      return null;
    };
  }
  static onunload() {
    window.open = FunctionHooks.ogWindow$Open;
  }
};

// src/web_browser_file_view.ts
var import_obsidian4 = require("obsidian");
var HTML_FILE_EXTENSIONS = ["html", "htm"];
var WEB_BROWSER_FILE_VIEW_ID = "another-web-browser-file-view";
var WebBrowserFileView = class extends import_obsidian4.FileView {
  constructor(leaf) {
    super(leaf);
  }
  async onLoadFile(file) {
    const adapter = this.app.vault.adapter;
    const urlString = "file:///" + (adapter.getBasePath() + "/" + file.path).toString().replace(/\s/g, "%20");
    WebBrowserView.spawnWebBrowserView(true, { url: urlString });
    if (this.leaf)
      this.leaf.detach();
  }
  onunload() {
  }
  canAcceptExtension(extension) {
    return HTML_FILE_EXTENSIONS.includes(extension);
  }
  getViewType() {
    return WEB_BROWSER_FILE_VIEW_ID;
  }
};

// src/anotherWebBrowserIndex.ts
var DEFAULT_SETTINGS = {
  defaultSearchEngine: "duckduckgo",
  customSearchUrl: "https://duckduckgo.com/?q=",
  customHighlightFormat: false,
  highlightFormat: "[{CONTENT}]({URL})",
  openInSameTab: false,
  openInObsidianWeb: false
};
var SEARCH_ENGINES = {
  "google": "https://www.google.com/search?q=",
  "bing": "https://www.bing.com/search?q=",
  "duckduckgo": "https://duckduckgo.com/?q=",
  "yahoo": "https://search.yahoo.com/search?p=",
  "baidu": "https://www.baidu.com/s?wd=",
  "wikipedia": "https://en.wikipedia.org/w/index.php?search="
};
var AnotherWebBrowserPlugin2 = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new WebBrowserSettingTab(this.app, this));
    this.registerView(WEB_BROWSER_VIEW_ID, (leaf) => new WebBrowserView(leaf, this));
    this.registerView(WEB_BROWSER_FILE_VIEW_ID, (leaf) => new WebBrowserFileView(leaf));
    try {
      this.registerExtensions(HTML_FILE_EXTENSIONS, WEB_BROWSER_FILE_VIEW_ID);
    } catch (error) {
      new import_obsidian5.Notice(`File extensions ${HTML_FILE_EXTENSIONS} had been registered by other plugin!`);
    }
    FunctionHooks.onload();
    this.updateEmptyLeaf(false);
    this.registerContextMenu();
    this.registerCustomURI();
    this.onLayoutChangeEventRef = this.app.workspace.on("layout-change", () => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian5.ItemView);
      if (activeView)
        this.addHeader(activeView);
    });
    this.registerCommands();
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(WEB_BROWSER_VIEW_ID);
    FunctionHooks.onunload();
    this.app.workspace.offref(this.onLayoutChangeEventRef);
    this.updateEmptyLeaf(true);
  }
  addHeader(currentView) {
    if (!currentView)
      return;
    if (currentView.getViewType() != "empty")
      return;
    if (!currentView.headerEl.children[2].hasClass("web-browser-header-bar")) {
      const headerBar = new HeaderBar(currentView.headerEl.children[2], this);
      headerBar.focus();
      headerBar.addOnSearchBarEnterListener((url) => {
        WebBrowserView.spawnWebBrowserView(false, { url });
      });
    }
  }
  removeHeader(currentView) {
    if (!currentView)
      return;
    if (currentView.getViewType() != "empty")
      return;
    if (currentView.headerEl.children[2].hasClass("web-browser-header-bar")) {
      currentView.headerEl.children[2].empty();
      currentView.headerEl.children[2].removeClass("web-browser-header-bar");
    }
  }
  updateEmptyLeaf(remove) {
    const emptyLeaves = this.app.workspace.getLeavesOfType("empty");
    emptyLeaves.forEach((leaf) => {
      if (leaf.view instanceof import_obsidian5.ItemView) {
        if (!remove)
          this.addHeader(leaf.view);
        if (remove)
          this.removeHeader(leaf.view);
      }
    });
  }
  registerCustomURI() {
    if (!this.settings.openInObsidianWeb)
      return;
    this.registerObsidianProtocolHandler("web-open", async (e) => {
      let url = e.url;
      if (!url)
        return;
      if (decodeURI(url) !== url)
        url = decodeURI(url).toString().replace(/\s/g, "%20");
      WebBrowserView.spawnWebBrowserView(true, { url });
    });
  }
  registerContextMenu() {
    this.registerEvent(this.app.workspace.on("editor-menu", (menu, editor, view) => {
      if (!editor) {
        return;
      }
      if (editor.getSelection().length === 0)
        return;
      const selection = editor.getSelection();
      menu.addItem((item) => {
        const subMenu = item.setTitle(`Search In WebBrowser`).setIcon("search").setSubmenu();
        for (const key in SEARCH_ENGINES) {
          subMenu.addItem((item2) => {
            item2.setIcon("search").setTitle(key).onClick(() => {
              WebBrowserView.spawnWebBrowserView(true, { url: SEARCH_ENGINES[key] + selection });
            });
          });
        }
        if (this.settings.defaultSearchEngine === "custom") {
          subMenu.addItem((item2) => {
            item2.setIcon("search").setTitle("custom").onClick(() => {
              WebBrowserView.spawnWebBrowserView(true, { url: this.settings.customSearchUrl + selection });
            });
          });
        }
      });
    }));
  }
  registerCommands() {
    this.addCommand({
      id: "open-current-url-with-external-browser",
      name: t("Open Current URL In External Browser"),
      checkCallback: (checking) => {
        const webbrowserView = this.app.workspace.getActiveViewOfType(WebBrowserView);
        if (webbrowserView) {
          if (!checking) {
            FunctionHooks.ogWindow$Open.call(window, webbrowserView.getState()?.url, "_blank");
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "clear-current-page-history",
      name: t("Clear Current Page History"),
      checkCallback: (checking) => {
        const webbrowserView = this.app.workspace.getActiveViewOfType(WebBrowserView);
        if (webbrowserView) {
          if (!checking) {
            webbrowserView.clearHistory();
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "refresh-page",
      name: t("Refresh Current Page"),
      checkCallback: (checking) => {
        const webbrowserView = this.app.workspace.getActiveViewOfType(WebBrowserView);
        if (webbrowserView) {
          if (!checking) {
            webbrowserView.refresh();
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "toggle-same-tab-globally",
      name: t("Toggle Same Tab In Web Browser"),
      callback: async () => {
        this.settings.openInSameTab = !this.settings.openInSameTab;
        await this.saveSettings();
      }
    });
    this.addCommand({
      id: "get-current-timestamp",
      name: "Get Current Timestamp from Web Browser",
      editorCallback: (editor, view) => {
        const lastActiveLeaves = this.app.workspace.getLeavesOfType("another-web-browser-view");
        if (lastActiveLeaves.length === 0)
          return;
        const lastActiveLeaf = lastActiveLeaves.sort((a, b) => b.activeTime - a.activeTime)[0];
        const webbrowserView = lastActiveLeaf.view;
        const url = webbrowserView.getState()?.url;
        if (!url?.contains("bilibili"))
          return;
        webbrowserView.getCurrentTimestamp(editor);
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var WebBrowserSettingTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.applyDebounceTimer = 0;
    this.plugin = plugin;
  }
  applySettingsUpdate() {
    clearTimeout(this.applyDebounceTimer);
    const plugin = this.plugin;
    this.applyDebounceTimer = window.setTimeout(() => {
      plugin.saveSettings();
    }, 100);
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Web Browser" });
    this.addSearchEngine();
    this.addHighlightFormat();
    this.addOpenInSameTab();
    this.addOpenInObsidianWeb();
  }
  addSearchEngine() {
    new import_obsidian5.Setting(this.containerEl).setName(t("Default Search Engine")).setDesc("").addDropdown(async (drowdown) => {
      drowdown.addOption("duckduckgo", t("DuckDuckGo")).addOption("google", t("Google")).addOption("bing", t("Bing")).addOption("yahoo", t("Yahoo")).addOption("baidu", t("Baidu")).addOption("custom", t("Custom")).setValue(this.plugin.settings.defaultSearchEngine).onChange(async (value) => {
        this.plugin.settings.defaultSearchEngine = value;
        this.applySettingsUpdate();
        this.display();
      });
    });
    if (!(this.plugin.settings.defaultSearchEngine === "custom")) {
      return;
    }
    new import_obsidian5.Setting(this.containerEl).setName(t("Set Custom Search Engine Url")).setDesc(t("Set custom search engine url for yourself. 'Duckduckgo' By default")).addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.customSearchUrl).setValue(this.plugin.settings.customSearchUrl).onChange(async (value) => {
      this.plugin.settings.customSearchUrl = value;
      this.applySettingsUpdate();
    }));
  }
  addHighlightFormat() {
    new import_obsidian5.Setting(this.containerEl).setName(t("Custom Link to Highlight Format")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.customHighlightFormat).onChange(async (value) => {
        this.plugin.settings.customHighlightFormat = value;
        this.applySettingsUpdate();
        this.display();
      });
    });
    if (!this.plugin.settings.customHighlightFormat) {
      return;
    }
    new import_obsidian5.Setting(this.containerEl).setName(t("Copy Link to Highlight Format")).setDesc(t("Set copy link to text fragment format. [{CONTENT}]({URL}) By default. You can also set {TIME:YYYY-MM-DD HH:mm:ss} to get the current date.")).addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.highlightFormat).setValue(this.plugin.settings.highlightFormat).onChange(async (value) => {
      if (value === "") {
        this.plugin.settings.highlightFormat = DEFAULT_SETTINGS.highlightFormat;
        this.applySettingsUpdate();
        this.display();
      }
      this.plugin.settings.highlightFormat = value;
      this.applySettingsUpdate();
    }));
  }
  addOpenInSameTab() {
    new import_obsidian5.Setting(this.containerEl).setName(t("Open URL In Same Tab")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.openInSameTab).onChange(async (value) => {
        this.plugin.settings.openInSameTab = value;
        this.applySettingsUpdate();
        this.display();
      });
    });
  }
  addOpenInObsidianWeb() {
    new import_obsidian5.Setting(this.containerEl).setName(t("Open URL In Obsidian Web")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.openInObsidianWeb).onChange(async (value) => {
        this.plugin.settings.openInObsidianWeb = value;
        this.applySettingsUpdate();
        this.display();
      });
    });
    if (!this.plugin.settings.openInObsidianWeb) {
      return;
    }
    const bookmarkLetsEl = createEl("a", {
      text: `Obsidian BookmarkLets Code`,
      cls: "cm-url",
      href: "javascript:(function(){var%20i%20%3Ddocument.location.href%3B%20document.location.href%3D%22obsidian%3A%2F%2Fweb-open%3Furl%3D%22%20%2B%20encodeURIComponent%28i%29%3B})();"
    });
    bookmarkLetsEl.addEventListener("click", () => {
      import_electron2.clipboard.writeText(`javascript:(function(){var%20i%20%3Ddocument.location.href%3B%20document.location.href%3D%22obsidian%3A%2F%2Fweb-open%3Furl%3D%22%20%2B%20encodeURIComponent%28i%29%3B})();`);
      new import_obsidian5.Notice(t("Copy BookmarkLets Success"));
    });
    this.containerEl.appendChild(bookmarkLetsEl);
  }
};
