/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var gJ=Object.create;var wQ=Object.defineProperty,PJ=Object.defineProperties,_J=Object.getOwnPropertyDescriptor,qJ=Object.getOwnPropertyDescriptors,AJ=Object.getOwnPropertyNames,HB=Object.getOwnPropertySymbols,$J=Object.getPrototypeOf,FV=Object.prototype.hasOwnProperty,hd=Object.prototype.propertyIsEnumerable;var cd=(F,U,Q)=>U in F?wQ(F,U,{enumerable:!0,configurable:!0,writable:!0,value:Q}):F[U]=Q,z=(F,U)=>{for(var Q in U||(U={}))FV.call(U,Q)&&cd(F,Q,U[Q]);if(HB)for(var Q of HB(U))hd.call(U,Q)&&cd(F,Q,U[Q]);return F},_=(F,U)=>PJ(F,qJ(U)),rd=F=>wQ(F,"__esModule",{value:!0});var Cd=(F,U)=>{var Q={};for(var B in F)FV.call(F,B)&&U.indexOf(B)<0&&(Q[B]=F[B]);if(F!=null&&HB)for(var B of HB(F))U.indexOf(B)<0&&hd.call(F,B)&&(Q[B]=F[B]);return Q};var UW=(F,U)=>()=>(U||F((U={exports:{}}).exports,U),U.exports),FW=(F,U)=>{rd(F);for(var Q in U)wQ(F,Q,{get:U[Q],enumerable:!0})},QW=(F,U,Q)=>{if(U&&typeof U=="object"||typeof U=="function")for(let B of AJ(U))!FV.call(F,B)&&B!=="default"&&wQ(F,B,{get:()=>U[B],enumerable:!(Q=_J(U,B))||Q.enumerable});return F},XU=F=>QW(rd(wQ(F!=null?gJ($J(F)):{},"default",F&&F.__esModule&&"default"in F?{get:()=>F.default,enumerable:!0}:{value:F,enumerable:!0})),F);var bl=UW((SB,V0)=>{(function(F,U){if(typeof SB=="object"&&typeof V0=="object")V0.exports=U();else if(typeof define=="function"&&define.amd)define([],U);else{var Q=U();for(var B in Q)(typeof SB=="object"?SB:F)[B]=Q[B]}})(typeof self!="undefined"?self:SB,function(){return function(F){var U={};function Q(B){if(U[B])return U[B].exports;var R=U[B]={i:B,l:!1,exports:{}};return F[B].call(R.exports,R,R.exports,Q),R.l=!0,R.exports}return Q.m=F,Q.c=U,Q.d=function(B,R,V){Q.o(B,R)||Object.defineProperty(B,R,{enumerable:!0,get:V})},Q.r=function(B){typeof Symbol!="undefined"&&Symbol.toStringTag&&Object.defineProperty(B,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(B,"__esModule",{value:!0})},Q.t=function(B,R){if(1&R&&(B=Q(B)),8&R||4&R&&typeof B=="object"&&B&&B.__esModule)return B;var V=Object.create(null);if(Q.r(V),Object.defineProperty(V,"default",{enumerable:!0,value:B}),2&R&&typeof B!="string")for(var d in B)Q.d(V,d,function(l){return B[l]}.bind(null,d));return V},Q.n=function(B){var R=B&&B.__esModule?function(){return B.default}:function(){return B};return Q.d(R,"a",R),R},Q.o=function(B,R){return Object.prototype.hasOwnProperty.call(B,R)},Q.p="",Q(Q.s=0)}([function(F,U,Q){"use strict";Q.r(U),Q.d(U,"md5",function(){return c});var B="0123456789abcdef".split(""),R=function(h){for(var N="",k=0;k<4;k++)N+=B[h>>8*k+4&15]+B[h>>8*k&15];return N},V=function(h){for(var N=h.length,k=0;k<N;k++)h[k]=R(h[k]);return h.join("")},d=function(h,N){return h+N&4294967295},l=function(h,N,k,t,S,a,T){return function(C,D,p){return d(C<<D|C>>>32-D,p)}(N=function(C,D,p,o){return D=d(d(D,C),d(p,o))}(h,N,t,a),S,k)},n=function(h,N,k,t,S,a,T,C){return l(k&t|~k&S,N,k,a,T,C,h)},J=function(h,N,k,t,S,a,T,C){return l(k&S|t&~S,N,k,a,T,C,h)},W=function(h,N,k,t,S,a,T,C){return l(k^t^S,N,k,a,T,C,h)},E=function(h,N,k,t,S,a,T,C){return l(t^(k|~S),N,k,a,T,C,h)},Z=function(h,N,k){k===void 0&&(k=d);var t=h[0],S=h[1],a=h[2],T=h[3],C=n.bind(null,k);t=C(t,S,a,T,N[0],7,-680876936),T=C(T,t,S,a,N[1],12,-389564586),a=C(a,T,t,S,N[2],17,606105819),S=C(S,a,T,t,N[3],22,-1044525330),t=C(t,S,a,T,N[4],7,-176418897),T=C(T,t,S,a,N[5],12,1200080426),a=C(a,T,t,S,N[6],17,-1473231341),S=C(S,a,T,t,N[7],22,-45705983),t=C(t,S,a,T,N[8],7,1770035416),T=C(T,t,S,a,N[9],12,-1958414417),a=C(a,T,t,S,N[10],17,-42063),S=C(S,a,T,t,N[11],22,-1990404162),t=C(t,S,a,T,N[12],7,1804603682),T=C(T,t,S,a,N[13],12,-40341101),a=C(a,T,t,S,N[14],17,-1502002290),S=C(S,a,T,t,N[15],22,1236535329);var D=J.bind(null,k);t=D(t,S,a,T,N[1],5,-165796510),T=D(T,t,S,a,N[6],9,-1069501632),a=D(a,T,t,S,N[11],14,643717713),S=D(S,a,T,t,N[0],20,-373897302),t=D(t,S,a,T,N[5],5,-701558691),T=D(T,t,S,a,N[10],9,38016083),a=D(a,T,t,S,N[15],14,-660478335),S=D(S,a,T,t,N[4],20,-405537848),t=D(t,S,a,T,N[9],5,568446438),T=D(T,t,S,a,N[14],9,-1019803690),a=D(a,T,t,S,N[3],14,-187363961),S=D(S,a,T,t,N[8],20,1163531501),t=D(t,S,a,T,N[13],5,-1444681467),T=D(T,t,S,a,N[2],9,-51403784),a=D(a,T,t,S,N[7],14,1735328473),S=D(S,a,T,t,N[12],20,-1926607734);var p=W.bind(null,k);t=p(t,S,a,T,N[5],4,-378558),T=p(T,t,S,a,N[8],11,-2022574463),a=p(a,T,t,S,N[11],16,1839030562),S=p(S,a,T,t,N[14],23,-35309556),t=p(t,S,a,T,N[1],4,-1530992060),T=p(T,t,S,a,N[4],11,1272893353),a=p(a,T,t,S,N[7],16,-155497632),S=p(S,a,T,t,N[10],23,-1094730640),t=p(t,S,a,T,N[13],4,681279174),T=p(T,t,S,a,N[0],11,-358537222),a=p(a,T,t,S,N[3],16,-722521979),S=p(S,a,T,t,N[6],23,76029189),t=p(t,S,a,T,N[9],4,-640364487),T=p(T,t,S,a,N[12],11,-421815835),a=p(a,T,t,S,N[15],16,530742520),S=p(S,a,T,t,N[2],23,-995338651);var o=E.bind(null,k);t=o(t,S,a,T,N[0],6,-198630844),T=o(T,t,S,a,N[7],10,1126891415),a=o(a,T,t,S,N[14],15,-1416354905),S=o(S,a,T,t,N[5],21,-57434055),t=o(t,S,a,T,N[12],6,1700485571),T=o(T,t,S,a,N[3],10,-1894986606),a=o(a,T,t,S,N[10],15,-1051523),S=o(S,a,T,t,N[1],21,-2054922799),t=o(t,S,a,T,N[8],6,1873313359),T=o(T,t,S,a,N[15],10,-30611744),a=o(a,T,t,S,N[6],15,-1560198380),S=o(S,a,T,t,N[13],21,1309151649),t=o(t,S,a,T,N[4],6,-145523070),T=o(T,t,S,a,N[11],10,-1120210379),a=o(a,T,t,S,N[2],15,718787259),S=o(S,a,T,t,N[9],21,-343485551),h[0]=k(t,h[0]),h[1]=k(S,h[1]),h[2]=k(a,h[2]),h[3]=k(T,h[3])},e=function(h){for(var N=[],k=0;k<64;k+=4)N[k>>2]=h.charCodeAt(k)+(h.charCodeAt(k+1)<<8)+(h.charCodeAt(k+2)<<16)+(h.charCodeAt(k+3)<<24);return N},r=function(h,N){var k,t=h.length,S=[1732584193,-271733879,-1732584194,271733878];for(k=64;k<=t;k+=64)Z(S,e(h.substring(k-64,k)),N);var a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],T=(h=h.substring(k-64)).length;for(k=0;k<T;k++)a[k>>2]|=h.charCodeAt(k)<<(k%4<<3);if(a[k>>2]|=128<<(k%4<<3),k>55)for(Z(S,a,N),k=16;k--;)a[k]=0;return a[14]=8*t,Z(S,a,N),S};function c(h){var N;return V(r("hello"))!=="5d41402abc4b2a76b9719d911017c592"&&(N=function(k,t){var S=(65535&k)+(65535&t);return(k>>16)+(t>>16)+(S>>16)<<16|65535&S}),V(r(h,N))}}])})});FW(exports,{default:()=>Td});var DF=XU(require("obsidian"));var KJ=XU(require("obsidian"));function tU(){}function BW(F,U){for(let Q in U)F[Q]=U[Q];return F}function QV(F){return F()}function Dd(){return Object.create(null)}function gU(F){F.forEach(QV)}function NQ(F){return typeof F=="function"}function rU(F,U){return F!=F?U==U:F!==U||F&&typeof F=="object"||typeof F=="function"}var zB;function BV(F,U){return zB||(zB=document.createElement("a")),zB.href=U,F===zB.href}function pd(F){return Object.keys(F).length===0}function md(F,...U){if(F==null)return tU;let Q=F.subscribe(...U);return Q.unsubscribe?()=>Q.unsubscribe():Q}function uB(F,U,Q){F.$$.on_destroy.push(md(U,Q))}function EQ(F,U,Q,B){if(F){let R=Md(F,U,Q,B);return F[0](R)}}function Md(F,U,Q,B){return F[1]&&B?BW(Q.ctx.slice(),F[1](B(U))):Q.ctx}function tQ(F,U,Q,B){if(F[2]&&B){let R=F[2](B(Q));if(U.dirty===void 0)return R;if(typeof R=="object"){let V=[],d=Math.max(U.dirty.length,R.length);for(let l=0;l<d;l+=1)V[l]=U.dirty[l]|R[l];return V}return U.dirty|R}return U.dirty}function SQ(F,U,Q,B,R,V){if(R){let d=Md(U,Q,B,V);F.p(d,R)}}function eQ(F){if(F.ctx.length>32){let U=[],Q=F.ctx.length/32;for(let B=0;B<Q;B++)U[B]=-1;return U}return-1}function od(F){return F&&NQ(F.destroy)?F.destroy:tU}var id=!1;function RW(){id=!0}function VW(){id=!1}function H(F,U){F.appendChild(U)}function UU(F,U,Q){F.insertBefore(U,Q||null)}function A(F){F.parentNode&&F.parentNode.removeChild(F)}function xB(F,U){for(let Q=0;Q<F.length;Q+=1)F[Q]&&F[Q].d(U)}function j(F){return document.createElement(F)}function PU(F){return document.createTextNode(F)}function FU(){return PU(" ")}function LQ(){return PU("")}function xU(F,U,Q,B){return F.addEventListener(U,Q,B),()=>F.removeEventListener(U,Q,B)}function P(F,U,Q){Q==null?F.removeAttribute(U):F.getAttribute(U)!==Q&&F.setAttribute(U,Q)}function dW(F){return Array.from(F.childNodes)}function jQ(F,U){U=""+U,F.wholeText!==U&&(F.data=U)}function RV(F,U){F.value=U??""}function UF(F,U,Q,B){Q===null?F.style.removeProperty(U):F.style.setProperty(U,Q,B?"important":"")}function VV(F,U,Q){F.classList[Q?"add":"remove"](U)}function lW(F,U,{bubbles:Q=!1,cancelable:B=!1}={}){let R=document.createEvent("CustomEvent");return R.initCustomEvent(F,Q,B,U),R}var IQ;function fQ(F){IQ=F}function dV(){if(!IQ)throw new Error("Function called outside component initialization");return IQ}function KQ(F){dV().$$.on_mount.push(F)}function gQ(F){dV().$$.on_destroy.push(F)}function lV(){let F=dV();return(U,Q,{cancelable:B=!1}={})=>{let R=F.$$.callbacks[U];if(R){let V=lW(U,Q,{cancelable:B});return R.slice().forEach(d=>{d.call(F,V)}),!V.defaultPrevented}return!0}}function FF(F,U){let Q=F.$$.callbacks[U.type];Q&&Q.slice().forEach(B=>B.call(this,U))}var PQ=[];var wB=[],LB=[],sd=[],Yd=Promise.resolve(),nV=!1;function yd(){nV||(nV=!0,Yd.then(vd))}function lF(){return yd(),Yd}function JV(F){LB.push(F)}var WV=new Set,jB=0;function vd(){let F=IQ;do{for(;jB<PQ.length;){let U=PQ[jB];jB++,fQ(U),nW(U.$$)}for(fQ(null),PQ.length=0,jB=0;wB.length;)wB.pop()();for(let U=0;U<LB.length;U+=1){let Q=LB[U];WV.has(Q)||(WV.add(Q),Q())}LB.length=0}while(PQ.length);for(;sd.length;)sd.pop()();nV=!1,WV.clear(),fQ(F)}function nW(F){if(F.fragment!==null){F.update(),gU(F.before_update);let U=F.dirty;F.dirty=[-1],F.fragment&&F.fragment.p(F.ctx,U),F.after_update.forEach(JV)}}var IB=new Set,wF;function LF(){wF={r:0,c:[],p:wF}}function jF(){wF.r||gU(wF.c),wF=wF.p}function BU(F,U){F&&F.i&&(IB.delete(F),F.i(U))}function RU(F,U,Q,B){if(F&&F.o){if(IB.has(F))return;IB.add(F),wF.c.push(()=>{IB.delete(F),B&&(Q&&F.d(1),B())}),F.o(U)}else B&&B()}var _E=typeof window!="undefined"?window:typeof globalThis!="undefined"?globalThis:global;function OU(F){F&&F.c()}function YU(F,U,Q,B){let{fragment:R,after_update:V}=F.$$;R&&R.m(U,Q),B||JV(()=>{let d=F.$$.on_mount.map(QV).filter(NQ);F.$$.on_destroy?F.$$.on_destroy.push(...d):gU(d),F.$$.on_mount=[]}),V.forEach(JV)}function pU(F,U){let Q=F.$$;Q.fragment!==null&&(gU(Q.on_destroy),Q.fragment&&Q.fragment.d(U),Q.on_destroy=Q.fragment=null,Q.ctx=[])}function JW(F,U){F.$$.dirty[0]===-1&&(PQ.push(F),yd(),F.$$.dirty.fill(0)),F.$$.dirty[U/31|0]|=1<<U%31}function mU(F,U,Q,B,R,V,d,l=[-1]){let n=IQ;fQ(F);let J=F.$$={fragment:null,ctx:[],props:V,update:tU,not_equal:R,bound:Dd(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(U.context||(n?n.$$.context:[])),callbacks:Dd(),dirty:l,skip_bound:!1,root:U.target||n.$$.root};d&&d(J.root);let W=!1;if(J.ctx=Q?Q(F,U.props||{},(E,Z,...e)=>{let r=e.length?e[0]:Z;return J.ctx&&R(J.ctx[E],J.ctx[E]=r)&&(!J.skip_bound&&J.bound[E]&&J.bound[E](r),W&&JW(F,E)),Z}):[],J.update(),W=!0,gU(J.before_update),J.fragment=B?B(J.ctx):!1,U.target){if(U.hydrate){RW();let E=dW(U.target);J.fragment&&J.fragment.l(E),E.forEach(A)}else J.fragment&&J.fragment.c();U.intro&&BU(F.$$.fragment),YU(F,U.target,U.anchor,U.customElement),VW(),vd()}fQ(n)}var WW;typeof HTMLElement=="function"&&(WW=class extends HTMLElement{constructor(){super();this.attachShadow({mode:"open"})}connectedCallback(){let{on_mount:F}=this.$$;this.$$.on_disconnect=F.map(QV).filter(NQ);for(let U in this.$$.slotted)this.appendChild(this.$$.slotted[U])}attributeChangedCallback(F,U,Q){this[F]=Q}disconnectedCallback(){gU(this.$$.on_disconnect)}$destroy(){pU(this,1),this.$destroy=tU}$on(F,U){if(!NQ(U))return tU;let Q=this.$$.callbacks[F]||(this.$$.callbacks[F]=[]);return Q.push(U),()=>{let B=Q.indexOf(U);B!==-1&&Q.splice(B,1)}}$set(F){this.$$set&&!pd(F)&&(this.$$.skip_bound=!0,this.$$set(F),this.$$.skip_bound=!1)}});var CU=class{$destroy(){pU(this,1),this.$destroy=tU}$on(U,Q){if(!NQ(Q))return tU;let B=this.$$.callbacks[U]||(this.$$.callbacks[U]=[]);return B.push(Q),()=>{let R=B.indexOf(Q);R!==-1&&B.splice(R,1)}}$set(U){this.$$set&&!pd(U)&&(this.$$.skip_bound=!0,this.$$set(U),this.$$.skip_bound=!1)}};var uF=XU(require("obsidian"));var JJ=XU(require("obsidian"));var ZV=class{constructor(){this.handlers=new Map;this.disabled=[]}on(U,Q,B){if(U.includes("@")||Q.includes("@"))throw new Error("Invalid context/event name - Cannot contain @");this.handlers.set(`${U}@${Q}`,B)}off(U,Q){if(Q)this.handlers.delete(`${U}@${Q}`);else for(let[B]of this.handlers.entries())B.startsWith(`${U}@`)&&this.handlers.delete(B)}disable(U){this.enable(U),this.disabled.push(U)}enable(U){this.disabled=this.disabled.filter(Q=>Q!==U)}emit(U,...Q){let B=[...this.handlers.entries()].filter(([R,V])=>!this.disabled.includes(R.split("@")[0]));for(let[R,V]of B)R.endsWith(`@${U}`)&&V(...Q)}};var kQ=[];function fB(F,U=tU){let Q,B=new Set;function R(l){if(rU(F,l)&&(F=l,Q)){let n=!kQ.length;for(let J of B)J[1](),kQ.push(J,F);if(n){for(let J=0;J<kQ.length;J+=2)kQ[J][0](kQ[J+1]);kQ.length=0}}}function V(l){R(l(F))}function d(l,n=tU){let J=[l,n];return B.add(J),B.size===1&&(Q=U(R)||tU),l(F),()=>{B.delete(J),B.size===0&&(Q(),Q=null)}}return{set:R,update:V,subscribe:d}}var QU=XU(require("obsidian"));var nU=typeof globalThis!="undefined"?globalThis:typeof self!="undefined"?self:typeof window!="undefined"?window:global,SU=Object.keys,MU=Array.isArray;typeof Promise!="undefined"&&!nU.Promise&&(nU.Promise=Promise);function yU(F,U){return typeof U!="object"||SU(U).forEach(function(Q){F[Q]=U[Q]}),F}var _Q=Object.getPrototypeOf,ZW={}.hasOwnProperty;function wU(F,U){return ZW.call(F,U)}function aQ(F,U){typeof U=="function"&&(U=U(_Q(F))),(typeof Reflect=="undefined"?SU:Reflect.ownKeys)(U).forEach(Q=>{nF(F,Q,U[Q])})}var Gd=Object.defineProperty;function nF(F,U,Q,B){Gd(F,U,yU(Q&&wU(Q,"get")&&typeof Q.get=="function"?{get:Q.get,set:Q.set,configurable:!0}:{value:Q,configurable:!0,writable:!0},B))}function TQ(F){return{from:function(U){return F.prototype=Object.create(U.prototype),nF(F.prototype,"constructor",F),{extend:aQ.bind(null,F.prototype)}}}}var NW=Object.getOwnPropertyDescriptor;function NV(F,U){let Q=NW(F,U),B;return Q||(B=_Q(F))&&NV(B,U)}var EW=[].slice;function KB(F,U,Q){return EW.call(F,U,Q)}function bd(F,U){return U(F)}function qQ(F){if(!F)throw new Error("Assertion Failed")}function Xd(F){nU.setImmediate?setImmediate(F):setTimeout(F,0)}function Od(F,U){return F.reduce((Q,B,R)=>{var V=U(B,R);return V&&(Q[V[0]]=V[1]),Q},{})}function tW(F,U,Q){try{F.apply(null,Q)}catch(B){U&&U(B)}}function JF(F,U){if(wU(F,U))return F[U];if(!U)return F;if(typeof U!="string"){for(var Q=[],B=0,R=U.length;B<R;++B){var V=JF(F,U[B]);Q.push(V)}return Q}var d=U.indexOf(".");if(d!==-1){var l=F[U.substr(0,d)];return l===void 0?void 0:JF(l,U.substr(d+1))}}function _U(F,U,Q){if(!(!F||U===void 0)&&!("isFrozen"in Object&&Object.isFrozen(F)))if(typeof U!="string"&&"length"in U){qQ(typeof Q!="string"&&"length"in Q);for(var B=0,R=U.length;B<R;++B)_U(F,U[B],Q[B])}else{var V=U.indexOf(".");if(V!==-1){var d=U.substr(0,V),l=U.substr(V+1);if(l==="")Q===void 0?MU(F)&&!isNaN(parseInt(d))?F.splice(d,1):delete F[d]:F[d]=Q;else{var n=F[d];(!n||!wU(F,d))&&(n=F[d]={}),_U(n,l,Q)}}else Q===void 0?MU(F)&&!isNaN(parseInt(U))?F.splice(U,1):delete F[U]:F[U]=Q}}function SW(F,U){typeof U=="string"?_U(F,U,void 0):"length"in U&&[].map.call(U,function(Q){_U(F,Q,void 0)})}function Hd(F){var U={};for(var Q in F)wU(F,Q)&&(U[Q]=F[Q]);return U}var eW=[].concat;function zd(F){return eW.apply([],F)}var ud="Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey".split(",").concat(zd([8,16,32,64].map(F=>["Int","Uint","Float"].map(U=>U+F+"Array")))).filter(F=>nU[F]),kW=ud.map(F=>nU[F]);Od(ud,F=>[F,!0]);var pF=null;function AQ(F){pF=typeof WeakMap!="undefined"&&new WeakMap;let U=EV(F);return pF=null,U}function EV(F){if(!F||typeof F!="object")return F;let U=pF&&pF.get(F);if(U)return U;if(MU(F)){U=[],pF&&pF.set(F,U);for(var Q=0,B=F.length;Q<B;++Q)U.push(EV(F[Q]))}else if(kW.indexOf(F.constructor)>=0)U=F;else{let V=_Q(F);U=V===Object.prototype?{}:Object.create(V),pF&&pF.set(F,U);for(var R in F)wU(F,R)&&(U[R]=EV(F[R]))}return U}var{toString:aW}={};function tV(F){return aW.call(F).slice(8,-1)}var SV=typeof Symbol!="undefined"?Symbol.iterator:"@@iterator",TW=typeof SV=="symbol"?function(F){var U;return F!=null&&(U=F[SV])&&U.apply(F)}:function(){return null},hQ={};function WF(F){var U,Q,B,R;if(arguments.length===1){if(MU(F))return F.slice();if(this===hQ&&typeof F=="string")return[F];if(R=TW(F)){for(Q=[];B=R.next(),!B.done;)Q.push(B.value);return Q}if(F==null)return[F];if(U=F.length,typeof U=="number"){for(Q=new Array(U);U--;)Q[U]=F[U];return Q}return[F]}for(U=arguments.length,Q=new Array(U);U--;)Q[U]=arguments[U];return Q}var eV=typeof Symbol!="undefined"?F=>F[Symbol.toStringTag]==="AsyncFunction":()=>!1,QF=typeof location!="undefined"&&/^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);function xd(F,U){QF=F,wd=U}var wd=()=>!0,hW=!new Error("").stack;function IF(){if(hW)try{throw IF.arguments,new Error}catch(F){return F}return new Error}function kV(F,U){var Q=F.stack;return Q?(U=U||0,Q.indexOf(F.name)===0&&(U+=(F.name+F.message).split(`
`).length),Q.split(`
`).slice(U).filter(wd).map(B=>`
`+B).join("")):""}var cW=["Modify","Bulk","OpenFailed","VersionChange","Schema","Upgrade","InvalidTable","MissingAPI","NoSuchDatabase","InvalidArgument","SubTransaction","Unsupported","Internal","DatabaseClosed","PrematureCommit","ForeignAwait"],Ld=["Unknown","Constraint","Data","TransactionInactive","ReadOnly","Version","NotFound","InvalidState","InvalidAccess","Abort","Timeout","QuotaExceeded","Syntax","DataClone"],aV=cW.concat(Ld),rW={VersionChanged:"Database version changed by other database connection",DatabaseClosed:"Database has been closed",Abort:"Transaction aborted",TransactionInactive:"Transaction has already completed or failed",MissingAPI:"IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb"};function cQ(F,U){this._e=IF(),this.name=F,this.message=U}TQ(cQ).from(Error).extend({stack:{get:function(){return this._stack||(this._stack=this.name+": "+this.message+kV(this._e,2))}},toString:function(){return this.name+": "+this.message}});function jd(F,U){return F+". Errors: "+Object.keys(U).map(Q=>U[Q].toString()).filter((Q,B,R)=>R.indexOf(Q)===B).join(`
`)}function gB(F,U,Q,B){this._e=IF(),this.failures=U,this.failedKeys=B,this.successCount=Q,this.message=jd(F,U)}TQ(gB).from(cQ);function $Q(F,U){this._e=IF(),this.name="BulkError",this.failures=Object.keys(U).map(Q=>U[Q]),this.failuresByPos=U,this.message=jd(F,U)}TQ($Q).from(cQ);var TV=aV.reduce((F,U)=>(F[U]=U+"Error",F),{}),CW=cQ,f=aV.reduce((F,U)=>{var Q=U+"Error";function B(R,V){this._e=IF(),this.name=Q,R?typeof R=="string"?(this.message=`${R}${V?`
 `+V:""}`,this.inner=V||null):typeof R=="object"&&(this.message=`${R.name} ${R.message}`,this.inner=R):(this.message=rW[U]||Q,this.inner=null)}return TQ(B).from(CW),F[U]=B,F},{});f.Syntax=SyntaxError;f.Type=TypeError;f.Range=RangeError;var Id=Ld.reduce((F,U)=>(F[U+"Error"]=f[U],F),{});function DW(F,U){if(!F||F instanceof cQ||F instanceof TypeError||F instanceof SyntaxError||!F.name||!Id[F.name])return F;var Q=new Id[F.name](U||F.message,F);return"stack"in F&&nF(Q,"stack",{get:function(){return this.inner.stack}}),Q}var PB=aV.reduce((F,U)=>(["Syntax","Type","Range"].indexOf(U)===-1&&(F[U+"Error"]=f[U]),F),{});PB.ModifyError=gB;PB.DexieError=cQ;PB.BulkError=$Q;function VU(){}function UB(F){return F}function pW(F,U){return F==null||F===UB?U:function(Q){return U(F(Q))}}function fF(F,U){return function(){F.apply(this,arguments),U.apply(this,arguments)}}function mW(F,U){return F===VU?U:function(){var Q=F.apply(this,arguments);Q!==void 0&&(arguments[0]=Q);var B=this.onsuccess,R=this.onerror;this.onsuccess=null,this.onerror=null;var V=U.apply(this,arguments);return B&&(this.onsuccess=this.onsuccess?fF(B,this.onsuccess):B),R&&(this.onerror=this.onerror?fF(R,this.onerror):R),V!==void 0?V:Q}}function MW(F,U){return F===VU?U:function(){F.apply(this,arguments);var Q=this.onsuccess,B=this.onerror;this.onsuccess=this.onerror=null,U.apply(this,arguments),Q&&(this.onsuccess=this.onsuccess?fF(Q,this.onsuccess):Q),B&&(this.onerror=this.onerror?fF(B,this.onerror):B)}}function oW(F,U){return F===VU?U:function(Q){var B=F.apply(this,arguments);yU(Q,B);var R=this.onsuccess,V=this.onerror;this.onsuccess=null,this.onerror=null;var d=U.apply(this,arguments);return R&&(this.onsuccess=this.onsuccess?fF(R,this.onsuccess):R),V&&(this.onerror=this.onerror?fF(V,this.onerror):V),B===void 0?d===void 0?void 0:d:yU(B,d)}}function iW(F,U){return F===VU?U:function(){return U.apply(this,arguments)===!1?!1:F.apply(this,arguments)}}function hV(F,U){return F===VU?U:function(){var Q=F.apply(this,arguments);if(Q&&typeof Q.then=="function"){for(var B=this,R=arguments.length,V=new Array(R);R--;)V[R]=arguments[R];return Q.then(function(){return U.apply(B,V)})}return U.apply(this,arguments)}}var FB={},sW=100,YW=20,fd=100,[cV,_B,rV]=typeof Promise=="undefined"?[]:(()=>{let F=Promise.resolve();if(typeof crypto=="undefined"||!crypto.subtle)return[F,_Q(F),F];let U=crypto.subtle.digest("SHA-512",new Uint8Array([0]));return[U,_Q(U),F]})(),Kd=_B&&_B.then,qB=cV&&cV.constructor,CV=!!rV,DV=!1,yW=rV?()=>{rV.then(FR)}:nU.setImmediate?setImmediate.bind(null,FR):nU.MutationObserver?()=>{var F=document.createElement("div");new MutationObserver(()=>{FR(),F=null}).observe(F,{attributes:!0}),F.setAttribute("i","1")}:()=>{setTimeout(FR,0)},QB=function(F,U){BB.push([F,U]),AB&&(yW(),AB=!1)},pV=!0,AB=!0,KF=[],$B=[],mV=null,MV=UB,rQ={id:"global",global:!0,ref:0,unhandleds:[],onunhandled:Bl,pgp:!1,env:{},finalize:function(){this.unhandleds.forEach(F=>{try{Bl(F[0],F[1])}catch{}})}},u=rQ,BB=[],gF=0,UR=[];function G(F){if(typeof this!="object")throw new TypeError("Promises must be constructed via new");this._listeners=[],this.onuncatched=VU,this._lib=!1;var U=this._PSD=u;if(QF&&(this._stackHolder=IF(),this._prev=null,this._numPrev=0),typeof F!="function"){if(F!==FB)throw new TypeError("Not a function");this._state=arguments[1],this._value=arguments[2],this._state===!1&&iV(this,this._value);return}this._state=null,this._value=null,++U.ref,Pd(this,F)}var oV={get:function(){var F=u,U=RR;function Q(B,R){var V=!F.global&&(F!==u||U!==RR);let d=V&&!ZF();var l=new G((n,J)=>{sV(this,new gd(dR(B,F,V,d),dR(R,F,V,d),n,J,F))});return QF&&Ad(l,this),l}return Q.prototype=FB,Q},set:function(F){nF(this,"then",F&&F.prototype===FB?oV:{get:function(){return F},set:oV.set})}};aQ(G.prototype,{then:oV,_then:function(F,U){sV(this,new gd(null,null,F,U,u))},catch:function(F){if(arguments.length===1)return this.then(null,F);var U=arguments[0],Q=arguments[1];return typeof U=="function"?this.then(null,B=>B instanceof U?Q(B):QR(B)):this.then(null,B=>B&&B.name===U?Q(B):QR(B))},finally:function(F){return this.then(U=>(F(),U),U=>(F(),QR(U)))},stack:{get:function(){if(this._stack)return this._stack;try{DV=!0;var F=qd(this,[],YW),U=F.join(`
From previous: `);return this._state!==null&&(this._stack=U),U}finally{DV=!1}}},timeout:function(F,U){return F<1/0?new G((Q,B)=>{var R=setTimeout(()=>B(new f.Timeout(U)),F);this.then(Q,B).finally(clearTimeout.bind(null,R))}):this}});typeof Symbol!="undefined"&&Symbol.toStringTag&&nF(G.prototype,Symbol.toStringTag,"Dexie.Promise");rQ.env=$d();function gd(F,U,Q,B,R){this.onFulfilled=typeof F=="function"?F:null,this.onRejected=typeof U=="function"?U:null,this.resolve=Q,this.reject=B,this.psd=R}aQ(G,{all:function(){var F=WF.apply(null,arguments).map(VR);return new G(function(U,Q){F.length===0&&U([]);var B=F.length;F.forEach((R,V)=>G.resolve(R).then(d=>{F[V]=d,--B||U(F)},Q))})},resolve:F=>{if(F instanceof G)return F;if(F&&typeof F.then=="function")return new G((Q,B)=>{F.then(Q,B)});var U=new G(FB,!0,F);return Ad(U,mV),U},reject:QR,race:function(){var F=WF.apply(null,arguments).map(VR);return new G((U,Q)=>{F.map(B=>G.resolve(B).then(U,Q))})},PSD:{get:()=>u,set:F=>u=F},totalEchoes:{get:()=>RR},newPSD:mF,usePSD:DQ,scheduler:{get:()=>QB,set:F=>{QB=F}},rejectionMapper:{get:()=>MV,set:F=>{MV=F}},follow:(F,U)=>new G((Q,B)=>mF((R,V)=>{var d=u;d.unhandleds=[],d.onunhandled=V,d.finalize=fF(function(){GW(()=>{this.unhandleds.length===0?R():V(this.unhandleds[0])})},d.finalize),F()},U,Q,B))});qB&&(qB.allSettled&&nF(G,"allSettled",function(){let F=WF.apply(null,arguments).map(VR);return new G(U=>{F.length===0&&U([]);let Q=F.length,B=new Array(Q);F.forEach((R,V)=>G.resolve(R).then(d=>B[V]={status:"fulfilled",value:d},d=>B[V]={status:"rejected",reason:d}).then(()=>--Q||U(B)))})}),qB.any&&typeof AggregateError!="undefined"&&nF(G,"any",function(){let F=WF.apply(null,arguments).map(VR);return new G((U,Q)=>{F.length===0&&Q(new AggregateError([]));let B=F.length,R=new Array(B);F.forEach((V,d)=>G.resolve(V).then(l=>U(l),l=>{R[d]=l,--B||Q(new AggregateError(R))}))})}));function Pd(F,U){try{U(Q=>{if(F._state===null){if(Q===F)throw new TypeError("A promise cannot be resolved with itself.");var B=F._lib&&RB();Q&&typeof Q.then=="function"?Pd(F,(R,V)=>{Q instanceof G?Q._then(R,V):Q.then(R,V)}):(F._state=!0,F._value=Q,_d(F)),B&&VB()}},iV.bind(null,F))}catch(Q){iV(F,Q)}}function iV(F,U){if($B.push(U),F._state===null){var Q=F._lib&&RB();U=MV(U),F._state=!1,F._value=U,QF&&U!==null&&typeof U=="object"&&!U._promise&&tW(()=>{var B=NV(U,"stack");U._promise=F,nF(U,"stack",{get:()=>DV?B&&(B.get?B.get.apply(U):B.value):F.stack})}),bW(F),_d(F),Q&&VB()}}function _d(F){var U=F._listeners;F._listeners=[];for(var Q=0,B=U.length;Q<B;++Q)sV(F,U[Q]);var R=F._PSD;--R.ref||R.finalize(),gF===0&&(++gF,QB(()=>{--gF==0&&YV()},[]))}function sV(F,U){if(F._state===null){F._listeners.push(U);return}var Q=F._state?U.onFulfilled:U.onRejected;if(Q===null)return(F._state?U.resolve:U.reject)(F._value);++U.psd.ref,++gF,QB(vW,[Q,F,U])}function vW(F,U,Q){try{mV=U;var B,R=U._value;U._state?B=F(R):($B.length&&($B=[]),B=F(R),$B.indexOf(R)===-1&&XW(U)),Q.resolve(B)}catch(V){Q.reject(V)}finally{mV=null,--gF==0&&YV(),--Q.psd.ref||Q.psd.finalize()}}function qd(F,U,Q){if(U.length===Q)return U;var B="";if(F._state===!1){var R=F._value,V,d;R!=null?(V=R.name||"Error",d=R.message||R,B=kV(R,0)):(V=R,d=""),U.push(V+(d?": "+d:"")+B)}return QF&&(B=kV(F._stackHolder,2),B&&U.indexOf(B)===-1&&U.push(B),F._prev&&qd(F._prev,U,Q)),U}function Ad(F,U){var Q=U?U._numPrev+1:0;Q<sW&&(F._prev=U,F._numPrev=Q)}function FR(){RB()&&VB()}function RB(){var F=pV;return pV=!1,AB=!1,F}function VB(){var F,U,Q;do for(;BB.length>0;)for(F=BB,BB=[],Q=F.length,U=0;U<Q;++U){var B=F[U];B[0].apply(null,B[1])}while(BB.length>0);pV=!0,AB=!0}function YV(){var F=KF;KF=[],F.forEach(B=>{B._PSD.onunhandled.call(null,B._value,B)});for(var U=UR.slice(0),Q=U.length;Q;)U[--Q]()}function GW(F){function U(){F(),UR.splice(UR.indexOf(U),1)}UR.push(U),++gF,QB(()=>{--gF==0&&YV()},[])}function bW(F){KF.some(U=>U._value===F._value)||KF.push(F)}function XW(F){for(var U=KF.length;U;)if(KF[--U]._value===F._value){KF.splice(U,1);return}}function QR(F){return new G(FB,!1,F)}function WU(F,U){var Q=u;return function(){var B=RB(),R=u;try{return MF(Q,!0),F.apply(this,arguments)}catch(V){U&&U(V)}finally{MF(R,!1),B&&VB()}}}var oU={awaits:0,echoes:0,id:0},OW=0,BR=[],yV=0,RR=0,HW=0;function mF(F,U,Q,B){var R=u,V=Object.create(R);V.parent=R,V.ref=0,V.global=!1,V.id=++HW;var d=rQ.env;V.env=CV?{Promise:G,PromiseProp:{value:G,configurable:!0,writable:!0},all:G.all,race:G.race,allSettled:G.allSettled,any:G.any,resolve:G.resolve,reject:G.reject,nthen:Fl(d.nthen,V),gthen:Fl(d.gthen,V)}:{},U&&yU(V,U),++R.ref,V.finalize=function(){--this.parent.ref||this.parent.finalize()};var l=DQ(V,F,Q,B);return V.ref===0&&V.finalize(),l}function CQ(){return oU.id||(oU.id=++OW),++oU.awaits,oU.echoes+=fd,oU.id}function ZF(){return oU.awaits?(--oU.awaits==0&&(oU.id=0),oU.echoes=oU.awaits*fd,!0):!1}(""+Kd).indexOf("[native code]")===-1&&(CQ=ZF=VU);function VR(F){return oU.echoes&&F&&F.constructor===qB?(CQ(),F.then(U=>(ZF(),U),U=>(ZF(),aU(U)))):F}function zW(F){++RR,(!oU.echoes||--oU.echoes==0)&&(oU.echoes=oU.id=0),BR.push(u),MF(F,!0)}function uW(){var F=BR[BR.length-1];BR.pop(),MF(F,!1)}function MF(F,U){var Q=u;if((U?oU.echoes&&(!yV++||F!==u):yV&&(!--yV||F!==u))&&Ul(U?zW.bind(null,F):uW),F!==u&&(u=F,Q===rQ&&(rQ.env=$d()),CV)){var B=rQ.env.Promise,R=F.env;_B.then=R.nthen,B.prototype.then=R.gthen,(Q.global||F.global)&&(Object.defineProperty(nU,"Promise",R.PromiseProp),B.all=R.all,B.race=R.race,B.resolve=R.resolve,B.reject=R.reject,R.allSettled&&(B.allSettled=R.allSettled),R.any&&(B.any=R.any))}}function $d(){var F=nU.Promise;return CV?{Promise:F,PromiseProp:Object.getOwnPropertyDescriptor(nU,"Promise"),all:F.all,race:F.race,allSettled:F.allSettled,any:F.any,resolve:F.resolve,reject:F.reject,nthen:_B.then,gthen:F.prototype.then}:{}}function DQ(F,U,Q,B,R){var V=u;try{return MF(F,!0),U(Q,B,R)}finally{MF(V,!1)}}function Ul(F){Kd.call(cV,F)}function dR(F,U,Q,B){return typeof F!="function"?F:function(){var R=u;Q&&CQ(),MF(U,!0);try{return F.apply(this,arguments)}finally{MF(R,!1),B&&Ul(ZF)}}}function Fl(F,U){return function(Q,B){return F.call(this,dR(Q,U),dR(B,U))}}var Ql="unhandledrejection";function Bl(F,U){var Q;try{Q=U.onuncatched(F)}catch{}if(Q!==!1)try{var B,R={promise:U,reason:F};if(nU.document&&document.createEvent?(B=document.createEvent("Event"),B.initEvent(Ql,!0,!0),yU(B,R)):nU.CustomEvent&&(B=new CustomEvent(Ql,{detail:R}),yU(B,R)),B&&nU.dispatchEvent&&(dispatchEvent(B),!nU.PromiseRejectionEvent&&nU.onunhandledrejection))try{nU.onunhandledrejection(B)}catch{}QF&&B&&!B.defaultPrevented&&console.warn(`Unhandled rejection: ${F.stack||F}`)}catch{}}var aU=G.reject;function vV(F,U,Q,B){if(!F.idbdb||!F._state.openComplete&&!u.letThrough&&!F._vip){if(F._state.openComplete)return aU(new f.DatabaseClosed(F._state.dbOpenError));if(!F._state.isBeingOpened){if(!F._options.autoOpen)return aU(new f.DatabaseClosed);F.open().catch(VU)}return F._state.dbReadyPromise.then(()=>vV(F,U,Q,B))}else{var R=F._createTransaction(U,Q,F._dbSchema);try{R.create(),F._state.PR1398_maxLoop=3}catch(V){return V.name===TV.InvalidState&&F.isOpen()&&--F._state.PR1398_maxLoop>0?(console.warn("Dexie: Need to reopen db"),F._close(),F.open().then(()=>vV(F,U,Q,B))):aU(V)}return R._promise(U,(V,d)=>mF(()=>(u.trans=R,B(V,d,R)))).then(V=>R._completion.then(()=>V))}}var Rl="3.2.2",PF=String.fromCharCode(65535),GV=-1/0,NF="Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.",Vl="String expected.",dB=[],lR=typeof navigator!="undefined"&&/(MSIE|Trident|Edge)/.test(navigator.userAgent),xW=lR,wW=lR,dl=F=>!/(dexie\.js|dexie\.min\.js)/.test(F),nR="__dbnames",bV="readonly",XV="readwrite";function _F(F,U){return F?U?function(){return F.apply(this,arguments)&&U.apply(this,arguments)}:F:U}var ll={type:3,lower:-1/0,lowerOpen:!1,upper:[[]],upperOpen:!1};function JR(F){return typeof F=="string"&&!/\./.test(F)?U=>(U[F]===void 0&&F in U&&(U=AQ(U),delete U[F]),U):U=>U}var nl=class{_trans(U,Q,B){let R=this._tx||u.trans,V=this.name;function d(n,J,W){if(!W.schema[V])throw new f.NotFound("Table "+V+" not part of transaction");return Q(W.idbtrans,W)}let l=RB();try{return R&&R.db===this.db?R===u.trans?R._promise(U,d,B):mF(()=>R._promise(U,d,B),{trans:R,transless:u.transless||u}):vV(this.db,U,[this.name],d)}finally{l&&VB()}}get(U,Q){return U&&U.constructor===Object?this.where(U).first(Q):this._trans("readonly",B=>this.core.get({trans:B,key:U}).then(R=>this.hook.reading.fire(R))).then(Q)}where(U){if(typeof U=="string")return new this.db.WhereClause(this,U);if(MU(U))return new this.db.WhereClause(this,`[${U.join("+")}]`);let Q=SU(U);if(Q.length===1)return this.where(Q[0]).equals(U[Q[0]]);let B=this.schema.indexes.concat(this.schema.primKey).filter(J=>J.compound&&Q.every(W=>J.keyPath.indexOf(W)>=0)&&J.keyPath.every(W=>Q.indexOf(W)>=0))[0];if(B&&this.db._maxKey!==PF)return this.where(B.name).equals(B.keyPath.map(J=>U[J]));!B&&QF&&console.warn(`The query ${JSON.stringify(U)} on ${this.name} would benefit of a compound index [${Q.join("+")}]`);let{idxByName:R}=this.schema,V=this.db._deps.indexedDB;function d(J,W){try{return V.cmp(J,W)===0}catch{return!1}}let[l,n]=Q.reduce(([J,W],E)=>{let Z=R[E],e=U[E];return[J||Z,J||!Z?_F(W,Z&&Z.multi?r=>{let c=JF(r,E);return MU(c)&&c.some(h=>d(e,h))}:r=>d(e,JF(r,E))):W]},[null,null]);return l?this.where(l.name).equals(U[l.keyPath]).filter(n):B?this.filter(n):this.where(Q).equals("")}filter(U){return this.toCollection().and(U)}count(U){return this.toCollection().count(U)}offset(U){return this.toCollection().offset(U)}limit(U){return this.toCollection().limit(U)}each(U){return this.toCollection().each(U)}toArray(U){return this.toCollection().toArray(U)}toCollection(){return new this.db.Collection(new this.db.WhereClause(this))}orderBy(U){return new this.db.Collection(new this.db.WhereClause(this,MU(U)?`[${U.join("+")}]`:U))}reverse(){return this.toCollection().reverse()}mapToClass(U){this.schema.mappedClass=U;let Q=B=>{if(!B)return B;let R=Object.create(U.prototype);for(var V in B)if(wU(B,V))try{R[V]=B[V]}catch{}return R};return this.schema.readHook&&this.hook.reading.unsubscribe(this.schema.readHook),this.schema.readHook=Q,this.hook("reading",Q),U}defineClass(){function U(Q){yU(this,Q)}return this.mapToClass(U)}add(U,Q){let{auto:B,keyPath:R}=this.schema.primKey,V=U;return R&&B&&(V=JR(R)(U)),this._trans("readwrite",d=>this.core.mutate({trans:d,type:"add",keys:Q!=null?[Q]:null,values:[V]})).then(d=>d.numFailures?G.reject(d.failures[0]):d.lastResult).then(d=>{if(R)try{_U(U,R,d)}catch{}return d})}update(U,Q){if(typeof U=="object"&&!MU(U)){let B=JF(U,this.schema.primKey.keyPath);if(B===void 0)return aU(new f.InvalidArgument("Given object does not contain its primary key"));try{typeof Q!="function"?SU(Q).forEach(R=>{_U(U,R,Q[R])}):Q(U,{value:U,primKey:B})}catch{}return this.where(":id").equals(B).modify(Q)}else return this.where(":id").equals(U).modify(Q)}put(U,Q){let{auto:B,keyPath:R}=this.schema.primKey,V=U;return R&&B&&(V=JR(R)(U)),this._trans("readwrite",d=>this.core.mutate({trans:d,type:"put",values:[V],keys:Q!=null?[Q]:null})).then(d=>d.numFailures?G.reject(d.failures[0]):d.lastResult).then(d=>{if(R)try{_U(U,R,d)}catch{}return d})}delete(U){return this._trans("readwrite",Q=>this.core.mutate({trans:Q,type:"delete",keys:[U]})).then(Q=>Q.numFailures?G.reject(Q.failures[0]):void 0)}clear(){return this._trans("readwrite",U=>this.core.mutate({trans:U,type:"deleteRange",range:ll})).then(U=>U.numFailures?G.reject(U.failures[0]):void 0)}bulkGet(U){return this._trans("readonly",Q=>this.core.getMany({keys:U,trans:Q}).then(B=>B.map(R=>this.hook.reading.fire(R))))}bulkAdd(U,Q,B){let R=Array.isArray(Q)?Q:void 0;B=B||(R?void 0:Q);let V=B?B.allKeys:void 0;return this._trans("readwrite",d=>{let{auto:l,keyPath:n}=this.schema.primKey;if(n&&R)throw new f.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");if(R&&R.length!==U.length)throw new f.InvalidArgument("Arguments objects and keys must have the same length");let J=U.length,W=n&&l?U.map(JR(n)):U;return this.core.mutate({trans:d,type:"add",keys:R,values:W,wantResults:V}).then(({numFailures:E,results:Z,lastResult:e,failures:r})=>{let c=V?Z:e;if(E===0)return c;throw new $Q(`${this.name}.bulkAdd(): ${E} of ${J} operations failed`,r)})})}bulkPut(U,Q,B){let R=Array.isArray(Q)?Q:void 0;B=B||(R?void 0:Q);let V=B?B.allKeys:void 0;return this._trans("readwrite",d=>{let{auto:l,keyPath:n}=this.schema.primKey;if(n&&R)throw new f.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");if(R&&R.length!==U.length)throw new f.InvalidArgument("Arguments objects and keys must have the same length");let J=U.length,W=n&&l?U.map(JR(n)):U;return this.core.mutate({trans:d,type:"put",keys:R,values:W,wantResults:V}).then(({numFailures:E,results:Z,lastResult:e,failures:r})=>{let c=V?Z:e;if(E===0)return c;throw new $Q(`${this.name}.bulkPut(): ${E} of ${J} operations failed`,r)})})}bulkDelete(U){let Q=U.length;return this._trans("readwrite",B=>this.core.mutate({trans:B,type:"delete",keys:U})).then(({numFailures:B,lastResult:R,failures:V})=>{if(B===0)return R;throw new $Q(`${this.name}.bulkDelete(): ${B} of ${Q} operations failed`,V)})}};function lB(F){var U={},Q=function(l,n){if(n){for(var J=arguments.length,W=new Array(J-1);--J;)W[J-1]=arguments[J];return U[l].subscribe.apply(null,W),F}else if(typeof l=="string")return U[l]};Q.addEventType=V;for(var B=1,R=arguments.length;B<R;++B)V(arguments[B]);return Q;function V(l,n,J){if(typeof l=="object")return d(l);n||(n=iW),J||(J=VU);var W={subscribers:[],fire:J,subscribe:function(E){W.subscribers.indexOf(E)===-1&&(W.subscribers.push(E),W.fire=n(W.fire,E))},unsubscribe:function(E){W.subscribers=W.subscribers.filter(function(Z){return Z!==E}),W.fire=W.subscribers.reduce(n,J)}};return U[l]=Q[l]=W,W}function d(l){SU(l).forEach(function(n){var J=l[n];if(MU(J))V(n,l[n][0],l[n][1]);else if(J==="asap")var W=V(n,UB,function(){for(var Z=arguments.length,e=new Array(Z);Z--;)e[Z]=arguments[Z];W.subscribers.forEach(function(r){Xd(function(){r.apply(null,e)})})});else throw new f.InvalidArgument("Invalid event config")})}}function nB(F,U){return TQ(U).from({prototype:F}),U}function LW(F){return nB(nl.prototype,function(Q,B,R){this.db=F,this._tx=R,this.name=Q,this.schema=B,this.hook=F._allTables[Q]?F._allTables[Q].hook:lB(null,{creating:[mW,VU],reading:[pW,UB],updating:[oW,VU],deleting:[MW,VU]})})}function pQ(F,U){return!(F.filter||F.algorithm||F.or)&&(U?F.justLimit:!F.replayFilter)}function OV(F,U){F.filter=_F(F.filter,U)}function HV(F,U,Q){var B=F.replayFilter;F.replayFilter=B?()=>_F(B(),U()):U,F.justLimit=Q&&!B}function jW(F,U){F.isMatch=_F(F.isMatch,U)}function WR(F,U){if(F.isPrimKey)return U.primaryKey;let Q=U.getIndexByKeyPath(F.index);if(!Q)throw new f.Schema("KeyPath "+F.index+" on object store "+U.name+" is not indexed");return Q}function Jl(F,U,Q){let B=WR(F,U.schema);return U.openCursor({trans:Q,values:!F.keysOnly,reverse:F.dir==="prev",unique:!!F.unique,query:{index:B,range:F.range}})}function ZR(F,U,Q,B){let R=F.replayFilter?_F(F.filter,F.replayFilter()):F.filter;if(F.or){let V={},d=(l,n,J)=>{if(!R||R(n,J,Z=>n.stop(Z),Z=>n.fail(Z))){var W=n.primaryKey,E=""+W;E==="[object ArrayBuffer]"&&(E=""+new Uint8Array(W)),wU(V,E)||(V[E]=!0,U(l,n,J))}};return Promise.all([F.or._iterate(d,Q),Wl(Jl(F,B,Q),F.algorithm,d,!F.keysOnly&&F.valueMapper)])}else return Wl(Jl(F,B,Q),_F(F.algorithm,R),U,!F.keysOnly&&F.valueMapper)}function Wl(F,U,Q,B){var R=B?(d,l,n)=>Q(B(d),l,n):Q,V=WU(R);return F.then(d=>{if(d)return d.start(()=>{var l=()=>d.continue();(!U||U(d,n=>l=n,n=>{d.stop(n),l=VU},n=>{d.fail(n),l=VU}))&&V(d.value,d,n=>l=n),l()})})}function vU(F,U){try{let Q=Zl(F),B=Zl(U);if(Q!==B)return Q==="Array"?1:B==="Array"?-1:Q==="binary"?1:B==="binary"?-1:Q==="string"?1:B==="string"?-1:Q==="Date"?1:B!=="Date"?NaN:-1;switch(Q){case"number":case"Date":case"string":return F>U?1:F<U?-1:0;case"binary":return fW(Nl(F),Nl(U));case"Array":return IW(F,U)}}catch{}return NaN}function IW(F,U){let Q=F.length,B=U.length,R=Q<B?Q:B;for(let V=0;V<R;++V){let d=vU(F[V],U[V]);if(d!==0)return d}return Q===B?0:Q<B?-1:1}function fW(F,U){let Q=F.length,B=U.length,R=Q<B?Q:B;for(let V=0;V<R;++V)if(F[V]!==U[V])return F[V]<U[V]?-1:1;return Q===B?0:Q<B?-1:1}function Zl(F){let U=typeof F;if(U!=="object")return U;if(ArrayBuffer.isView(F))return"binary";let Q=tV(F);return Q==="ArrayBuffer"?"binary":Q}function Nl(F){return F instanceof Uint8Array?F:ArrayBuffer.isView(F)?new Uint8Array(F.buffer,F.byteOffset,F.byteLength):new Uint8Array(F)}var El=class{_read(U,Q){var B=this._ctx;return B.error?B.table._trans(null,aU.bind(null,B.error)):B.table._trans("readonly",U).then(Q)}_write(U){var Q=this._ctx;return Q.error?Q.table._trans(null,aU.bind(null,Q.error)):Q.table._trans("readwrite",U,"locked")}_addAlgorithm(U){var Q=this._ctx;Q.algorithm=_F(Q.algorithm,U)}_iterate(U,Q){return ZR(this._ctx,U,Q,this._ctx.table.core)}clone(U){var Q=Object.create(this.constructor.prototype),B=Object.create(this._ctx);return U&&yU(B,U),Q._ctx=B,Q}raw(){return this._ctx.valueMapper=null,this}each(U){var Q=this._ctx;return this._read(B=>ZR(Q,U,B,Q.table.core))}count(U){return this._read(Q=>{let B=this._ctx,R=B.table.core;if(pQ(B,!0))return R.count({trans:Q,query:{index:WR(B,R.schema),range:B.range}}).then(d=>Math.min(d,B.limit));var V=0;return ZR(B,()=>(++V,!1),Q,R).then(()=>V)}).then(U)}sortBy(U,Q){let B=U.split(".").reverse(),R=B[0],V=B.length-1;function d(J,W){return W?d(J[B[W]],W-1):J[R]}var l=this._ctx.dir==="next"?1:-1;function n(J,W){var E=d(J,V),Z=d(W,V);return E<Z?-l:E>Z?l:0}return this.toArray(function(J){return J.sort(n)}).then(Q)}toArray(U){return this._read(Q=>{var B=this._ctx;if(B.dir==="next"&&pQ(B,!0)&&B.limit>0){let{valueMapper:R}=B,V=WR(B,B.table.core.schema);return B.table.core.query({trans:Q,limit:B.limit,values:!0,query:{index:V,range:B.range}}).then(({result:d})=>R?d.map(R):d)}else{let R=[];return ZR(B,V=>R.push(V),Q,B.table.core).then(()=>R)}},U)}offset(U){var Q=this._ctx;return U<=0?this:(Q.offset+=U,pQ(Q)?HV(Q,()=>{var B=U;return(R,V)=>B===0?!0:B===1?(--B,!1):(V(()=>{R.advance(B),B=0}),!1)}):HV(Q,()=>{var B=U;return()=>--B<0}),this)}limit(U){return this._ctx.limit=Math.min(this._ctx.limit,U),HV(this._ctx,()=>{var Q=U;return function(B,R,V){return--Q<=0&&R(V),Q>=0}},!0),this}until(U,Q){return OV(this._ctx,function(B,R,V){return U(B.value)?(R(V),Q):!0}),this}first(U){return this.limit(1).toArray(function(Q){return Q[0]}).then(U)}last(U){return this.reverse().first(U)}filter(U){return OV(this._ctx,function(Q){return U(Q.value)}),jW(this._ctx,U),this}and(U){return this.filter(U)}or(U){return new this.db.WhereClause(this._ctx.table,U,this)}reverse(){return this._ctx.dir=this._ctx.dir==="prev"?"next":"prev",this._ondirectionchange&&this._ondirectionchange(this._ctx.dir),this}desc(){return this.reverse()}eachKey(U){var Q=this._ctx;return Q.keysOnly=!Q.isMatch,this.each(function(B,R){U(R.key,R)})}eachUniqueKey(U){return this._ctx.unique="unique",this.eachKey(U)}eachPrimaryKey(U){var Q=this._ctx;return Q.keysOnly=!Q.isMatch,this.each(function(B,R){U(R.primaryKey,R)})}keys(U){var Q=this._ctx;Q.keysOnly=!Q.isMatch;var B=[];return this.each(function(R,V){B.push(V.key)}).then(function(){return B}).then(U)}primaryKeys(U){var Q=this._ctx;if(Q.dir==="next"&&pQ(Q,!0)&&Q.limit>0)return this._read(R=>{var V=WR(Q,Q.table.core.schema);return Q.table.core.query({trans:R,values:!1,limit:Q.limit,query:{index:V,range:Q.range}})}).then(({result:R})=>R).then(U);Q.keysOnly=!Q.isMatch;var B=[];return this.each(function(R,V){B.push(V.primaryKey)}).then(function(){return B}).then(U)}uniqueKeys(U){return this._ctx.unique="unique",this.keys(U)}firstKey(U){return this.limit(1).keys(function(Q){return Q[0]}).then(U)}lastKey(U){return this.reverse().firstKey(U)}distinct(){var U=this._ctx,Q=U.index&&U.table.schema.idxByName[U.index];if(!Q||!Q.multi)return this;var B={};return OV(this._ctx,function(R){var V=R.primaryKey.toString(),d=wU(B,V);return B[V]=!0,!d}),this}modify(U){var Q=this._ctx;return this._write(B=>{var R;if(typeof U=="function")R=U;else{var V=SU(U),d=V.length;R=function(c){for(var h=!1,N=0;N<d;++N){var k=V[N],t=U[k];JF(c,k)!==t&&(_U(c,k,t),h=!0)}return h}}let l=Q.table.core,{outbound:n,extractKey:J}=l.schema.primaryKey,W=this.db._options.modifyChunkSize||200,E=[],Z=0,e=[],r=(c,h)=>{let{failures:N,numFailures:k}=h;Z+=c-k;for(let t of SU(N))E.push(N[t])};return this.clone().primaryKeys().then(c=>{let h=N=>{let k=Math.min(W,c.length-N);return l.getMany({trans:B,keys:c.slice(N,N+k),cache:"immutable"}).then(t=>{let S=[],a=[],T=n?[]:null,C=[];for(let p=0;p<k;++p){let o=t[p],s={value:AQ(o),primKey:c[N+p]};R.call(s,s.value,s)!==!1&&(s.value==null?C.push(c[N+p]):!n&&vU(J(o),J(s.value))!==0?(C.push(c[N+p]),S.push(s.value)):(a.push(s.value),n&&T.push(c[N+p])))}let D=pQ(Q)&&Q.limit===1/0&&(typeof U!="function"||U===zV)&&{index:Q.index,range:Q.range};return Promise.resolve(S.length>0&&l.mutate({trans:B,type:"add",values:S}).then(p=>{for(let o in p.failures)C.splice(parseInt(o),1);r(S.length,p)})).then(()=>(a.length>0||D&&typeof U=="object")&&l.mutate({trans:B,type:"put",keys:T,values:a,criteria:D,changeSpec:typeof U!="function"&&U}).then(p=>r(a.length,p))).then(()=>(C.length>0||D&&U===zV)&&l.mutate({trans:B,type:"delete",keys:C,criteria:D}).then(p=>r(C.length,p))).then(()=>c.length>N+k&&h(N+W))})};return h(0).then(()=>{if(E.length>0)throw new gB("Error modifying one or more objects",E,Z,e);return c.length})})})}delete(){var U=this._ctx,Q=U.range;return pQ(U)&&(U.isPrimKey&&!wW||Q.type===3)?this._write(B=>{let{primaryKey:R}=U.table.core.schema,V=Q;return U.table.core.count({trans:B,query:{index:R,range:V}}).then(d=>U.table.core.mutate({trans:B,type:"deleteRange",range:V}).then(({failures:l,lastResult:n,results:J,numFailures:W})=>{if(W)throw new gB("Could not delete some values",Object.keys(l).map(E=>l[E]),d-W);return d-W}))}):this.modify(zV)}},zV=(F,U)=>U.value=null;function KW(F){return nB(El.prototype,function(Q,B){this.db=F;let R=ll,V=null;if(B)try{R=B()}catch(J){V=J}let d=Q._ctx,l=d.table,n=l.hook.reading.fire;this._ctx={table:l,index:d.index,isPrimKey:!d.index||l.schema.primKey.keyPath&&d.index===l.schema.primKey.name,range:R,keysOnly:!1,dir:"next",unique:"",algorithm:null,filter:null,replayFilter:null,justLimit:!0,isMatch:null,offset:0,limit:1/0,error:V,or:d.or,valueMapper:n!==UB?n:null}})}function gW(F,U){return F<U?-1:F===U?0:1}function PW(F,U){return F>U?-1:F===U?0:1}function LU(F,U,Q){var B=F instanceof uV?new F.Collection(F):F;return B._ctx.error=Q?new Q(U):new TypeError(U),B}function mQ(F){return new F.Collection(F,()=>tl("")).limit(0)}function _W(F){return F==="next"?U=>U.toUpperCase():U=>U.toLowerCase()}function qW(F){return F==="next"?U=>U.toLowerCase():U=>U.toUpperCase()}function AW(F,U,Q,B,R,V){for(var d=Math.min(F.length,B.length),l=-1,n=0;n<d;++n){var J=U[n];if(J!==B[n])return R(F[n],Q[n])<0?F.substr(0,n)+Q[n]+Q.substr(n+1):R(F[n],B[n])<0?F.substr(0,n)+B[n]+Q.substr(n+1):l>=0?F.substr(0,l)+U[l]+Q.substr(l+1):null;R(F[n],J)<0&&(l=n)}return d<B.length&&V==="next"?F+Q.substr(F.length):d<F.length&&V==="prev"?F.substr(0,Q.length):l<0?null:F.substr(0,l)+B[l]+Q.substr(l+1)}function NR(F,U,Q,B){var R,V,d,l,n,J,W,E=Q.length;if(!Q.every(c=>typeof c=="string"))return LU(F,Vl);function Z(c){R=_W(c),V=qW(c),d=c==="next"?gW:PW;var h=Q.map(function(N){return{lower:V(N),upper:R(N)}}).sort(function(N,k){return d(N.lower,k.lower)});l=h.map(function(N){return N.upper}),n=h.map(function(N){return N.lower}),J=c,W=c==="next"?"":B}Z("next");var e=new F.Collection(F,()=>oF(l[0],n[E-1]+B));e._ondirectionchange=function(c){Z(c)};var r=0;return e._addAlgorithm(function(c,h,N){var k=c.key;if(typeof k!="string")return!1;var t=V(k);if(U(t,n,r))return!0;for(var S=null,a=r;a<E;++a){var T=AW(k,t,l[a],n[a],d,J);T===null&&S===null?r=a+1:(S===null||d(S,T)>0)&&(S=T)}return h(S!==null?function(){c.continue(S+W)}:N),!1}),e}function oF(F,U,Q,B){return{type:2,lower:F,upper:U,lowerOpen:Q,upperOpen:B}}function tl(F){return{type:1,lower:F,upper:F}}var uV=class{get Collection(){return this._ctx.table.db.Collection}between(U,Q,B,R){B=B!==!1,R=R===!0;try{return this._cmp(U,Q)>0||this._cmp(U,Q)===0&&(B||R)&&!(B&&R)?mQ(this):new this.Collection(this,()=>oF(U,Q,!B,!R))}catch{return LU(this,NF)}}equals(U){return U==null?LU(this,NF):new this.Collection(this,()=>tl(U))}above(U){return U==null?LU(this,NF):new this.Collection(this,()=>oF(U,void 0,!0))}aboveOrEqual(U){return U==null?LU(this,NF):new this.Collection(this,()=>oF(U,void 0,!1))}below(U){return U==null?LU(this,NF):new this.Collection(this,()=>oF(void 0,U,!1,!0))}belowOrEqual(U){return U==null?LU(this,NF):new this.Collection(this,()=>oF(void 0,U))}startsWith(U){return typeof U!="string"?LU(this,Vl):this.between(U,U+PF,!0,!0)}startsWithIgnoreCase(U){return U===""?this.startsWith(U):NR(this,(Q,B)=>Q.indexOf(B[0])===0,[U],PF)}equalsIgnoreCase(U){return NR(this,(Q,B)=>Q===B[0],[U],"")}anyOfIgnoreCase(){var U=WF.apply(hQ,arguments);return U.length===0?mQ(this):NR(this,(Q,B)=>B.indexOf(Q)!==-1,U,"")}startsWithAnyOfIgnoreCase(){var U=WF.apply(hQ,arguments);return U.length===0?mQ(this):NR(this,(Q,B)=>B.some(R=>Q.indexOf(R)===0),U,PF)}anyOf(){let U=WF.apply(hQ,arguments),Q=this._cmp;try{U.sort(Q)}catch{return LU(this,NF)}if(U.length===0)return mQ(this);let B=new this.Collection(this,()=>oF(U[0],U[U.length-1]));B._ondirectionchange=V=>{Q=V==="next"?this._ascending:this._descending,U.sort(Q)};let R=0;return B._addAlgorithm((V,d,l)=>{let n=V.key;for(;Q(n,U[R])>0;)if(++R,R===U.length)return d(l),!1;return Q(n,U[R])===0?!0:(d(()=>{V.continue(U[R])}),!1)}),B}notEqual(U){return this.inAnyRange([[GV,U],[U,this.db._maxKey]],{includeLowers:!1,includeUppers:!1})}noneOf(){let U=WF.apply(hQ,arguments);if(U.length===0)return new this.Collection(this);try{U.sort(this._ascending)}catch{return LU(this,NF)}let Q=U.reduce((B,R)=>B?B.concat([[B[B.length-1][1],R]]):[[GV,R]],null);return Q.push([U[U.length-1],this.db._maxKey]),this.inAnyRange(Q,{includeLowers:!1,includeUppers:!1})}inAnyRange(U,Q){let B=this._cmp,R=this._ascending,V=this._descending,d=this._min,l=this._max;if(U.length===0)return mQ(this);if(!U.every(S=>S[0]!==void 0&&S[1]!==void 0&&R(S[0],S[1])<=0))return LU(this,"First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower",f.InvalidArgument);let n=!Q||Q.includeLowers!==!1,J=Q&&Q.includeUppers===!0;function W(S,a){let T=0,C=S.length;for(;T<C;++T){let D=S[T];if(B(a[0],D[1])<0&&B(a[1],D[0])>0){D[0]=d(D[0],a[0]),D[1]=l(D[1],a[1]);break}}return T===C&&S.push(a),S}let E=R;function Z(S,a){return E(S[0],a[0])}let e;try{e=U.reduce(W,[]),e.sort(Z)}catch{return LU(this,NF)}let r=0,c=J?S=>R(S,e[r][1])>0:S=>R(S,e[r][1])>=0,h=n?S=>V(S,e[r][0])>0:S=>V(S,e[r][0])>=0;function N(S){return!c(S)&&!h(S)}let k=c,t=new this.Collection(this,()=>oF(e[0][0],e[e.length-1][1],!n,!J));return t._ondirectionchange=S=>{S==="next"?(k=c,E=R):(k=h,E=V),e.sort(Z)},t._addAlgorithm((S,a,T)=>{for(var C=S.key;k(C);)if(++r,r===e.length)return a(T),!1;return N(C)?!0:(this._cmp(C,e[r][1])===0||this._cmp(C,e[r][0])===0||a(()=>{E===R?S.continue(e[r][0]):S.continue(e[r][1])}),!1)}),t}startsWithAnyOf(){let U=WF.apply(hQ,arguments);return U.every(Q=>typeof Q=="string")?U.length===0?mQ(this):this.inAnyRange(U.map(Q=>[Q,Q+PF])):LU(this,"startsWithAnyOf() only works with strings")}};function $W(F){return nB(uV.prototype,function(Q,B,R){this.db=F,this._ctx={table:Q,index:B===":id"?null:B,or:R};let V=F._deps.indexedDB;if(!V)throw new f.MissingAPI;this._cmp=this._ascending=V.cmp.bind(V),this._descending=(d,l)=>V.cmp(l,d),this._max=(d,l)=>V.cmp(d,l)>0?d:l,this._min=(d,l)=>V.cmp(d,l)<0?d:l,this._IDBKeyRange=F._deps.IDBKeyRange})}function BF(F){return WU(function(U){return JB(U),F(U.target.error),!1})}function JB(F){F.stopPropagation&&F.stopPropagation(),F.preventDefault&&F.preventDefault()}var WB="storagemutated",iF="x-storagemutated-1",sF=lB(null,WB),Sl=class{_lock(){return qQ(!u.global),++this._reculock,this._reculock===1&&!u.global&&(u.lockOwnerFor=this),this}_unlock(){if(qQ(!u.global),--this._reculock==0)for(u.global||(u.lockOwnerFor=null);this._blockedFuncs.length>0&&!this._locked();){var U=this._blockedFuncs.shift();try{DQ(U[1],U[0])}catch{}}return this}_locked(){return this._reculock&&u.lockOwnerFor!==this}create(U){if(!this.mode)return this;let Q=this.db.idbdb,B=this.db._state.dbOpenError;if(qQ(!this.idbtrans),!U&&!Q)switch(B&&B.name){case"DatabaseClosedError":throw new f.DatabaseClosed(B);case"MissingAPIError":throw new f.MissingAPI(B.message,B);default:throw new f.OpenFailed(B)}if(!this.active)throw new f.TransactionInactive;return qQ(this._completion._state===null),U=this.idbtrans=U||(this.db.core?this.db.core.transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability}):Q.transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability})),U.onerror=WU(R=>{JB(R),this._reject(U.error)}),U.onabort=WU(R=>{JB(R),this.active&&this._reject(new f.Abort(U.error)),this.active=!1,this.on("abort").fire(R)}),U.oncomplete=WU(()=>{this.active=!1,this._resolve(),"mutatedParts"in U&&sF.storagemutated.fire(U.mutatedParts)}),this}_promise(U,Q,B){if(U==="readwrite"&&this.mode!=="readwrite")return aU(new f.ReadOnly("Transaction is readonly"));if(!this.active)return aU(new f.TransactionInactive);if(this._locked())return new G((V,d)=>{this._blockedFuncs.push([()=>{this._promise(U,Q,B).then(V,d)},u])});if(B)return mF(()=>{var V=new G((d,l)=>{this._lock();let n=Q(d,l,this);n&&n.then&&n.then(d,l)});return V.finally(()=>this._unlock()),V._lib=!0,V});var R=new G((V,d)=>{var l=Q(V,d,this);l&&l.then&&l.then(V,d)});return R._lib=!0,R}_root(){return this.parent?this.parent._root():this}waitFor(U){var Q=this._root();let B=G.resolve(U);if(Q._waitingFor)Q._waitingFor=Q._waitingFor.then(()=>B);else{Q._waitingFor=B,Q._waitingQueue=[];var R=Q.idbtrans.objectStore(Q.storeNames[0]);(function d(){for(++Q._spinCount;Q._waitingQueue.length;)Q._waitingQueue.shift()();Q._waitingFor&&(R.get(-1/0).onsuccess=d)})()}var V=Q._waitingFor;return new G((d,l)=>{B.then(n=>Q._waitingQueue.push(WU(d.bind(null,n))),n=>Q._waitingQueue.push(WU(l.bind(null,n)))).finally(()=>{Q._waitingFor===V&&(Q._waitingFor=null)})})}abort(){this.active&&(this.active=!1,this.idbtrans&&this.idbtrans.abort(),this._reject(new f.Abort))}table(U){let Q=this._memoizedTables||(this._memoizedTables={});if(wU(Q,U))return Q[U];let B=this.schema[U];if(!B)throw new f.NotFound("Table "+U+" not part of transaction");let R=new this.db.Table(U,B,this);return R.core=this.db.core.table(U),Q[U]=R,R}};function UZ(F){return nB(Sl.prototype,function(Q,B,R,V,d){this.db=F,this.mode=Q,this.storeNames=B,this.schema=R,this.chromeTransactionDurability=V,this.idbtrans=null,this.on=lB(this,"complete","error","abort"),this.parent=d||null,this.active=!0,this._reculock=0,this._blockedFuncs=[],this._resolve=null,this._reject=null,this._waitingFor=null,this._waitingQueue=null,this._spinCount=0,this._completion=new G((l,n)=>{this._resolve=l,this._reject=n}),this._completion.then(()=>{this.active=!1,this.on.complete.fire()},l=>{var n=this.active;return this.active=!1,this.on.error.fire(l),this.parent?this.parent._reject(l):n&&this.idbtrans&&this.idbtrans.abort(),aU(l)})})}function xV(F,U,Q,B,R,V,d){return{name:F,keyPath:U,unique:Q,multi:B,auto:R,compound:V,src:(Q&&!d?"&":"")+(B?"*":"")+(R?"++":"")+el(U)}}function el(F){return typeof F=="string"?F:F?"["+[].join.call(F,"+")+"]":""}function kl(F,U,Q){return{name:F,primKey:U,indexes:Q,mappedClass:null,idxByName:Od(Q,B=>[B.name,B])}}function FZ(F){return F.length===1?F[0]:F}var ZB=F=>{try{return F.only([[]]),ZB=()=>[[]],[[]]}catch{return ZB=()=>PF,PF}};function wV(F){return F==null?()=>{}:typeof F=="string"?QZ(F):U=>JF(U,F)}function QZ(F){return F.split(".").length===1?Q=>Q[F]:Q=>JF(Q,F)}function al(F){return[].slice.call(F)}var BZ=0;function NB(F){return F==null?":id":typeof F=="string"?F:`[${F.join("+")}]`}function RZ(F,U,Q){function B(W,E){let Z=al(W.objectStoreNames);return{schema:{name:W.name,tables:Z.map(e=>E.objectStore(e)).map(e=>{let{keyPath:r,autoIncrement:c}=e,h=MU(r),N=r==null,k={},t={name:e.name,primaryKey:{name:null,isPrimaryKey:!0,outbound:N,compound:h,keyPath:r,autoIncrement:c,unique:!0,extractKey:wV(r)},indexes:al(e.indexNames).map(S=>e.index(S)).map(S=>{let{name:a,unique:T,multiEntry:C,keyPath:D}=S,p=MU(D),o={name:a,compound:p,keyPath:D,unique:T,multiEntry:C,extractKey:wV(D)};return k[NB(D)]=o,o}),getIndexByKeyPath:S=>k[NB(S)]};return k[":id"]=t.primaryKey,r!=null&&(k[NB(r)]=t.primaryKey),t})},hasGetAll:Z.length>0&&"getAll"in E.objectStore(Z[0])&&!(typeof navigator!="undefined"&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604)}}function R(W){if(W.type===3)return null;if(W.type===4)throw new Error("Cannot convert never type to IDBKeyRange");let{lower:E,upper:Z,lowerOpen:e,upperOpen:r}=W;return E===void 0?Z===void 0?null:U.upperBound(Z,!!r):Z===void 0?U.lowerBound(E,!!e):U.bound(E,Z,!!e,!!r)}function V(W){let E=W.name;function Z({trans:c,type:h,keys:N,values:k,range:t}){return new Promise((S,a)=>{S=WU(S);let T=c.objectStore(E),C=T.keyPath==null,D=h==="put"||h==="add";if(!D&&h!=="delete"&&h!=="deleteRange")throw new Error("Invalid operation type: "+h);let{length:p}=N||k||{length:1};if(N&&k&&N.length!==k.length)throw new Error("Given keys array must have same length as given values array.");if(p===0)return S({numFailures:0,failures:{},results:[],lastResult:void 0});let o,s=[],v=[],y=0,i=g=>{++y,JB(g)};if(h==="deleteRange"){if(t.type===4)return S({numFailures:y,failures:v,results:[],lastResult:void 0});t.type===3?s.push(o=T.clear()):s.push(o=T.delete(R(t)))}else{let[g,L]=D?C?[k,N]:[k,null]:[N,null];if(D)for(let M=0;M<p;++M)s.push(o=L&&L[M]!==void 0?T[h](g[M],L[M]):T[h](g[M])),o.onerror=i;else for(let M=0;M<p;++M)s.push(o=T[h](g[M])),o.onerror=i}let w=g=>{let L=g.target.result;s.forEach((M,m)=>M.error!=null&&(v[m]=M.error)),S({numFailures:y,failures:v,results:h==="delete"?N:s.map(M=>M.result),lastResult:L})};o.onerror=g=>{i(g),w(g)},o.onsuccess=w})}function e({trans:c,values:h,query:N,reverse:k,unique:t}){return new Promise((S,a)=>{S=WU(S);let{index:T,range:C}=N,D=c.objectStore(E),p=T.isPrimaryKey?D:D.index(T.name),o=k?t?"prevunique":"prev":t?"nextunique":"next",s=h||!("openKeyCursor"in p)?p.openCursor(R(C),o):p.openKeyCursor(R(C),o);s.onerror=BF(a),s.onsuccess=WU(v=>{let y=s.result;if(!y){S(null);return}y.___id=++BZ,y.done=!1;let i=y.continue.bind(y),w=y.continuePrimaryKey;w&&(w=w.bind(y));let g=y.advance.bind(y),L=()=>{throw new Error("Cursor not started")},M=()=>{throw new Error("Cursor not stopped")};y.trans=c,y.stop=y.continue=y.continuePrimaryKey=y.advance=L,y.fail=WU(a),y.next=function(){let m=1;return this.start(()=>m--?this.continue():this.stop()).then(()=>this)},y.start=m=>{let Y=new Promise((X,lU)=>{X=WU(X),s.onerror=BF(lU),y.fail=lU,y.stop=EU=>{y.stop=y.continue=y.continuePrimaryKey=y.advance=M,X(EU)}}),I=()=>{if(s.result)try{m()}catch(X){y.fail(X)}else y.done=!0,y.start=()=>{throw new Error("Cursor behind last entry")},y.stop()};return s.onsuccess=WU(X=>{s.onsuccess=I,I()}),y.continue=i,y.continuePrimaryKey=w,y.advance=g,I(),Y},S(y)},a)})}function r(c){return h=>new Promise((N,k)=>{N=WU(N);let{trans:t,values:S,limit:a,query:T}=h,C=a===1/0?void 0:a,{index:D,range:p}=T,o=t.objectStore(E),s=D.isPrimaryKey?o:o.index(D.name),v=R(p);if(a===0)return N({result:[]});if(c){let y=S?s.getAll(v,C):s.getAllKeys(v,C);y.onsuccess=i=>N({result:i.target.result}),y.onerror=BF(k)}else{let y=0,i=S||!("openKeyCursor"in s)?s.openCursor(v):s.openKeyCursor(v),w=[];i.onsuccess=g=>{let L=i.result;if(!L)return N({result:w});if(w.push(S?L.value:L.primaryKey),++y===a)return N({result:w});L.continue()},i.onerror=BF(k)}})}return{name:E,schema:W,mutate:Z,getMany({trans:c,keys:h}){return new Promise((N,k)=>{N=WU(N);let t=c.objectStore(E),S=h.length,a=new Array(S),T=0,C=0,D,p=s=>{let v=s.target;(a[v._pos]=v.result)!=null,++C===T&&N(a)},o=BF(k);for(let s=0;s<S;++s)h[s]!=null&&(D=t.get(h[s]),D._pos=s,D.onsuccess=p,D.onerror=o,++T);T===0&&N(a)})},get({trans:c,key:h}){return new Promise((N,k)=>{N=WU(N);let S=c.objectStore(E).get(h);S.onsuccess=a=>N(a.target.result),S.onerror=BF(k)})},query:r(l),openCursor:e,count({query:c,trans:h}){let{index:N,range:k}=c;return new Promise((t,S)=>{let a=h.objectStore(E),T=N.isPrimaryKey?a:a.index(N.name),C=R(k),D=C?T.count(C):T.count();D.onsuccess=WU(p=>t(p.target.result)),D.onerror=BF(S)})}}}let{schema:d,hasGetAll:l}=B(F,Q),n=d.tables.map(W=>V(W)),J={};return n.forEach(W=>J[W.name]=W),{stack:"dbcore",transaction:F.transaction.bind(F),table(W){if(!J[W])throw new Error(`Table '${W}' not found`);return J[W]},MIN_KEY:-1/0,MAX_KEY:ZB(U),schema:d}}function VZ(F,U){return U.reduce((Q,{create:B})=>z(z({},Q),B(Q)),F)}function dZ(F,U,{IDBKeyRange:Q,indexedDB:B},R){return{dbcore:VZ(RZ(U,Q,R),F.dbcore)}}function LV({_novip:F},U){let Q=U.db,B=dZ(F._middlewares,Q,F._deps,U);F.core=B.dbcore,F.tables.forEach(R=>{let V=R.name;F.core.schema.tables.some(d=>d.name===V)&&(R.core=F.core.table(V),F[V]instanceof F.Table&&(F[V].core=R.core))})}function ER({_novip:F},U,Q,B){Q.forEach(R=>{let V=B[R];U.forEach(d=>{let l=NV(d,R);(!l||"value"in l&&l.value===void 0)&&(d===F.Transaction.prototype||d instanceof F.Transaction?nF(d,R,{get(){return this.table(R)},set(n){Gd(this,R,{value:n,writable:!0,configurable:!0,enumerable:!0})}}):d[R]=new F.Table(R,V))})})}function jV({_novip:F},U){U.forEach(Q=>{for(let B in Q)Q[B]instanceof F.Table&&delete Q[B]})}function lZ(F,U){return F._cfg.version-U._cfg.version}function nZ(F,U,Q,B){let R=F._dbSchema,V=F._createTransaction("readwrite",F._storeNames,R);V.create(Q),V._completion.catch(B);let d=V._reject.bind(V),l=u.transless||u;mF(()=>{u.trans=V,u.transless=l,U===0?(SU(R).forEach(n=>{IV(Q,n,R[n].primKey,R[n].indexes)}),LV(F,Q),G.follow(()=>F.on.populate.fire(V)).catch(d)):JZ(F,U,V,Q).catch(d)})}function JZ({_novip:F},U,Q,B){let R=[],V=F._versions,d=F._dbSchema=KV(F,F.idbdb,B),l=!1;V.filter(W=>W._cfg.version>=U).forEach(W=>{R.push(()=>{let E=d,Z=W._cfg.dbschema;gV(F,E,B),gV(F,Z,B),d=F._dbSchema=Z;let e=Tl(E,Z);e.add.forEach(c=>{IV(B,c[0],c[1].primKey,c[1].indexes)}),e.change.forEach(c=>{if(c.recreate)throw new f.Upgrade("Not yet support for changing primary key");{let h=B.objectStore(c.name);c.add.forEach(N=>fV(h,N)),c.change.forEach(N=>{h.deleteIndex(N.name),fV(h,N)}),c.del.forEach(N=>h.deleteIndex(N))}});let r=W._cfg.contentUpgrade;if(r&&W._cfg.version>U){LV(F,B),Q._memoizedTables={},l=!0;let c=Hd(Z);e.del.forEach(t=>{c[t]=E[t]}),jV(F,[F.Transaction.prototype]),ER(F,[F.Transaction.prototype],SU(c),c),Q.schema=c;let h=eV(r);h&&CQ();let N,k=G.follow(()=>{if(N=r(Q),N&&h){var t=ZF.bind(null,null);N.then(t,t)}});return N&&typeof N.then=="function"?G.resolve(N):k.then(()=>N)}}),R.push(E=>{if(!l||!xW){let Z=W._cfg.dbschema;ZZ(Z,E)}jV(F,[F.Transaction.prototype]),ER(F,[F.Transaction.prototype],F._storeNames,F._dbSchema),Q.schema=F._dbSchema})});function J(){return R.length?G.resolve(R.shift()(Q.idbtrans)).then(J):G.resolve()}return J().then(()=>{WZ(d,B)})}function Tl(F,U){let Q={del:[],add:[],change:[]},B;for(B in F)U[B]||Q.del.push(B);for(B in U){let R=F[B],V=U[B];if(!R)Q.add.push([B,V]);else{let d={name:B,def:V,recreate:!1,del:[],add:[],change:[]};if(""+(R.primKey.keyPath||"")!=""+(V.primKey.keyPath||"")||R.primKey.auto!==V.primKey.auto&&!lR)d.recreate=!0,Q.change.push(d);else{let l=R.idxByName,n=V.idxByName,J;for(J in l)n[J]||d.del.push(J);for(J in n){let W=l[J],E=n[J];W?W.src!==E.src&&d.change.push(E):d.add.push(E)}(d.del.length>0||d.add.length>0||d.change.length>0)&&Q.change.push(d)}}}return Q}function IV(F,U,Q,B){let R=F.db.createObjectStore(U,Q.keyPath?{keyPath:Q.keyPath,autoIncrement:Q.auto}:{autoIncrement:Q.auto});return B.forEach(V=>fV(R,V)),R}function WZ(F,U){SU(F).forEach(Q=>{U.db.objectStoreNames.contains(Q)||IV(U,Q,F[Q].primKey,F[Q].indexes)})}function ZZ(F,U){[].slice.call(U.db.objectStoreNames).forEach(Q=>F[Q]==null&&U.db.deleteObjectStore(Q))}function fV(F,U){F.createIndex(U.name,U.keyPath,{unique:U.unique,multiEntry:U.multi})}function KV(F,U,Q){let B={};return KB(U.objectStoreNames,0).forEach(V=>{let d=Q.objectStore(V),l=d.keyPath,n=xV(el(l),l||"",!1,!1,!!d.autoIncrement,l&&typeof l!="string",!0),J=[];for(let E=0;E<d.indexNames.length;++E){let Z=d.index(d.indexNames[E]);l=Z.keyPath;var W=xV(Z.name,l,!!Z.unique,!!Z.multiEntry,!1,l&&typeof l!="string",!1);J.push(W)}B[V]=kl(V,n,J)}),B}function NZ({_novip:F},U,Q){F.verno=U.version/10;let B=F._dbSchema=KV(F,U,Q);F._storeNames=KB(U.objectStoreNames,0),ER(F,[F._allTables],SU(B),B)}function EZ(F,U){let Q=KV(F,F.idbdb,U),B=Tl(Q,F._dbSchema);return!(B.add.length||B.change.some(R=>R.add.length||R.change.length))}function gV({_novip:F},U,Q){let B=Q.db.objectStoreNames;for(let R=0;R<B.length;++R){let V=B[R],d=Q.objectStore(V);F._hasGetAll="getAll"in d;for(let l=0;l<d.indexNames.length;++l){let n=d.indexNames[l],J=d.index(n).keyPath,W=typeof J=="string"?J:"["+KB(J).join("+")+"]";if(U[V]){let E=U[V].idxByName[W];E&&(E.name=n,delete U[V].idxByName[W],U[V].idxByName[n]=E)}}}typeof navigator!="undefined"&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&nU.WorkerGlobalScope&&nU instanceof nU.WorkerGlobalScope&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604&&(F._hasGetAll=!1)}function tZ(F){return F.split(",").map((U,Q)=>{U=U.trim();let B=U.replace(/([&*]|\+\+)/g,""),R=/^\[/.test(B)?B.match(/^\[(.*)\]$/)[1].split("+"):B;return xV(B,R||null,/\&/.test(U),/\*/.test(U),/\+\+/.test(U),MU(R),Q===0)})}var hl=class{_parseStoresSpec(U,Q){SU(U).forEach(B=>{if(U[B]!==null){var R=tZ(U[B]),V=R.shift();if(V.multi)throw new f.Schema("Primary key cannot be multi-valued");R.forEach(d=>{if(d.auto)throw new f.Schema("Only primary key can be marked as autoIncrement (++)");if(!d.keyPath)throw new f.Schema("Index must have a name and cannot be an empty string")}),Q[B]=kl(B,V,R)}})}stores(U){let Q=this.db;this._cfg.storesSource=this._cfg.storesSource?yU(this._cfg.storesSource,U):U;let B=Q._versions,R={},V={};return B.forEach(d=>{yU(R,d._cfg.storesSource),V=d._cfg.dbschema={},d._parseStoresSpec(R,V)}),Q._dbSchema=V,jV(Q,[Q._allTables,Q,Q.Transaction.prototype]),ER(Q,[Q._allTables,Q,Q.Transaction.prototype,this._cfg.tables],SU(V),V),Q._storeNames=SU(V),this}upgrade(U){return this._cfg.contentUpgrade=hV(this._cfg.contentUpgrade||VU,U),this}};function SZ(F){return nB(hl.prototype,function(Q){this.db=F,this._cfg={version:Q,storesSource:null,dbschema:{},tables:{},contentUpgrade:null}})}function PV(F,U){let Q=F._dbNamesDB;return Q||(Q=F._dbNamesDB=new tF(nR,{addons:[],indexedDB:F,IDBKeyRange:U}),Q.version(1).stores({dbnames:"name"})),Q.table("dbnames")}function _V(F){return F&&typeof F.databases=="function"}function eZ({indexedDB:F,IDBKeyRange:U}){return _V(F)?Promise.resolve(F.databases()).then(Q=>Q.map(B=>B.name).filter(B=>B!==nR)):PV(F,U).toCollection().primaryKeys()}function kZ({indexedDB:F,IDBKeyRange:U},Q){!_V(F)&&Q!==nR&&PV(F,U).put({name:Q}).catch(VU)}function aZ({indexedDB:F,IDBKeyRange:U},Q){!_V(F)&&Q!==nR&&PV(F,U).delete(Q).catch(VU)}function qV(F){return mF(function(){return u.letThrough=!0,F()})}function TZ(){var F=!navigator.userAgentData&&/Safari\//.test(navigator.userAgent)&&!/Chrom(e|ium)\//.test(navigator.userAgent);if(!F||!indexedDB.databases)return Promise.resolve();var U;return new Promise(function(Q){var B=function(){return indexedDB.databases().finally(Q)};U=setInterval(B,100),B()}).finally(function(){return clearInterval(U)})}function hZ(F){let U=F._state,{indexedDB:Q}=F._deps;if(U.isBeingOpened||F.idbdb)return U.dbReadyPromise.then(()=>U.dbOpenError?aU(U.dbOpenError):F);QF&&(U.openCanceller._stackHolder=IF()),U.isBeingOpened=!0,U.dbOpenError=null,U.openComplete=!1;let B=U.openCanceller;function R(){if(U.openCanceller!==B)throw new f.DatabaseClosed("db.open() was cancelled")}let V=U.dbReadyResolve,d=null,l=!1;return G.race([B,(typeof navigator=="undefined"?G.resolve():TZ()).then(()=>new G((n,J)=>{if(R(),!Q)throw new f.MissingAPI;let W=F.name,E=U.autoSchema?Q.open(W):Q.open(W,Math.round(F.verno*10));if(!E)throw new f.MissingAPI;E.onerror=BF(J),E.onblocked=WU(F._fireOnBlocked),E.onupgradeneeded=WU(Z=>{if(d=E.transaction,U.autoSchema&&!F._options.allowEmptyDB){E.onerror=JB,d.abort(),E.result.close();let r=Q.deleteDatabase(W);r.onsuccess=r.onerror=WU(()=>{J(new f.NoSuchDatabase(`Database ${W} doesnt exist`))})}else{d.onerror=BF(J);var e=Z.oldVersion>Math.pow(2,62)?0:Z.oldVersion;l=e<1,F._novip.idbdb=E.result,nZ(F,e/10,d,J)}},J),E.onsuccess=WU(()=>{d=null;let Z=F._novip.idbdb=E.result,e=KB(Z.objectStoreNames);if(e.length>0)try{let r=Z.transaction(FZ(e),"readonly");U.autoSchema?NZ(F,Z,r):(gV(F,F._dbSchema,r),EZ(F,r)||console.warn("Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Some queries may fail.")),LV(F,r)}catch{}dB.push(F),Z.onversionchange=WU(r=>{U.vcFired=!0,F.on("versionchange").fire(r)}),Z.onclose=WU(r=>{F.on("close").fire(r)}),l&&kZ(F._deps,W),n()},J)}))]).then(()=>(R(),U.onReadyBeingFired=[],G.resolve(qV(()=>F.on.ready.fire(F.vip))).then(function n(){if(U.onReadyBeingFired.length>0){let J=U.onReadyBeingFired.reduce(hV,VU);return U.onReadyBeingFired=[],G.resolve(qV(()=>J(F.vip))).then(n)}}))).finally(()=>{U.onReadyBeingFired=null,U.isBeingOpened=!1}).then(()=>F).catch(n=>{U.dbOpenError=n;try{d&&d.abort()}catch{}return B===U.openCanceller&&F._close(),aU(n)}).finally(()=>{U.openComplete=!0,V()})}function AV(F){var U=d=>F.next(d),Q=d=>F.throw(d),B=V(U),R=V(Q);function V(d){return l=>{var n=d(l),J=n.value;return n.done?J:!J||typeof J.then!="function"?MU(J)?Promise.all(J).then(B,R):B(J):J.then(B,R)}}return V(U)()}function cZ(F,U,Q){var B=arguments.length;if(B<2)throw new f.InvalidArgument("Too few arguments");for(var R=new Array(B-1);--B;)R[B-1]=arguments[B];Q=R.pop();var V=zd(R);return[F,V,Q]}function cl(F,U,Q,B,R){return G.resolve().then(()=>{let V=u.transless||u,d=F._createTransaction(U,Q,F._dbSchema,B),l={trans:d,transless:V};if(B)d.idbtrans=B.idbtrans;else try{d.create(),F._state.PR1398_maxLoop=3}catch(E){return E.name===TV.InvalidState&&F.isOpen()&&--F._state.PR1398_maxLoop>0?(console.warn("Dexie: Need to reopen db"),F._close(),F.open().then(()=>cl(F,U,Q,null,R))):aU(E)}let n=eV(R);n&&CQ();let J,W=G.follow(()=>{if(J=R.call(d,d),J)if(n){var E=ZF.bind(null,null);J.then(E,E)}else typeof J.next=="function"&&typeof J.throw=="function"&&(J=AV(J))},l);return(J&&typeof J.then=="function"?G.resolve(J).then(E=>d.active?E:aU(new f.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn"))):W.then(()=>J)).then(E=>(B&&d._resolve(),d._completion.then(()=>E))).catch(E=>(d._reject(E),aU(E)))})}function tR(F,U,Q){let B=MU(F)?F.slice():[F];for(let R=0;R<Q;++R)B.push(U);return B}function rZ(F){return _(z({},F),{table(U){let Q=F.table(U),{schema:B}=Q,R={},V=[];function d(Z,e,r){let c=NB(Z),h=R[c]=R[c]||[],N=Z==null?0:typeof Z=="string"?1:Z.length,k=e>0,t=_(z({},r),{isVirtual:k,keyTail:e,keyLength:N,extractKey:wV(Z),unique:!k&&r.unique});if(h.push(t),t.isPrimaryKey||V.push(t),N>1){let S=N===2?Z[0]:Z.slice(0,N-1);d(S,e+1,r)}return h.sort((S,a)=>S.keyTail-a.keyTail),t}let l=d(B.primaryKey.keyPath,0,B.primaryKey);R[":id"]=[l];for(let Z of B.indexes)d(Z.keyPath,0,Z);function n(Z){let e=R[NB(Z)];return e&&e[0]}function J(Z,e){return{type:Z.type===1?2:Z.type,lower:tR(Z.lower,Z.lowerOpen?F.MAX_KEY:F.MIN_KEY,e),lowerOpen:!0,upper:tR(Z.upper,Z.upperOpen?F.MIN_KEY:F.MAX_KEY,e),upperOpen:!0}}function W(Z){let e=Z.query.index;return e.isVirtual?_(z({},Z),{query:{index:e,range:J(Z.query.range,e.keyTail)}}):Z}return _(z({},Q),{schema:_(z({},B),{primaryKey:l,indexes:V,getIndexByKeyPath:n}),count(Z){return Q.count(W(Z))},query(Z){return Q.query(W(Z))},openCursor(Z){let{keyTail:e,isVirtual:r,keyLength:c}=Z.query.index;if(!r)return Q.openCursor(Z);function h(N){function k(S){S!=null?N.continue(tR(S,Z.reverse?F.MAX_KEY:F.MIN_KEY,e)):Z.unique?N.continue(N.key.slice(0,c).concat(Z.reverse?F.MIN_KEY:F.MAX_KEY,e)):N.continue()}return Object.create(N,{continue:{value:k},continuePrimaryKey:{value(S,a){N.continuePrimaryKey(tR(S,F.MAX_KEY,e),a)}},primaryKey:{get(){return N.primaryKey}},key:{get(){let S=N.key;return c===1?S[0]:S.slice(0,c)}},value:{get(){return N.value}}})}return Q.openCursor(W(Z)).then(N=>N&&h(N))}})}})}var CZ={stack:"dbcore",name:"VirtualIndexMiddleware",level:1,create:rZ};function $V(F,U,Q,B){return Q=Q||{},B=B||"",SU(F).forEach(R=>{if(!wU(U,R))Q[B+R]=void 0;else{var V=F[R],d=U[R];if(typeof V=="object"&&typeof d=="object"&&V&&d){let l=tV(V),n=tV(d);l!==n?Q[B+R]=U[R]:l==="Object"?$V(V,d,Q,B+R+"."):V!==d&&(Q[B+R]=U[R])}else V!==d&&(Q[B+R]=U[R])}}),SU(U).forEach(R=>{wU(F,R)||(Q[B+R]=U[R])}),Q}function DZ(F,U){return U.type==="delete"?U.keys:U.keys||U.values.map(F.extractKey)}var pZ={stack:"dbcore",name:"HooksMiddleware",level:2,create:F=>_(z({},F),{table(U){let Q=F.table(U),{primaryKey:B}=Q.schema;return _(z({},Q),{mutate(V){let d=u.trans,{deleting:l,creating:n,updating:J}=d.table(U).hook;switch(V.type){case"add":if(n.fire===VU)break;return d._promise("readwrite",()=>W(V),!0);case"put":if(n.fire===VU&&J.fire===VU)break;return d._promise("readwrite",()=>W(V),!0);case"delete":if(l.fire===VU)break;return d._promise("readwrite",()=>W(V),!0);case"deleteRange":if(l.fire===VU)break;return d._promise("readwrite",()=>E(V),!0)}return Q.mutate(V);function W(e){let r=u.trans,c=e.keys||DZ(B,e);if(!c)throw new Error("Keys missing");return e=e.type==="add"||e.type==="put"?_(z({},e),{keys:c}):z({},e),e.type!=="delete"&&(e.values=[...e.values]),e.keys&&(e.keys=[...e.keys]),mZ(Q,e,c).then(h=>{let N=c.map((k,t)=>{let S=h[t],a={onerror:null,onsuccess:null};if(e.type==="delete")l.fire.call(a,k,S,r);else if(e.type==="add"||S===void 0){let T=n.fire.call(a,k,e.values[t],r);k==null&&T!=null&&(k=T,e.keys[t]=k,B.outbound||_U(e.values[t],B.keyPath,k))}else{let T=$V(S,e.values[t]),C=J.fire.call(a,T,k,S,r);if(C){let D=e.values[t];Object.keys(C).forEach(p=>{wU(D,p)?D[p]=C[p]:_U(D,p,C[p])})}}return a});return Q.mutate(e).then(({failures:k,results:t,numFailures:S,lastResult:a})=>{for(let T=0;T<c.length;++T){let C=t?t[T]:c[T],D=N[T];C==null?D.onerror&&D.onerror(k[T]):D.onsuccess&&D.onsuccess(e.type==="put"&&h[T]?e.values[T]:C)}return{failures:k,results:t,numFailures:S,lastResult:a}}).catch(k=>(N.forEach(t=>t.onerror&&t.onerror(k)),Promise.reject(k)))})}function E(e){return Z(e.trans,e.range,1e4)}function Z(e,r,c){return Q.query({trans:e,values:!1,query:{index:B,range:r},limit:c}).then(({result:h})=>W({type:"delete",keys:h,trans:e}).then(N=>N.numFailures>0?Promise.reject(N.failures[0]):h.length<c?{failures:[],numFailures:0,lastResult:void 0}:Z(e,_(z({},r),{lower:h[h.length-1],lowerOpen:!0}),c)))}}})}})};function mZ(F,U,Q){return U.type==="add"?Promise.resolve([]):F.getMany({trans:U.trans,keys:Q,cache:"immutable"})}function rl(F,U,Q){try{if(!U||U.keys.length<F.length)return null;let B=[];for(let R=0,V=0;R<U.keys.length&&V<F.length;++R)vU(U.keys[R],F[V])===0&&(B.push(Q?AQ(U.values[R]):U.values[R]),++V);return B.length===F.length?B:null}catch{return null}}var MZ={stack:"dbcore",level:-1,create:F=>({table:U=>{let Q=F.table(U);return _(z({},Q),{getMany:B=>{if(!B.cache)return Q.getMany(B);let R=rl(B.keys,B.trans._cache,B.cache==="clone");return R?G.resolve(R):Q.getMany(B).then(V=>(B.trans._cache={keys:B.keys,values:B.cache==="clone"?AQ(V):V},V))},mutate:B=>(B.type!=="add"&&(B.trans._cache=null),Q.mutate(B))})}})};function U0(F){return!("from"in F)}var EF=function(F,U){if(this)yU(this,arguments.length?{d:1,from:F,to:arguments.length>1?U:F}:{d:0});else{let Q=new EF;return F&&"d"in F&&yU(Q,F),Q}};aQ(EF.prototype,{add(F){return SR(this,F),this},addKey(F){return EB(this,F,F),this},addKeys(F){return F.forEach(U=>EB(this,U,U)),this},[SV](){return F0(this)}});function EB(F,U,Q){let B=vU(U,Q);if(isNaN(B))return;if(B>0)throw RangeError();if(U0(F))return yU(F,{from:U,to:Q,d:1});let R=F.l,V=F.r;if(vU(Q,F.from)<0)return R?EB(R,U,Q):F.l={from:U,to:Q,d:1,l:null,r:null},Cl(F);if(vU(U,F.to)>0)return V?EB(V,U,Q):F.r={from:U,to:Q,d:1,l:null,r:null},Cl(F);vU(U,F.from)<0&&(F.from=U,F.l=null,F.d=V?V.d+1:1),vU(Q,F.to)>0&&(F.to=Q,F.r=null,F.d=F.l?F.l.d+1:1);let d=!F.r;R&&!F.l&&SR(F,R),V&&d&&SR(F,V)}function SR(F,U){function Q(B,{from:R,to:V,l:d,r:l}){EB(B,R,V),d&&Q(B,d),l&&Q(B,l)}U0(U)||Q(F,U)}function oZ(F,U){let Q=F0(U),B=Q.next();if(B.done)return!1;let R=B.value,V=F0(F),d=V.next(R.from),l=d.value;for(;!B.done&&!d.done;){if(vU(l.from,R.to)<=0&&vU(l.to,R.from)>=0)return!0;vU(R.from,l.from)<0?R=(B=Q.next(l.from)).value:l=(d=V.next(R.from)).value}return!1}function F0(F){let U=U0(F)?null:{s:0,n:F};return{next(Q){let B=arguments.length>0;for(;U;)switch(U.s){case 0:if(U.s=1,B)for(;U.n.l&&vU(Q,U.n.from)<0;)U={up:U,n:U.n.l,s:1};else for(;U.n.l;)U={up:U,n:U.n.l,s:1};case 1:if(U.s=2,!B||vU(Q,U.n.to)<=0)return{value:U.n,done:!1};case 2:if(U.n.r){U.s=3,U={up:U,n:U.n.r,s:0};continue}case 3:U=U.up}return{done:!0}}}}function Cl(F){var U,Q;let B=(((U=F.r)===null||U===void 0?void 0:U.d)||0)-(((Q=F.l)===null||Q===void 0?void 0:Q.d)||0),R=B>1?"r":B<-1?"l":"";if(R){let V=R==="r"?"l":"r",d=z({},F),l=F[R];F.from=l.from,F.to=l.to,F[R]=l[R],d[R]=l[V],F[V]=d,d.d=Dl(d)}F.d=Dl(F)}function Dl({r:F,l:U}){return(F?U?Math.max(F.d,U.d):F.d:U?U.d:0)+1}var iZ={stack:"dbcore",level:0,create:F=>{let U=F.schema.name,Q=new EF(F.MIN_KEY,F.MAX_KEY);return _(z({},F),{table:B=>{let R=F.table(B),{schema:V}=R,{primaryKey:d}=V,{extractKey:l,outbound:n}=d,J=_(z({},R),{mutate:Z=>{let e=Z.trans,r=e.mutatedParts||(e.mutatedParts={}),c=T=>{let C=`idb://${U}/${B}/${T}`;return r[C]||(r[C]=new EF)},h=c(""),N=c(":dels"),{type:k}=Z,[t,S]=Z.type==="deleteRange"?[Z.range]:Z.type==="delete"?[Z.keys]:Z.values.length<50?[[],Z.values]:[],a=Z.trans._cache;return R.mutate(Z).then(T=>{if(MU(t)){k!=="delete"&&(t=T.results),h.addKeys(t);let C=rl(t,a);!C&&k!=="add"&&N.addKeys(t),(C||S)&&sZ(c,V,C,S)}else if(t){let C={from:t.lower,to:t.upper};N.add(C),h.add(C)}else h.add(Q),N.add(Q),V.indexes.forEach(C=>c(C.name).add(Q));return T})}}),W=({query:{index:Z,range:e}})=>{var r,c;return[Z,new EF((r=e.lower)!==null&&r!==void 0?r:F.MIN_KEY,(c=e.upper)!==null&&c!==void 0?c:F.MAX_KEY)]},E={get:Z=>[d,new EF(Z.key)],getMany:Z=>[d,new EF().addKeys(Z.keys)],count:W,query:W,openCursor:W};return SU(E).forEach(Z=>{J[Z]=function(e){let{subscr:r}=u;if(r){let c=S=>{let a=`idb://${U}/${B}/${S}`;return r[a]||(r[a]=new EF)},h=c(""),N=c(":dels"),[k,t]=E[Z](e);if(c(k.name||"").add(t),!k.isPrimaryKey)if(Z==="count")N.add(Q);else{let S=Z==="query"&&n&&e.values&&R.query(_(z({},e),{values:!1}));return R[Z].apply(this,arguments).then(a=>{if(Z==="query"){if(n&&e.values)return S.then(({result:C})=>(h.addKeys(C),a));let T=e.values?a.result.map(l):a.result;e.values?h.addKeys(T):N.addKeys(T)}else if(Z==="openCursor"){let T=a,C=e.values;return T&&Object.create(T,{key:{get(){return N.addKey(T.primaryKey),T.key}},primaryKey:{get(){let D=T.primaryKey;return N.addKey(D),D}},value:{get(){return C&&h.addKey(T.primaryKey),T.value}}})}return a})}}return R[Z].apply(this,arguments)}}),J}})}};function sZ(F,U,Q,B){function R(V){let d=F(V.name||"");function l(J){return J!=null?V.extractKey(J):null}let n=J=>V.multiEntry&&MU(J)?J.forEach(W=>d.addKey(W)):d.addKey(J);(Q||B).forEach((J,W)=>{let E=Q&&l(Q[W]),Z=B&&l(B[W]);vU(E,Z)!==0&&(E!=null&&n(E),Z!=null&&n(Z))})}U.indexes.forEach(R)}var tF=class{constructor(U,Q){this._middlewares={},this.verno=0;let B=tF.dependencies;this._options=Q=z({addons:tF.addons,autoOpen:!0,indexedDB:B.indexedDB,IDBKeyRange:B.IDBKeyRange},Q),this._deps={indexedDB:Q.indexedDB,IDBKeyRange:Q.IDBKeyRange};let{addons:R}=Q;this._dbSchema={},this._versions=[],this._storeNames=[],this._allTables={},this.idbdb=null,this._novip=this;let V={dbOpenError:null,isBeingOpened:!1,onReadyBeingFired:null,openComplete:!1,dbReadyResolve:VU,dbReadyPromise:null,cancelOpen:VU,openCanceller:null,autoSchema:!0,PR1398_maxLoop:3};V.dbReadyPromise=new G(d=>{V.dbReadyResolve=d}),V.openCanceller=new G((d,l)=>{V.cancelOpen=l}),this._state=V,this.name=U,this.on=lB(this,"populate","blocked","versionchange","close",{ready:[hV,VU]}),this.on.ready.subscribe=bd(this.on.ready.subscribe,d=>(l,n)=>{tF.vip(()=>{let J=this._state;if(J.openComplete)J.dbOpenError||G.resolve().then(l),n&&d(l);else if(J.onReadyBeingFired)J.onReadyBeingFired.push(l),n&&d(l);else{d(l);let W=this;n||d(function E(){W.on.ready.unsubscribe(l),W.on.ready.unsubscribe(E)})}})}),this.Collection=KW(this),this.Table=LW(this),this.Transaction=UZ(this),this.Version=SZ(this),this.WhereClause=$W(this),this.on("versionchange",d=>{d.newVersion>0?console.warn(`Another connection wants to upgrade database '${this.name}'. Closing db now to resume the upgrade.`):console.warn(`Another connection wants to delete database '${this.name}'. Closing db now to resume the delete request.`),this.close()}),this.on("blocked",d=>{!d.newVersion||d.newVersion<d.oldVersion?console.warn(`Dexie.delete('${this.name}') was blocked`):console.warn(`Upgrade '${this.name}' blocked by other connection holding version ${d.oldVersion/10}`)}),this._maxKey=ZB(Q.IDBKeyRange),this._createTransaction=(d,l,n,J)=>new this.Transaction(d,l,n,this._options.chromeTransactionDurability,J),this._fireOnBlocked=d=>{this.on("blocked").fire(d),dB.filter(l=>l.name===this.name&&l!==this&&!l._state.vcFired).map(l=>l.on("versionchange").fire(d))},this.use(CZ),this.use(pZ),this.use(iZ),this.use(MZ),this.vip=Object.create(this,{_vip:{value:!0}}),R.forEach(d=>d(this))}version(U){if(isNaN(U)||U<.1)throw new f.Type("Given version is not a positive number");if(U=Math.round(U*10)/10,this.idbdb||this._state.isBeingOpened)throw new f.Schema("Cannot add version when database is open");this.verno=Math.max(this.verno,U);let Q=this._versions;var B=Q.filter(R=>R._cfg.version===U)[0];return B||(B=new this.Version(U),Q.push(B),Q.sort(lZ),B.stores({}),this._state.autoSchema=!1,B)}_whenReady(U){return this.idbdb&&(this._state.openComplete||u.letThrough||this._vip)?U():new G((Q,B)=>{if(this._state.openComplete)return B(new f.DatabaseClosed(this._state.dbOpenError));if(!this._state.isBeingOpened){if(!this._options.autoOpen){B(new f.DatabaseClosed);return}this.open().catch(VU)}this._state.dbReadyPromise.then(Q,B)}).then(U)}use({stack:U,create:Q,level:B,name:R}){R&&this.unuse({stack:U,name:R});let V=this._middlewares[U]||(this._middlewares[U]=[]);return V.push({stack:U,create:Q,level:B??10,name:R}),V.sort((d,l)=>d.level-l.level),this}unuse({stack:U,name:Q,create:B}){return U&&this._middlewares[U]&&(this._middlewares[U]=this._middlewares[U].filter(R=>B?R.create!==B:Q?R.name!==Q:!1)),this}open(){return hZ(this)}_close(){let U=this._state,Q=dB.indexOf(this);if(Q>=0&&dB.splice(Q,1),this.idbdb){try{this.idbdb.close()}catch{}this._novip.idbdb=null}U.dbReadyPromise=new G(B=>{U.dbReadyResolve=B}),U.openCanceller=new G((B,R)=>{U.cancelOpen=R})}close(){this._close();let U=this._state;this._options.autoOpen=!1,U.dbOpenError=new f.DatabaseClosed,U.isBeingOpened&&U.cancelOpen(U.dbOpenError)}delete(){let U=arguments.length>0,Q=this._state;return new G((B,R)=>{let V=()=>{this.close();var d=this._deps.indexedDB.deleteDatabase(this.name);d.onsuccess=WU(()=>{aZ(this._deps,this.name),B()}),d.onerror=BF(R),d.onblocked=this._fireOnBlocked};if(U)throw new f.InvalidArgument("Arguments not allowed in db.delete()");Q.isBeingOpened?Q.dbReadyPromise.then(V):V()})}backendDB(){return this.idbdb}isOpen(){return this.idbdb!==null}hasBeenClosed(){let U=this._state.dbOpenError;return U&&U.name==="DatabaseClosed"}hasFailed(){return this._state.dbOpenError!==null}dynamicallyOpened(){return this._state.autoSchema}get tables(){return SU(this._allTables).map(U=>this._allTables[U])}transaction(){let U=cZ.apply(this,arguments);return this._transaction.apply(this,U)}_transaction(U,Q,B){let R=u.trans;(!R||R.db!==this||U.indexOf("!")!==-1)&&(R=null);let V=U.indexOf("?")!==-1;U=U.replace("!","").replace("?","");let d,l;try{if(l=Q.map(J=>{var W=J instanceof this.Table?J.name:J;if(typeof W!="string")throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");return W}),U=="r"||U===bV)d=bV;else if(U=="rw"||U==XV)d=XV;else throw new f.InvalidArgument("Invalid transaction mode: "+U);if(R){if(R.mode===bV&&d===XV)if(V)R=null;else throw new f.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");R&&l.forEach(J=>{if(R&&R.storeNames.indexOf(J)===-1)if(V)R=null;else throw new f.SubTransaction("Table "+J+" not included in parent transaction.")}),V&&R&&!R.active&&(R=null)}}catch(J){return R?R._promise(null,(W,E)=>{E(J)}):aU(J)}let n=cl.bind(null,this,d,l,R,B);return R?R._promise(d,n,"lock"):u.trans?DQ(u.transless,()=>this._whenReady(n)):this._whenReady(n)}table(U){if(!wU(this._allTables,U))throw new f.InvalidTable(`Table ${U} does not exist`);return this._allTables[U]}},YZ=typeof Symbol!="undefined"&&"observable"in Symbol?Symbol.observable:"@@observable",pl=class{constructor(U){this._subscribe=U}subscribe(U,Q,B){return this._subscribe(!U||typeof U=="function"?{next:U,error:Q,complete:B}:U)}[YZ](){return this}};function ml(F,U){return SU(U).forEach(Q=>{let B=F[Q]||(F[Q]=new EF);SR(B,U[Q])}),F}function yZ(F){return new pl(U=>{let Q=eV(F);function B(e){Q&&CQ();let r=()=>mF(F,{subscr:e,trans:null}),c=u.trans?DQ(u.transless,r):r();return Q&&c.then(ZF,ZF),c}let R=!1,V={},d={},l={get closed(){return R},unsubscribe:()=>{R=!0,sF.storagemutated.unsubscribe(E)}};U.start&&U.start(l);let n=!1,J=!1;function W(){return SU(d).some(e=>V[e]&&oZ(V[e],d[e]))}let E=e=>{ml(V,e),W()&&Z()},Z=()=>{if(n||R)return;V={};let e={},r=B(e);J||(sF(WB,E),J=!0),n=!0,Promise.resolve(r).then(c=>{n=!1,!R&&(W()?Z():(V={},d=e,U.next&&U.next(c)))},c=>{n=!1,U.error&&U.error(c),l.unsubscribe()})};return Z(),l})}var Q0;try{Q0={indexedDB:nU.indexedDB||nU.mozIndexedDB||nU.webkitIndexedDB||nU.msIndexedDB,IDBKeyRange:nU.IDBKeyRange||nU.webkitIDBKeyRange}}catch{Q0={indexedDB:null,IDBKeyRange:null}}var qF=tF;aQ(qF,_(z({},PB),{delete(F){return new qF(F,{addons:[]}).delete()},exists(F){return new qF(F,{addons:[]}).open().then(U=>(U.close(),!0)).catch("NoSuchDatabaseError",()=>!1)},getDatabaseNames(F){try{return eZ(qF.dependencies).then(F)}catch{return aU(new f.MissingAPI)}},defineClass(){function F(U){yU(this,U)}return F},ignoreTransaction(F){return u.trans?DQ(u.transless,F):F()},vip:qV,async:function(F){return function(){try{var U=AV(F.apply(this,arguments));return!U||typeof U.then!="function"?G.resolve(U):U}catch(Q){return aU(Q)}}},spawn:function(F,U,Q){try{var B=AV(F.apply(Q,U||[]));return!B||typeof B.then!="function"?G.resolve(B):B}catch(R){return aU(R)}},currentTransaction:{get:()=>u.trans||null},waitFor:function(F,U){let Q=G.resolve(typeof F=="function"?qF.ignoreTransaction(F):F).timeout(U||6e4);return u.trans?u.trans.waitFor(Q):Q},Promise:G,debug:{get:()=>QF,set:F=>{xd(F,F==="dexie"?()=>!0:dl)}},derive:TQ,extend:yU,props:aQ,override:bd,Events:lB,on:sF,liveQuery:yZ,extendObservabilitySet:ml,getByKeyPath:JF,setByKeyPath:_U,delByKeyPath:SW,shallowClone:Hd,deepClone:AQ,getObjectDiff:$V,cmp:vU,asap:Xd,minKey:GV,addons:[],connections:dB,errnames:TV,dependencies:Q0,semVer:Rl,version:Rl.split(".").map(F=>parseInt(F)).reduce((F,U,Q)=>F+U/Math.pow(10,Q*2))}));qF.maxKey=ZB(qF.dependencies.IDBKeyRange);typeof dispatchEvent!="undefined"&&typeof addEventListener!="undefined"&&(sF(WB,F=>{if(!SF){let U;lR?(U=document.createEvent("CustomEvent"),U.initCustomEvent(iF,!0,!0,F)):U=new CustomEvent(iF,{detail:F}),SF=!0,dispatchEvent(U),SF=!1}}),addEventListener(iF,({detail:F})=>{SF||eR(F)}));function eR(F){let U=SF;try{SF=!0,sF.storagemutated.fire(F)}finally{SF=U}}var SF=!1;if(typeof BroadcastChannel!="undefined"){let F=new BroadcastChannel(iF);sF(WB,U=>{SF||F.postMessage(U)}),F.onmessage=U=>{U.data&&eR(U.data)}}else if(typeof self!="undefined"&&typeof navigator!="undefined"){sF(WB,U=>{try{SF||(typeof localStorage!="undefined"&&localStorage.setItem(iF,JSON.stringify({trig:Math.random(),changedParts:U})),typeof self.clients=="object"&&[...self.clients.matchAll({includeUncontrolled:!0})].forEach(Q=>Q.postMessage({type:iF,changedParts:U})))}catch{}}),typeof addEventListener!="undefined"&&addEventListener("storage",U=>{if(U.key===iF){let Q=JSON.parse(U.newValue);Q&&eR(Q.changedParts)}});let F=self.document&&navigator.serviceWorker;F&&F.addEventListener("message",vZ)}function vZ({data:F}){F&&F.type===iF&&eR(F.changedParts)}G.rejectionMapper=DW;xd(QF,dl);var RF=class extends tF{constructor(){super(RF.dbName);this.version(RF.dbVersion).stores({searchHistory:"++id",minisearch:"date"})}static async clearOldDatabases(){let U=(await indexedDB.databases()).filter(Q=>Q.name===RF.dbName&&Q.version!==RF.dbVersion*10);if(U.length){console.log("Omnisearch - Those IndexedDb databases will be deleted:");for(let Q of U)Q.name&&indexedDB.deleteDatabase(Q.name)}}static getInstance(){return RF.instance||(RF.instance=new RF),RF.instance}async clearCache(){await this.minisearch.clear()}},MQ=RF;MQ.dbVersion=8,MQ.dbName="omnisearch/cache/"+app.appId;var fU=MQ.getInstance();var AF=fB(!1),B0=class extends QU.PluginSettingTab{constructor(U){super(app,U);this.plugin=U,AF.subscribe(async Q=>{O.showExcerpt=Q,await HU(this.plugin)})}display(){let{containerEl:U}=this;U.empty(),U.createEl("h2",{text:"Omnisearch"});let Q=U.createDiv();if(Q.innerHTML=`
        <iframe src="https://github.com/sponsors/scambier/button" title="Sponsor scambier" height="35" width="116" style="border: 0;"></iframe>
        <a href='https://ko-fi.com/B0B6LQ2C' target='_blank'><img height='36' style='border:0px;height:36px;' src='https://cdn.ko-fi.com/cdn/kofi2.png?v=3' border='0' alt='Buy Me a Coffee at ko-fi.com' /></a> 
    `,new QU.Setting(U).setName("Indexing").setHeading(),!QU.Platform.isMobileApp){let d=new DocumentFragment;d.createSpan({},l=>{l.innerHTML=`Omnisearch will include PDFs in search results.<br>
        \u26A0\uFE0F PDFs first need to be processed. This can take anywhere from a few seconds to 2 minutes, then the resulting text is cached.</li>
        <strong style="color: var(--text-accent)">Needs a restart to fully take effect.</strong>`}),new QU.Setting(U).setName("PDF Indexing").setDesc(d).addToggle(l=>l.setValue(O.PDFIndexing).onChange(async n=>{O.PDFIndexing=n,await HU(this.plugin)}))}if(!QU.Platform.isMobileApp){let d=new DocumentFragment;d.createSpan({},l=>{l.innerHTML=`Omnisearch will use <a href="https://en.wikipedia.org/wiki/Tesseract_(software)">Tesseract</a> to index images from their text.
        <ul>
          <li>Only English is supported at the moment.</li>
          <li>Not all images can be correctly read by the OCR, this feature works best with scanned documents.</li>
        </ul>      
        <strong style="color: var(--text-accent)">Needs a restart to fully take effect.</strong>`}),new QU.Setting(U).setName("BETA - Images Indexing").setDesc(d).addToggle(l=>l.setValue(O.imagesIndexing).onChange(async n=>{O.imagesIndexing=n,await HU(this.plugin)}))}let B=new DocumentFragment;B.createSpan({},d=>{d.innerHTML=`In addition to standard <code>md</code> files, Omnisearch can also index other <strong style="color: var(--text-accent)">plaintext</strong> files.<br/>
      Add extensions separated by a space, without the dot. Example: "<code>txt org</code>".<br />
      \u26A0\uFE0F <span style="color: var(--text-accent)">Using extensions of non-plaintext files (like .docx or .pptx) WILL cause crashes,
      because Omnisearch will try to index their content.</span><br />
      <strong style="color: var(--text-accent)">Needs a restart to fully take effect.</strong>`}),new QU.Setting(U).setName("Additional files to index").setDesc(B).addText(d=>{d.setValue(O.indexedFileTypes.join(" ")).setPlaceholder("Example: txt org").onChange(async l=>{O.indexedFileTypes=l.split(" "),await HU(this.plugin)})}),new QU.Setting(U).setName("Behavior").setHeading(),new QU.Setting(U).setName(`Respect Obsidian's "Excluded Files"`).setDesc(`By default, fFiles that are in Obsidian's "Options > Files & Links > Excluded Files" list are downranked in results.
        Enable this option to completely hide them`).addToggle(d=>d.setValue(O.hideExcluded).onChange(async l=>{O.hideExcluded=l,await HU(this.plugin)}));let R=new DocumentFragment;R.createSpan({},d=>{d.innerHTML=`Normalize diacritics in search terms. Words like "br\xFBl\xE9e" or "\u017Elu\u0165ou\u010Dk\xFD" will be indexed as "brulee" and "zlutoucky".<br/>
        \u26A0\uFE0F<span style="color: var(--text-accent)">You probably should NOT disable this.</span><br>
        <strong style="color: var(--text-accent)">Needs a restart to fully take effect.</strong>
        `}),new QU.Setting(U).setName("Ignore diacritics").setDesc(R).addToggle(d=>d.setValue(O.ignoreDiacritics).onChange(async l=>{O.ignoreDiacritics=l,await HU(this.plugin)})),new QU.Setting(U).setName("Simpler search").setDesc("Enable this if Obsidian often freezes while making searches. This will return more strict results.").addToggle(d=>d.setValue(O.simpleSearch).onChange(async l=>{O.simpleSearch=l,await HU(this.plugin)})),new QU.Setting(U).setName("User Interface").setHeading(),new QU.Setting(U).setName("Show ribbon button").setDesc("Add a button on the sidebar to open the Vault search modal.").addToggle(d=>d.setValue(O.ribbonIcon).onChange(async l=>{O.ribbonIcon=l,await HU(this.plugin),l?this.plugin.addRibbonButton():this.plugin.removeRibbonButton()})),new QU.Setting(U).setName("Show excerpts").setDesc("Shows the contextual part of the note that matches the search. Disable this to only show filenames in results.").addToggle(d=>d.setValue(O.showExcerpt).onChange(async l=>{AF.set(l)})),new QU.Setting(U).setName("Render line return in excerpts").setDesc("Activate this option to render line returns in result excerpts.").addToggle(d=>d.setValue(O.renderLineReturnInExcerpts).onChange(async l=>{O.renderLineReturnInExcerpts=l,await HU(this.plugin)})),new QU.Setting(U).setName("Show previous query results").setDesc("Re-executes the previous query when opening Omnisearch.").addToggle(d=>d.setValue(O.showPreviousQueryResults).onChange(async l=>{O.showPreviousQueryResults=l,await HU(this.plugin)}));let V=new DocumentFragment;if(V.createSpan({},d=>{d.innerHTML=`Shows a button next to the search input, to create a note.
        Acts the same as the <code>shift \u21B5</code> shortcut, can be useful for mobile device users.`}),new QU.Setting(U).setName('Show "Create note" button').setDesc(V).addToggle(d=>d.setValue(O.showCreateButton).onChange(async l=>{O.showCreateButton=l,await HU(this.plugin)})),new QU.Setting(U).setName("Hide full path in results list").setDesc("In the search results, only show the note name, without the full path.").addToggle(d=>d.setValue(O.showShortName).onChange(async l=>{O.showShortName=l,await HU(this.plugin)})),new QU.Setting(U).setName("Highlight matching words in results").setDesc("Will highlight matching results when enabled. See README for more customization options.").addToggle(d=>d.setValue(O.hightlight).onChange(async l=>{O.hightlight=l,await HU(this.plugin)})),new QU.Setting(U).setName("Results weighting").setHeading(),new QU.Setting(U).setName(`File name & declared aliases (default: ${oQ.weightBasename})`).addSlider(d=>this.weightSlider(d,"weightBasename")),new QU.Setting(U).setName(`Headings level 1 (default: ${oQ.weightH1})`).addSlider(d=>this.weightSlider(d,"weightH1")),new QU.Setting(U).setName(`Headings level 2 (default: ${oQ.weightH2})`).addSlider(d=>this.weightSlider(d,"weightH2")),new QU.Setting(U).setName(`Headings level 3 (default: ${oQ.weightH3})`).addSlider(d=>this.weightSlider(d,"weightH3")),!QU.Platform.isIosApp){new QU.Setting(U).setName("Danger Zone").setHeading();let d=new DocumentFragment;d.createSpan({},l=>{l.innerHTML=`Erase all Omnisearch cache data.
      Use this if Omnisearch results are inconsistent, missing, or appear outdated.<br>
      <strong style="color: var(--text-accent)">Needs a restart to fully take effect.</strong>`}),new QU.Setting(U).setName("Clear cache data").setDesc(d).addButton(l=>{l.setButtonText("Clear cache"),l.onClick(async()=>{await fU.clearCache(),new QU.Notice("Omnisearch - Cache cleared. Please restart Obsidian.")})})}}weightSlider(U,Q){U.setLimits(1,3,.1).setValue(O[Q]).setDynamicTooltip().onChange(B=>{O[Q]=B,HU(this.plugin)})}},oQ={hideExcluded:!1,ignoreDiacritics:!0,indexedFileTypes:[],PDFIndexing:!1,imagesIndexing:!1,showShortName:!1,ribbonIcon:!0,showExcerpt:!0,renderLineReturnInExcerpts:!0,showCreateButton:!1,hightlight:!0,showPreviousQueryResults:!0,simpleSearch:!1,weightBasename:2,weightH1:1.5,weightH2:1.3,weightH3:1.1,welcomeMessage:""},O=Object.assign({},oQ);async function Ml(F){O=Object.assign({},oQ,await F.loadData()),AF.set(O.showExcerpt)}async function HU(F){await F.saveData(O)}var ol=/^"|"$|^'|'$/g,il=/[\u4e00-\u9fa5]/,sl=100,tB=300,Yl=`suggestion-highlight omnisearch-highlight ${O.hightlight?"omnisearch-default-highlight":""}`,$=new ZV,kR={ToggleExcerpts:"toggle-excerpts"},KU=(V=>(V[V.Done=0]="Done",V[V.LoadingCache=1]="LoadingCache",V[V.ReadingFiles=2]="ReadingFiles",V[V.IndexingFiles=3]="IndexingFiles",V[V.WritingCache=4]="WritingCache",V))(KU||{});var YF=fB(0),yl=!1;function R0(F){yl=F}function vl(){return yl}function aR(){return app.plugins.plugins["cm-chs-patch"]}var Gl=/[|\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u;var lJ=XU(require("obsidian"));var qU=XU(require("obsidian"));var Xl=XU(require("crypto")),Ol=XU(bl());function yF(F){return`<span class="${Yl}">${F}</span>`}function GZ(F){return F.replaceAll("&","&amp;").replaceAll("<","&lt;").replaceAll(">","&gt;").replaceAll('"',"&quot;").replaceAll("'","&#039;")}function bZ(F){return F.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&")}function vF(F){if(!F.length)return/^$/g;let U=F.map(B=>(aR()?"":"\\b")+bZ(B)).join("|");return new RegExp(`(${U})`,"gi")}function TR(F,U){return F.headings?.filter(Q=>Q.level===U).map(Q=>Q.heading)??[]}function hR(F,U){return(F+U)%U}function cR(F,U){try{let Q=U??-1,B=Math.max(0,Q-sl),R=Math.min(F.length,Q+tB);if(Q>-1?F=(B>0?"\u2026":"")+F.slice(B,R).trim()+(R<F.length-1?"\u2026":""):F=F.slice(0,tB),O.renderLineReturnInExcerpts){let V=new RegExp(/(?:\r\n|\r|\n)/g);F=F.split(V).filter(l=>l).join(`
`);let d=F.lastIndexOf(`
`,Q-B);d>0&&(F=F.slice(d))}return F=GZ(F),O.renderLineReturnInExcerpts&&(F=F.trim().replaceAll(`
`,"<br>")),F}catch(Q){return new qU.Notice("Omnisearch - Error while creating excerpt, see developer console"),console.error("Omnisearch - Error while creating excerpt"),console.error(Q),""}}function Hl(F){return F.replace(ol,"")}function d0(F){return F.replace(/(\*|_)+(.+?)(\*|_)+/g,(U,Q,B)=>B)}function zl(F){return F?.frontmatter?(0,qU.parseFrontMatterAliases)(F.frontmatter)??[]:[]}function ul(F){return F?(0,qU.getAllTags)(F)??[]:[]}function $F(F){return F.normalize("NFD").replace(/\p{Diacritic}/gu,"")}function xl(){return qU.Platform.isMacOS?"\u2318":"ctrl"}function eB(F){return l0(F)||!qU.Platform.isMobileApp&&O.PDFIndexing&&aB(F)||!qU.Platform.isMobileApp&&O.imagesIndexing&&kB(F)}function kB(F){return F.endsWith(".png")||F.endsWith(".jpg")||F.endsWith(".jpeg")}function aB(F){return F.endsWith(".pdf")}function l0(F){return XZ().some(U=>F.endsWith(`.${U}`))}function XZ(){return[...O.indexedFileTypes,"md"]}function wl(F){let U=F.split(".");return U[U.length-1]??""}function Ll(F){return qU.Platform.isMobileApp?(0,Ol.md5)(F.toString()):(0,Xl.createHash)("md5").update(F).digest("hex")}function jl(F,U){for(var Q=[],B=0,R=F.length;B<R;)Q.push(F.slice(B,B+=U));return Q}var TB=XU(require("obsidian")),Il=XU(require("crypto"));function OZ(F,U,Q){var B=U===void 0?null:U,R=function(n,J){var W=atob(n);if(J){for(var E=new Uint8Array(W.length),Z=0,e=W.length;Z<e;++Z)E[Z]=W.charCodeAt(Z);return String.fromCharCode.apply(null,new Uint16Array(E.buffer))}return W}(F,Q!==void 0&&Q),V=R.indexOf(`
`,10)+1,d=R.substring(V)+(B?"//# sourceMappingURL="+B:""),l=new Blob([d],{type:"application/javascript"});return URL.createObjectURL(l)}var fl,Kl,gl,n0,HZ=(fl="",Kl=null,gl=!1,function(F){return n0=n0||OZ(fl,Kl,gl),new Worker(n0,F)}),Pl=(typeof globalThis!="undefined"||typeof window!="undefined"||typeof global!="undefined"&&global,{exports:{}});function _l(F){return TB.Platform.isMobileApp?Pl.exports.md5(F.toString()):(0,Il.createHash)("md5").update(F).digest("hex")}Pl.exports=function(F){var U={};function Q(B){if(U[B])return U[B].exports;var R=U[B]={i:B,l:!1,exports:{}};return F[B].call(R.exports,R,R.exports,Q),R.l=!0,R.exports}return Q.m=F,Q.c=U,Q.d=function(B,R,V){Q.o(B,R)||Object.defineProperty(B,R,{enumerable:!0,get:V})},Q.r=function(B){typeof Symbol!="undefined"&&Symbol.toStringTag&&Object.defineProperty(B,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(B,"__esModule",{value:!0})},Q.t=function(B,R){if(1&R&&(B=Q(B)),8&R||4&R&&typeof B=="object"&&B&&B.__esModule)return B;var V=Object.create(null);if(Q.r(V),Object.defineProperty(V,"default",{enumerable:!0,value:B}),2&R&&typeof B!="string")for(var d in B)Q.d(V,d,function(l){return B[l]}.bind(null,d));return V},Q.n=function(B){var R=B&&B.__esModule?function(){return B.default}:function(){return B};return Q.d(R,"a",R),R},Q.o=function(B,R){return Object.prototype.hasOwnProperty.call(B,R)},Q.p="",Q(Q.s=0)}([function(F,U,Q){Q.r(U),Q.d(U,"md5",function(){return c});var B="0123456789abcdef".split(""),R=function(h){for(var N="",k=0;k<4;k++)N+=B[h>>8*k+4&15]+B[h>>8*k&15];return N},V=function(h){for(var N=h.length,k=0;k<N;k++)h[k]=R(h[k]);return h.join("")},d=function(h,N){return h+N&4294967295},l=function(h,N,k,t,S,a,T){return function(C,D,p){return d(C<<D|C>>>32-D,p)}(N=function(C,D,p,o){return d(d(D,C),d(p,o))}(h,N,t,a),S,k)},n=function(h,N,k,t,S,a,T,C){return l(k&t|~k&S,N,k,a,T,C)},J=function(h,N,k,t,S,a,T,C){return l(k&S|t&~S,N,k,a,T,C)},W=function(h,N,k,t,S,a,T,C){return l(k^t^S,N,k,a,T,C)},E=function(h,N,k,t,S,a,T,C){return l(t^(k|~S),N,k,a,T,C)},Z=function(h,N,k){k===void 0&&(k=d);var t=h[0],S=h[1],a=h[2],T=h[3],C=n.bind(null,k);t=C(t,S,a,T,N[0],7,-680876936),T=C(T,t,S,a,N[1],12,-389564586),a=C(a,T,t,S,N[2],17,606105819),S=C(S,a,T,t,N[3],22,-1044525330),t=C(t,S,a,T,N[4],7,-176418897),T=C(T,t,S,a,N[5],12,1200080426),a=C(a,T,t,S,N[6],17,-1473231341),S=C(S,a,T,t,N[7],22,-45705983),t=C(t,S,a,T,N[8],7,1770035416),T=C(T,t,S,a,N[9],12,-1958414417),a=C(a,T,t,S,N[10],17,-42063),S=C(S,a,T,t,N[11],22,-1990404162),t=C(t,S,a,T,N[12],7,1804603682),T=C(T,t,S,a,N[13],12,-40341101),a=C(a,T,t,S,N[14],17,-1502002290),S=C(S,a,T,t,N[15],22,1236535329);var D=J.bind(null,k);t=D(t,S,a,T,N[1],5,-165796510),T=D(T,t,S,a,N[6],9,-1069501632),a=D(a,T,t,S,N[11],14,643717713),S=D(S,a,T,t,N[0],20,-373897302),t=D(t,S,a,T,N[5],5,-701558691),T=D(T,t,S,a,N[10],9,38016083),a=D(a,T,t,S,N[15],14,-660478335),S=D(S,a,T,t,N[4],20,-405537848),t=D(t,S,a,T,N[9],5,568446438),T=D(T,t,S,a,N[14],9,-1019803690),a=D(a,T,t,S,N[3],14,-187363961),S=D(S,a,T,t,N[8],20,1163531501),t=D(t,S,a,T,N[13],5,-1444681467),T=D(T,t,S,a,N[2],9,-51403784),a=D(a,T,t,S,N[7],14,1735328473),S=D(S,a,T,t,N[12],20,-1926607734);var p=W.bind(null,k);t=p(t,S,a,T,N[5],4,-378558),T=p(T,t,S,a,N[8],11,-2022574463),a=p(a,T,t,S,N[11],16,1839030562),S=p(S,a,T,t,N[14],23,-35309556),t=p(t,S,a,T,N[1],4,-1530992060),T=p(T,t,S,a,N[4],11,1272893353),a=p(a,T,t,S,N[7],16,-155497632),S=p(S,a,T,t,N[10],23,-1094730640),t=p(t,S,a,T,N[13],4,681279174),T=p(T,t,S,a,N[0],11,-358537222),a=p(a,T,t,S,N[3],16,-722521979),S=p(S,a,T,t,N[6],23,76029189),t=p(t,S,a,T,N[9],4,-640364487),T=p(T,t,S,a,N[12],11,-421815835),a=p(a,T,t,S,N[15],16,530742520),S=p(S,a,T,t,N[2],23,-995338651);var o=E.bind(null,k);t=o(t,S,a,T,N[0],6,-198630844),T=o(T,t,S,a,N[7],10,1126891415),a=o(a,T,t,S,N[14],15,-1416354905),S=o(S,a,T,t,N[5],21,-57434055),t=o(t,S,a,T,N[12],6,1700485571),T=o(T,t,S,a,N[3],10,-1894986606),a=o(a,T,t,S,N[10],15,-1051523),S=o(S,a,T,t,N[1],21,-2054922799),t=o(t,S,a,T,N[8],6,1873313359),T=o(T,t,S,a,N[15],10,-30611744),a=o(a,T,t,S,N[6],15,-1560198380),S=o(S,a,T,t,N[13],21,1309151649),t=o(t,S,a,T,N[4],6,-145523070),T=o(T,t,S,a,N[11],10,-1120210379),a=o(a,T,t,S,N[2],15,718787259),S=o(S,a,T,t,N[9],21,-343485551),h[0]=k(t,h[0]),h[1]=k(S,h[1]),h[2]=k(a,h[2]),h[3]=k(T,h[3])},e=function(h){for(var N=[],k=0;k<64;k+=4)N[k>>2]=h.charCodeAt(k)+(h.charCodeAt(k+1)<<8)+(h.charCodeAt(k+2)<<16)+(h.charCodeAt(k+3)<<24);return N},r=function(h,N){var k,t=h.length,S=[1732584193,-271733879,-1732584194,271733878];for(k=64;k<=t;k+=64)Z(S,e(h.substring(k-64,k)),N);var a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],T=(h=h.substring(k-64)).length;for(k=0;k<T;k++)a[k>>2]|=h.charCodeAt(k)<<(k%4<<3);if(a[k>>2]|=128<<(k%4<<3),k>55)for(Z(S,a,N),k=16;k--;)a[k]=0;return a[14]=8*t,Z(S,a,N),S};function c(h){var N;return V(r("hello"))!=="5d41402abc4b2a76b9719d911017c592"&&(N=function(k,t){var S=(65535&k)+(65535&t);return(k>>16)+(t>>16)+(S>>16)<<16|65535&S}),V(r(h,N))}}]);var JU=typeof globalThis!="undefined"?globalThis:typeof self!="undefined"?self:typeof window!="undefined"?window:global,eU=Object.keys,iU=Array.isArray;function GU(F,U){return typeof U!="object"||eU(U).forEach(function(Q){F[Q]=U[Q]}),F}typeof Promise=="undefined"||JU.Promise||(JU.Promise=Promise);var hB=Object.getPrototypeOf,zZ={}.hasOwnProperty;function jU(F,U){return zZ.call(F,U)}function iQ(F,U){typeof U=="function"&&(U=U(hB(F))),(typeof Reflect=="undefined"?eU:Reflect.ownKeys)(U).forEach(Q=>{eF(F,Q,U[Q])})}var ql=Object.defineProperty;function eF(F,U,Q,B){ql(F,U,GU(Q&&jU(Q,"get")&&typeof Q.get=="function"?{get:Q.get,set:Q.set,configurable:!0}:{value:Q,configurable:!0,writable:!0},B))}function sQ(F){return{from:function(U){return F.prototype=Object.create(U.prototype),eF(F.prototype,"constructor",F),{extend:iQ.bind(null,F.prototype)}}}}var uZ=Object.getOwnPropertyDescriptor;function J0(F,U){let Q;return uZ(F,U)||(Q=hB(F))&&J0(Q,U)}var xZ=[].slice;function rR(F,U,Q){return xZ.call(F,U,Q)}function Al(F,U){return U(F)}function cB(F){if(!F)throw new Error("Assertion Failed")}function $l(F){JU.setImmediate?setImmediate(F):setTimeout(F,0)}function Un(F,U){return F.reduce((Q,B,R)=>{var V=U(B,R);return V&&(Q[V[0]]=V[1]),Q},{})}function kF(F,U){if(jU(F,U))return F[U];if(!U)return F;if(typeof U!="string"){for(var Q=[],B=0,R=U.length;B<R;++B){var V=kF(F,U[B]);Q.push(V)}return Q}var d=U.indexOf(".");if(d!==-1){var l=F[U.substr(0,d)];return l===void 0?void 0:kF(l,U.substr(d+1))}}function AU(F,U,Q){if(F&&U!==void 0&&(!("isFrozen"in Object)||!Object.isFrozen(F)))if(typeof U!="string"&&"length"in U){cB(typeof Q!="string"&&"length"in Q);for(var B=0,R=U.length;B<R;++B)AU(F,U[B],Q[B])}else{var V=U.indexOf(".");if(V!==-1){var d=U.substr(0,V),l=U.substr(V+1);if(l==="")Q===void 0?iU(F)&&!isNaN(parseInt(d))?F.splice(d,1):delete F[d]:F[d]=Q;else{var n=F[d];n&&jU(F,d)||(n=F[d]={}),AU(n,l,Q)}}else Q===void 0?iU(F)&&!isNaN(parseInt(U))?F.splice(U,1):delete F[U]:F[U]=Q}}function Fn(F){var U={};for(var Q in F)jU(F,Q)&&(U[Q]=F[Q]);return U}var wZ=[].concat;function Qn(F){return wZ.apply([],F)}var Bn="Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey".split(",").concat(Qn([8,16,32,64].map(F=>["Int","Uint","Float"].map(U=>U+F+"Array")))).filter(F=>JU[F]),LZ=Bn.map(F=>JU[F]);Un(Bn,F=>[F,!0]);var GF=null;function rB(F){GF=typeof WeakMap!="undefined"&&new WeakMap;let U=W0(F);return GF=null,U}function W0(F){if(!F||typeof F!="object")return F;let U=GF&&GF.get(F);if(U)return U;if(iU(F)){U=[],GF&&GF.set(F,U);for(var Q=0,B=F.length;Q<B;++Q)U.push(W0(F[Q]))}else if(LZ.indexOf(F.constructor)>=0)U=F;else{let V=hB(F);for(var R in U=V===Object.prototype?{}:Object.create(V),GF&&GF.set(F,U),F)jU(F,R)&&(U[R]=W0(F[R]))}return U}var{toString:jZ}={};function Z0(F){return jZ.call(F).slice(8,-1)}var N0=typeof Symbol!="undefined"?Symbol.iterator:"@@iterator",IZ=typeof N0=="symbol"?function(F){var U;return F!=null&&(U=F[N0])&&U.apply(F)}:function(){return null},YQ={};function aF(F){var U,Q,B,R;if(arguments.length===1){if(iU(F))return F.slice();if(this===YQ&&typeof F=="string")return[F];if(R=IZ(F)){for(Q=[];!(B=R.next()).done;)Q.push(B.value);return Q}if(F==null)return[F];if(typeof(U=F.length)=="number"){for(Q=new Array(U);U--;)Q[U]=F[U];return Q}return[F]}for(U=arguments.length,Q=new Array(U);U--;)Q[U]=arguments[U];return Q}var E0=typeof Symbol!="undefined"?F=>F[Symbol.toStringTag]==="AsyncFunction":()=>!1,VF=typeof location!="undefined"&&/^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);function Rn(F,U){VF=F,Vn=U}var Vn=()=>!0,fZ=!new Error("").stack;function UQ(){if(fZ)try{throw UQ.arguments,new Error}catch(F){return F}return new Error}function t0(F,U){var Q=F.stack;return Q?(U=U||0,Q.indexOf(F.name)===0&&(U+=(F.name+F.message).split(`
`).length),Q.split(`
`).slice(U).filter(Vn).map(B=>`
`+B).join("")):""}var dn=["Unknown","Constraint","Data","TransactionInactive","ReadOnly","Version","NotFound","InvalidState","InvalidAccess","Abort","Timeout","QuotaExceeded","Syntax","DataClone"],S0=["Modify","Bulk","OpenFailed","VersionChange","Schema","Upgrade","InvalidTable","MissingAPI","NoSuchDatabase","InvalidArgument","SubTransaction","Unsupported","Internal","DatabaseClosed","PrematureCommit","ForeignAwait"].concat(dn),KZ={VersionChanged:"Database version changed by other database connection",DatabaseClosed:"Database has been closed",Abort:"Transaction aborted",TransactionInactive:"Transaction has already completed or failed",MissingAPI:"IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb"};function yQ(F,U){this._e=UQ(),this.name=F,this.message=U}function ln(F,U){return F+". Errors: "+Object.keys(U).map(Q=>U[Q].toString()).filter((Q,B,R)=>R.indexOf(Q)===B).join(`
`)}function CR(F,U,Q,B){this._e=UQ(),this.failures=U,this.failedKeys=B,this.successCount=Q,this.message=ln(F,U)}function CB(F,U){this._e=UQ(),this.name="BulkError",this.failures=Object.keys(U).map(Q=>U[Q]),this.failuresByPos=U,this.message=ln(F,U)}sQ(yQ).from(Error).extend({stack:{get:function(){return this._stack||(this._stack=this.name+": "+this.message+t0(this._e,2))}},toString:function(){return this.name+": "+this.message}}),sQ(CR).from(yQ),sQ(CB).from(yQ);var e0=S0.reduce((F,U)=>(F[U]=U+"Error",F),{}),gZ=yQ,K=S0.reduce((F,U)=>{var Q=U+"Error";function B(R,V){this._e=UQ(),this.name=Q,R?typeof R=="string"?(this.message=`${R}${V?`
 `+V:""}`,this.inner=V||null):typeof R=="object"&&(this.message=`${R.name} ${R.message}`,this.inner=R):(this.message=KZ[U]||Q,this.inner=null)}return sQ(B).from(gZ),F[U]=B,F},{});K.Syntax=SyntaxError,K.Type=TypeError,K.Range=RangeError;var nn=dn.reduce((F,U)=>(F[U+"Error"]=K[U],F),{}),DR=S0.reduce((F,U)=>(["Syntax","Type","Range"].indexOf(U)===-1&&(F[U+"Error"]=K[U]),F),{});function dU(){}function DB(F){return F}function PZ(F,U){return F==null||F===DB?U:function(Q){return U(F(Q))}}function FQ(F,U){return function(){F.apply(this,arguments),U.apply(this,arguments)}}function _Z(F,U){return F===dU?U:function(){var Q=F.apply(this,arguments);Q!==void 0&&(arguments[0]=Q);var B=this.onsuccess,R=this.onerror;this.onsuccess=null,this.onerror=null;var V=U.apply(this,arguments);return B&&(this.onsuccess=this.onsuccess?FQ(B,this.onsuccess):B),R&&(this.onerror=this.onerror?FQ(R,this.onerror):R),V!==void 0?V:Q}}function qZ(F,U){return F===dU?U:function(){F.apply(this,arguments);var Q=this.onsuccess,B=this.onerror;this.onsuccess=this.onerror=null,U.apply(this,arguments),Q&&(this.onsuccess=this.onsuccess?FQ(Q,this.onsuccess):Q),B&&(this.onerror=this.onerror?FQ(B,this.onerror):B)}}function AZ(F,U){return F===dU?U:function(Q){var B=F.apply(this,arguments);GU(Q,B);var R=this.onsuccess,V=this.onerror;this.onsuccess=null,this.onerror=null;var d=U.apply(this,arguments);return R&&(this.onsuccess=this.onsuccess?FQ(R,this.onsuccess):R),V&&(this.onerror=this.onerror?FQ(V,this.onerror):V),B===void 0?d===void 0?void 0:d:GU(B,d)}}function $Z(F,U){return F===dU?U:function(){return U.apply(this,arguments)!==!1&&F.apply(this,arguments)}}function k0(F,U){return F===dU?U:function(){var Q=F.apply(this,arguments);if(Q&&typeof Q.then=="function"){for(var B=this,R=arguments.length,V=new Array(R);R--;)V[R]=arguments[R];return Q.then(function(){return U.apply(B,V)})}return U.apply(this,arguments)}}DR.ModifyError=CR,DR.DexieError=yQ,DR.BulkError=CB;var pB={},[a0,pR,T0]=typeof Promise=="undefined"?[]:(()=>{let F=Promise.resolve();if(typeof crypto=="undefined"||!crypto.subtle)return[F,hB(F),F];let U=crypto.subtle.digest("SHA-512",new Uint8Array([0]));return[U,hB(U),F]})(),Jn=pR&&pR.then,mR=a0&&a0.constructor,h0=!!T0,c0=!1,UN=T0?()=>{T0.then(sR)}:JU.setImmediate?setImmediate.bind(null,sR):JU.MutationObserver?()=>{var F=document.createElement("div");new MutationObserver(()=>{sR(),F=null}).observe(F,{attributes:!0}),F.setAttribute("i","1")}:()=>{setTimeout(sR,0)},mB=function(F,U){MB.push([F,U]),MR&&(UN(),MR=!1)},r0=!0,MR=!0,QQ=[],oR=[],C0=null,D0=DB,vQ={id:"global",global:!0,ref:0,unhandleds:[],onunhandled:an,pgp:!1,env:{},finalize:function(){this.unhandleds.forEach(F=>{try{an(F[0],F[1])}catch{}})}},x=vQ,MB=[],BQ=0,iR=[];function b(F){if(typeof this!="object")throw new TypeError("Promises must be constructed via new");this._listeners=[],this.onuncatched=dU,this._lib=!1;var U=this._PSD=x;if(VF&&(this._stackHolder=UQ(),this._prev=null,this._numPrev=0),typeof F!="function"){if(F!==pB)throw new TypeError("Not a function");return this._state=arguments[1],this._value=arguments[2],void(this._state===!1&&m0(this,this._value))}this._state=null,this._value=null,++U.ref,Zn(this,F)}var p0={get:function(){var F=x,U=vR;function Q(B,R){var V=!F.global&&(F!==x||U!==vR);let d=V&&!TF();var l=new b((n,J)=>{M0(this,new Wn(bR(B,F,V,d),bR(R,F,V,d),n,J,F))});return VF&&tn(l,this),l}return Q.prototype=pB,Q},set:function(F){eF(this,"then",F&&F.prototype===pB?p0:{get:function(){return F},set:p0.set})}};function Wn(F,U,Q,B,R){this.onFulfilled=typeof F=="function"?F:null,this.onRejected=typeof U=="function"?U:null,this.resolve=Q,this.reject=B,this.psd=R}function Zn(F,U){try{U(Q=>{if(F._state===null){if(Q===F)throw new TypeError("A promise cannot be resolved with itself.");var B=F._lib&&oB();Q&&typeof Q.then=="function"?Zn(F,(R,V)=>{Q instanceof b?Q._then(R,V):Q.then(R,V)}):(F._state=!0,F._value=Q,Nn(F)),B&&iB()}},m0.bind(null,F))}catch(Q){m0(F,Q)}}function m0(F,U){if(oR.push(U),F._state===null){var Q=F._lib&&oB();U=D0(U),F._state=!1,F._value=U,VF&&U!==null&&typeof U=="object"&&!U._promise&&function(B,R,V){try{B.apply(null,V)}catch(d){R&&R(d)}}(()=>{var B=J0(U,"stack");U._promise=F,eF(U,"stack",{get:()=>c0?B&&(B.get?B.get.apply(U):B.value):F.stack})}),function(B){QQ.some(R=>R._value===B._value)||QQ.push(B)}(F),Nn(F),Q&&iB()}}function Nn(F){var U=F._listeners;F._listeners=[];for(var Q=0,B=U.length;Q<B;++Q)M0(F,U[Q]);var R=F._PSD;--R.ref||R.finalize(),BQ===0&&(++BQ,mB(()=>{--BQ==0&&o0()},[]))}function M0(F,U){if(F._state!==null){var Q=F._state?U.onFulfilled:U.onRejected;if(Q===null)return(F._state?U.resolve:U.reject)(F._value);++U.psd.ref,++BQ,mB(FN,[Q,F,U])}else F._listeners.push(U)}function FN(F,U,Q){try{C0=U;var B,R=U._value;U._state?B=F(R):(oR.length&&(oR=[]),B=F(R),oR.indexOf(R)===-1&&function(V){for(var d=QQ.length;d;)if(QQ[--d]._value===V._value)return void QQ.splice(d,1)}(U)),Q.resolve(B)}catch(V){Q.reject(V)}finally{C0=null,--BQ==0&&o0(),--Q.psd.ref||Q.psd.finalize()}}function En(F,U,Q){if(U.length===Q)return U;var B="";if(F._state===!1){var R,V,d=F._value;d!=null?(R=d.name||"Error",V=d.message||d,B=t0(d,0)):(R=d,V=""),U.push(R+(V?": "+V:"")+B)}return VF&&((B=t0(F._stackHolder,2))&&U.indexOf(B)===-1&&U.push(B),F._prev&&En(F._prev,U,Q)),U}function tn(F,U){var Q=U?U._numPrev+1:0;Q<100&&(F._prev=U,F._numPrev=Q)}function sR(){oB()&&iB()}function oB(){var F=r0;return r0=!1,MR=!1,F}function iB(){var F,U,Q;do for(;MB.length>0;)for(F=MB,MB=[],Q=F.length,U=0;U<Q;++U){var B=F[U];B[0].apply(null,B[1])}while(MB.length>0);r0=!0,MR=!0}function o0(){var F=QQ;QQ=[],F.forEach(B=>{B._PSD.onunhandled.call(null,B._value,B)});for(var U=iR.slice(0),Q=U.length;Q;)U[--Q]()}function YR(F){return new b(pB,!1,F)}function ZU(F,U){var Q=x;return function(){var B=oB(),R=x;try{return XF(Q,!0),F.apply(this,arguments)}catch(V){U&&U(V)}finally{XF(R,!1),B&&iB()}}}iQ(b.prototype,{then:p0,_then:function(F,U){M0(this,new Wn(null,null,F,U,x))},catch:function(F){if(arguments.length===1)return this.then(null,F);var U=arguments[0],Q=arguments[1];return typeof U=="function"?this.then(null,B=>B instanceof U?Q(B):YR(B)):this.then(null,B=>B&&B.name===U?Q(B):YR(B))},finally:function(F){return this.then(U=>(F(),U),U=>(F(),YR(U)))},stack:{get:function(){if(this._stack)return this._stack;try{c0=!0;var F=En(this,[],20).join(`
From previous: `);return this._state!==null&&(this._stack=F),F}finally{c0=!1}}},timeout:function(F,U){return F<1/0?new b((Q,B)=>{var R=setTimeout(()=>B(new K.Timeout(U)),F);this.then(Q,B).finally(clearTimeout.bind(null,R))}):this}}),typeof Symbol!="undefined"&&Symbol.toStringTag&&eF(b.prototype,Symbol.toStringTag,"Dexie.Promise"),vQ.env=Sn(),iQ(b,{all:function(){var F=aF.apply(null,arguments).map(GR);return new b(function(U,Q){F.length===0&&U([]);var B=F.length;F.forEach((R,V)=>b.resolve(R).then(d=>{F[V]=d,--B||U(F)},Q))})},resolve:F=>{if(F instanceof b)return F;if(F&&typeof F.then=="function")return new b((Q,B)=>{F.then(Q,B)});var U=new b(pB,!0,F);return tn(U,C0),U},reject:YR,race:function(){var F=aF.apply(null,arguments).map(GR);return new b((U,Q)=>{F.map(B=>b.resolve(B).then(U,Q))})},PSD:{get:()=>x,set:F=>x=F},totalEchoes:{get:()=>vR},newPSD:bF,usePSD:bQ,scheduler:{get:()=>mB,set:F=>{mB=F}},rejectionMapper:{get:()=>D0,set:F=>{D0=F}},follow:(F,U)=>new b((Q,B)=>bF((R,V)=>{var d=x;d.unhandleds=[],d.onunhandled=V,d.finalize=FQ(function(){(function(l){function n(){l(),iR.splice(iR.indexOf(n),1)}iR.push(n),++BQ,mB(()=>{--BQ==0&&o0()},[])})(()=>{this.unhandleds.length===0?R():V(this.unhandleds[0])})},d.finalize),F()},U,Q,B))}),mR&&(mR.allSettled&&eF(b,"allSettled",function(){let F=aF.apply(null,arguments).map(GR);return new b(U=>{F.length===0&&U([]);let Q=F.length,B=new Array(Q);F.forEach((R,V)=>b.resolve(R).then(d=>B[V]={status:"fulfilled",value:d},d=>B[V]={status:"rejected",reason:d}).then(()=>--Q||U(B)))})}),mR.any&&typeof AggregateError!="undefined"&&eF(b,"any",function(){let F=aF.apply(null,arguments).map(GR);return new b((U,Q)=>{F.length===0&&Q(new AggregateError([]));let B=F.length,R=new Array(B);F.forEach((V,d)=>b.resolve(V).then(l=>U(l),l=>{R[d]=l,--B||Q(new AggregateError(R))}))})}));var sU={awaits:0,echoes:0,id:0},QN=0,yR=[],i0=0,vR=0,BN=0;function bF(F,U,Q,B){var R=x,V=Object.create(R);V.parent=R,V.ref=0,V.global=!1,V.id=++BN;var d=vQ.env;V.env=h0?{Promise:b,PromiseProp:{value:b,configurable:!0,writable:!0},all:b.all,race:b.race,allSettled:b.allSettled,any:b.any,resolve:b.resolve,reject:b.reject,nthen:kn(d.nthen,V),gthen:kn(d.gthen,V)}:{},U&&GU(V,U),++R.ref,V.finalize=function(){--this.parent.ref||this.parent.finalize()};var l=bQ(V,F,Q,B);return V.ref===0&&V.finalize(),l}function GQ(){return sU.id||(sU.id=++QN),++sU.awaits,sU.echoes+=100,sU.id}function TF(){return!!sU.awaits&&(--sU.awaits==0&&(sU.id=0),sU.echoes=100*sU.awaits,!0)}function GR(F){return sU.echoes&&F&&F.constructor===mR?(GQ(),F.then(U=>(TF(),U),U=>(TF(),TU(U)))):F}function RN(F){++vR,sU.echoes&&--sU.echoes!=0||(sU.echoes=sU.id=0),yR.push(x),XF(F,!0)}function VN(){var F=yR[yR.length-1];yR.pop(),XF(F,!1)}function XF(F,U){var Q=x;if((U?!sU.echoes||i0++&&F===x:!i0||--i0&&F===x)||en(U?RN.bind(null,F):VN),F!==x&&(x=F,Q===vQ&&(vQ.env=Sn()),h0)){var B=vQ.env.Promise,R=F.env;pR.then=R.nthen,B.prototype.then=R.gthen,(Q.global||F.global)&&(Object.defineProperty(JU,"Promise",R.PromiseProp),B.all=R.all,B.race=R.race,B.resolve=R.resolve,B.reject=R.reject,R.allSettled&&(B.allSettled=R.allSettled),R.any&&(B.any=R.any))}}function Sn(){var F=JU.Promise;return h0?{Promise:F,PromiseProp:Object.getOwnPropertyDescriptor(JU,"Promise"),all:F.all,race:F.race,allSettled:F.allSettled,any:F.any,resolve:F.resolve,reject:F.reject,nthen:pR.then,gthen:F.prototype.then}:{}}function bQ(F,U,Q,B,R){var V=x;try{return XF(F,!0),U(Q,B,R)}finally{XF(V,!1)}}function en(F){Jn.call(a0,F)}function bR(F,U,Q,B){return typeof F!="function"?F:function(){var R=x;Q&&GQ(),XF(U,!0);try{return F.apply(this,arguments)}finally{XF(R,!1),B&&en(TF)}}}function kn(F,U){return function(Q,B){return F.call(this,bR(Q,U),bR(B,U))}}(""+Jn).indexOf("[native code]")===-1&&(GQ=TF=dU);function an(F,U){var Q;try{Q=U.onuncatched(F)}catch{}if(Q!==!1)try{var B,R={promise:U,reason:F};if(JU.document&&document.createEvent?((B=document.createEvent("Event")).initEvent("unhandledrejection",!0,!0),GU(B,R)):JU.CustomEvent&&GU(B=new CustomEvent("unhandledrejection",{detail:R}),R),B&&JU.dispatchEvent&&(dispatchEvent(B),!JU.PromiseRejectionEvent&&JU.onunhandledrejection))try{JU.onunhandledrejection(B)}catch{}VF&&B&&!B.defaultPrevented&&console.warn(`Unhandled rejection: ${F.stack||F}`)}catch{}}var TU=b.reject;function s0(F,U,Q,B){if(F.idbdb&&(F._state.openComplete||x.letThrough||F._vip)){var R=F._createTransaction(U,Q,F._dbSchema);try{R.create(),F._state.PR1398_maxLoop=3}catch(V){return V.name===e0.InvalidState&&F.isOpen()&&--F._state.PR1398_maxLoop>0?(console.warn("Dexie: Need to reopen db"),F._close(),F.open().then(()=>s0(F,U,Q,B))):TU(V)}return R._promise(U,(V,d)=>bF(()=>(x.trans=R,B(V,d,R)))).then(V=>R._completion.then(()=>V))}if(F._state.openComplete)return TU(new K.DatabaseClosed(F._state.dbOpenError));if(!F._state.isBeingOpened){if(!F._options.autoOpen)return TU(new K.DatabaseClosed);F.open().catch(dU)}return F._state.dbReadyPromise.then(()=>s0(F,U,Q,B))}var RQ=String.fromCharCode(65535),hF="Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.",sB=[],XR=typeof navigator!="undefined"&&/(MSIE|Trident|Edge)/.test(navigator.userAgent),dN=XR,lN=XR,Tn=F=>!/(dexie\.js|dexie\.min\.js)/.test(F);function VQ(F,U){return F?U?function(){return F.apply(this,arguments)&&U.apply(this,arguments)}:F:U}var hn={type:3,lower:-1/0,lowerOpen:!1,upper:[[]],upperOpen:!1};function OR(F){return typeof F!="string"||/\./.test(F)?U=>U:U=>(U[F]===void 0&&F in U&&delete(U=rB(U))[F],U)}var cn=class{_trans(U,Q,B){let R=this._tx||x.trans,V=this.name;function d(n,J,W){if(!W.schema[V])throw new K.NotFound("Table "+V+" not part of transaction");return Q(W.idbtrans,W)}let l=oB();try{return R&&R.db===this.db?R===x.trans?R._promise(U,d,B):bF(()=>R._promise(U,d,B),{trans:R,transless:x.transless||x}):s0(this.db,U,[this.name],d)}finally{l&&iB()}}get(U,Q){return U&&U.constructor===Object?this.where(U).first(Q):this._trans("readonly",B=>this.core.get({trans:B,key:U}).then(R=>this.hook.reading.fire(R))).then(Q)}where(U){if(typeof U=="string")return new this.db.WhereClause(this,U);if(iU(U))return new this.db.WhereClause(this,`[${U.join("+")}]`);let Q=eU(U);if(Q.length===1)return this.where(Q[0]).equals(U[Q[0]]);let B=this.schema.indexes.concat(this.schema.primKey).filter(J=>J.compound&&Q.every(W=>J.keyPath.indexOf(W)>=0)&&J.keyPath.every(W=>Q.indexOf(W)>=0))[0];if(B&&this.db._maxKey!==RQ)return this.where(B.name).equals(B.keyPath.map(J=>U[J]));!B&&VF&&console.warn(`The query ${JSON.stringify(U)} on ${this.name} would benefit of a compound index [${Q.join("+")}]`);let{idxByName:R}=this.schema,V=this.db._deps.indexedDB;function d(J,W){try{return V.cmp(J,W)===0}catch{return!1}}let[l,n]=Q.reduce(([J,W],E)=>{let Z=R[E],e=U[E];return[J||Z,J||!Z?VQ(W,Z&&Z.multi?r=>{let c=kF(r,E);return iU(c)&&c.some(h=>d(e,h))}:r=>d(e,kF(r,E))):W]},[null,null]);return l?this.where(l.name).equals(U[l.keyPath]).filter(n):B?this.filter(n):this.where(Q).equals("")}filter(U){return this.toCollection().and(U)}count(U){return this.toCollection().count(U)}offset(U){return this.toCollection().offset(U)}limit(U){return this.toCollection().limit(U)}each(U){return this.toCollection().each(U)}toArray(U){return this.toCollection().toArray(U)}toCollection(){return new this.db.Collection(new this.db.WhereClause(this))}orderBy(U){return new this.db.Collection(new this.db.WhereClause(this,iU(U)?`[${U.join("+")}]`:U))}reverse(){return this.toCollection().reverse()}mapToClass(U){this.schema.mappedClass=U;let Q=B=>{if(!B)return B;let R=Object.create(U.prototype);for(var V in B)if(jU(B,V))try{R[V]=B[V]}catch{}return R};return this.schema.readHook&&this.hook.reading.unsubscribe(this.schema.readHook),this.schema.readHook=Q,this.hook("reading",Q),U}defineClass(){return this.mapToClass(function(U){GU(this,U)})}add(U,Q){let{auto:B,keyPath:R}=this.schema.primKey,V=U;return R&&B&&(V=OR(R)(U)),this._trans("readwrite",d=>this.core.mutate({trans:d,type:"add",keys:Q!=null?[Q]:null,values:[V]})).then(d=>d.numFailures?b.reject(d.failures[0]):d.lastResult).then(d=>{if(R)try{AU(U,R,d)}catch{}return d})}update(U,Q){if(typeof U!="object"||iU(U))return this.where(":id").equals(U).modify(Q);{let B=kF(U,this.schema.primKey.keyPath);if(B===void 0)return TU(new K.InvalidArgument("Given object does not contain its primary key"));try{typeof Q!="function"?eU(Q).forEach(R=>{AU(U,R,Q[R])}):Q(U,{value:U,primKey:B})}catch{}return this.where(":id").equals(B).modify(Q)}}put(U,Q){let{auto:B,keyPath:R}=this.schema.primKey,V=U;return R&&B&&(V=OR(R)(U)),this._trans("readwrite",d=>this.core.mutate({trans:d,type:"put",values:[V],keys:Q!=null?[Q]:null})).then(d=>d.numFailures?b.reject(d.failures[0]):d.lastResult).then(d=>{if(R)try{AU(U,R,d)}catch{}return d})}delete(U){return this._trans("readwrite",Q=>this.core.mutate({trans:Q,type:"delete",keys:[U]})).then(Q=>Q.numFailures?b.reject(Q.failures[0]):void 0)}clear(){return this._trans("readwrite",U=>this.core.mutate({trans:U,type:"deleteRange",range:hn})).then(U=>U.numFailures?b.reject(U.failures[0]):void 0)}bulkGet(U){return this._trans("readonly",Q=>this.core.getMany({keys:U,trans:Q}).then(B=>B.map(R=>this.hook.reading.fire(R))))}bulkAdd(U,Q,B){let R=Array.isArray(Q)?Q:void 0,V=(B=B||(R?void 0:Q))?B.allKeys:void 0;return this._trans("readwrite",d=>{let{auto:l,keyPath:n}=this.schema.primKey;if(n&&R)throw new K.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");if(R&&R.length!==U.length)throw new K.InvalidArgument("Arguments objects and keys must have the same length");let J=U.length,W=n&&l?U.map(OR(n)):U;return this.core.mutate({trans:d,type:"add",keys:R,values:W,wantResults:V}).then(({numFailures:E,results:Z,lastResult:e,failures:r})=>{if(E===0)return V?Z:e;throw new CB(`${this.name}.bulkAdd(): ${E} of ${J} operations failed`,r)})})}bulkPut(U,Q,B){let R=Array.isArray(Q)?Q:void 0,V=(B=B||(R?void 0:Q))?B.allKeys:void 0;return this._trans("readwrite",d=>{let{auto:l,keyPath:n}=this.schema.primKey;if(n&&R)throw new K.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");if(R&&R.length!==U.length)throw new K.InvalidArgument("Arguments objects and keys must have the same length");let J=U.length,W=n&&l?U.map(OR(n)):U;return this.core.mutate({trans:d,type:"put",keys:R,values:W,wantResults:V}).then(({numFailures:E,results:Z,lastResult:e,failures:r})=>{if(E===0)return V?Z:e;throw new CB(`${this.name}.bulkPut(): ${E} of ${J} operations failed`,r)})})}bulkDelete(U){let Q=U.length;return this._trans("readwrite",B=>this.core.mutate({trans:B,type:"delete",keys:U})).then(({numFailures:B,lastResult:R,failures:V})=>{if(B===0)return R;throw new CB(`${this.name}.bulkDelete(): ${B} of ${Q} operations failed`,V)})}};function YB(F){var U={},Q=function(l,n){if(n){for(var J=arguments.length,W=new Array(J-1);--J;)W[J-1]=arguments[J];return U[l].subscribe.apply(null,W),F}if(typeof l=="string")return U[l]};Q.addEventType=V;for(var B=1,R=arguments.length;B<R;++B)V(arguments[B]);return Q;function V(l,n,J){if(typeof l=="object")return d(l);n||(n=$Z),J||(J=dU);var W={subscribers:[],fire:J,subscribe:function(E){W.subscribers.indexOf(E)===-1&&(W.subscribers.push(E),W.fire=n(W.fire,E))},unsubscribe:function(E){W.subscribers=W.subscribers.filter(function(Z){return Z!==E}),W.fire=W.subscribers.reduce(n,J)}};return U[l]=Q[l]=W,W}function d(l){eU(l).forEach(function(n){var J=l[n];if(iU(J))V(n,l[n][0],l[n][1]);else{if(J!=="asap")throw new K.InvalidArgument("Invalid event config");var W=V(n,DB,function(){for(var E=arguments.length,Z=new Array(E);E--;)Z[E]=arguments[E];W.subscribers.forEach(function(e){$l(function(){e.apply(null,Z)})})})}})}}function yB(F,U){return sQ(U).from({prototype:F}),U}function XQ(F,U){return!(F.filter||F.algorithm||F.or)&&(U?F.justLimit:!F.replayFilter)}function Y0(F,U){F.filter=VQ(F.filter,U)}function y0(F,U,Q){var B=F.replayFilter;F.replayFilter=B?()=>VQ(B(),U()):U,F.justLimit=Q&&!B}function HR(F,U){if(F.isPrimKey)return U.primaryKey;let Q=U.getIndexByKeyPath(F.index);if(!Q)throw new K.Schema("KeyPath "+F.index+" on object store "+U.name+" is not indexed");return Q}function rn(F,U,Q){let B=HR(F,U.schema);return U.openCursor({trans:Q,values:!F.keysOnly,reverse:F.dir==="prev",unique:!!F.unique,query:{index:B,range:F.range}})}function zR(F,U,Q,B){let R=F.replayFilter?VQ(F.filter,F.replayFilter()):F.filter;if(F.or){let V={},d=(l,n,J)=>{if(!R||R(n,J,Z=>n.stop(Z),Z=>n.fail(Z))){var W=n.primaryKey,E=""+W;E==="[object ArrayBuffer]"&&(E=""+new Uint8Array(W)),jU(V,E)||(V[E]=!0,U(l,n,J))}};return Promise.all([F.or._iterate(d,Q),Cn(rn(F,B,Q),F.algorithm,d,!F.keysOnly&&F.valueMapper)])}return Cn(rn(F,B,Q),VQ(F.algorithm,R),U,!F.keysOnly&&F.valueMapper)}function Cn(F,U,Q,B){var R=ZU(B?(V,d,l)=>Q(B(V),d,l):Q);return F.then(V=>{if(V)return V.start(()=>{var d=()=>V.continue();U&&!U(V,l=>d=l,l=>{V.stop(l),d=dU},l=>{V.fail(l),d=dU})||R(V.value,V,l=>d=l),d()})})}function bU(F,U){try{let Q=Dn(F),B=Dn(U);if(Q!==B)return Q==="Array"?1:B==="Array"?-1:Q==="binary"?1:B==="binary"?-1:Q==="string"?1:B==="string"?-1:Q==="Date"?1:B!=="Date"?NaN:-1;switch(Q){case"number":case"Date":case"string":return F>U?1:F<U?-1:0;case"binary":return function(R,V){let d=R.length,l=V.length,n=d<l?d:l;for(let J=0;J<n;++J)if(R[J]!==V[J])return R[J]<V[J]?-1:1;return d===l?0:d<l?-1:1}(pn(F),pn(U));case"Array":return function(R,V){let d=R.length,l=V.length,n=d<l?d:l;for(let J=0;J<n;++J){let W=bU(R[J],V[J]);if(W!==0)return W}return d===l?0:d<l?-1:1}(F,U)}}catch{}return NaN}function Dn(F){let U=typeof F;if(U!=="object")return U;if(ArrayBuffer.isView(F))return"binary";let Q=Z0(F);return Q==="ArrayBuffer"?"binary":Q}function pn(F){return F instanceof Uint8Array?F:ArrayBuffer.isView(F)?new Uint8Array(F.buffer,F.byteOffset,F.byteLength):new Uint8Array(F)}var mn=class{_read(U,Q){var B=this._ctx;return B.error?B.table._trans(null,TU.bind(null,B.error)):B.table._trans("readonly",U).then(Q)}_write(U){var Q=this._ctx;return Q.error?Q.table._trans(null,TU.bind(null,Q.error)):Q.table._trans("readwrite",U,"locked")}_addAlgorithm(U){var Q=this._ctx;Q.algorithm=VQ(Q.algorithm,U)}_iterate(U,Q){return zR(this._ctx,U,Q,this._ctx.table.core)}clone(U){var Q=Object.create(this.constructor.prototype),B=Object.create(this._ctx);return U&&GU(B,U),Q._ctx=B,Q}raw(){return this._ctx.valueMapper=null,this}each(U){var Q=this._ctx;return this._read(B=>zR(Q,U,B,Q.table.core))}count(U){return this._read(Q=>{let B=this._ctx,R=B.table.core;if(XQ(B,!0))return R.count({trans:Q,query:{index:HR(B,R.schema),range:B.range}}).then(d=>Math.min(d,B.limit));var V=0;return zR(B,()=>(++V,!1),Q,R).then(()=>V)}).then(U)}sortBy(U,Q){let B=U.split(".").reverse(),R=B[0],V=B.length-1;function d(J,W){return W?d(J[B[W]],W-1):J[R]}var l=this._ctx.dir==="next"?1:-1;function n(J,W){var E=d(J,V),Z=d(W,V);return E<Z?-l:E>Z?l:0}return this.toArray(function(J){return J.sort(n)}).then(Q)}toArray(U){return this._read(Q=>{var B=this._ctx;if(B.dir==="next"&&XQ(B,!0)&&B.limit>0){let{valueMapper:R}=B,V=HR(B,B.table.core.schema);return B.table.core.query({trans:Q,limit:B.limit,values:!0,query:{index:V,range:B.range}}).then(({result:d})=>R?d.map(R):d)}{let R=[];return zR(B,V=>R.push(V),Q,B.table.core).then(()=>R)}},U)}offset(U){var Q=this._ctx;return U<=0||(Q.offset+=U,XQ(Q)?y0(Q,()=>{var B=U;return(R,V)=>B===0||(B===1?(--B,!1):(V(()=>{R.advance(B),B=0}),!1))}):y0(Q,()=>{var B=U;return()=>--B<0})),this}limit(U){return this._ctx.limit=Math.min(this._ctx.limit,U),y0(this._ctx,()=>{var Q=U;return function(B,R,V){return--Q<=0&&R(V),Q>=0}},!0),this}until(U,Q){return Y0(this._ctx,function(B,R,V){return!U(B.value)||(R(V),Q)}),this}first(U){return this.limit(1).toArray(function(Q){return Q[0]}).then(U)}last(U){return this.reverse().first(U)}filter(U){var Q,B;return Y0(this._ctx,function(R){return U(R.value)}),Q=this._ctx,B=U,Q.isMatch=VQ(Q.isMatch,B),this}and(U){return this.filter(U)}or(U){return new this.db.WhereClause(this._ctx.table,U,this)}reverse(){return this._ctx.dir=this._ctx.dir==="prev"?"next":"prev",this._ondirectionchange&&this._ondirectionchange(this._ctx.dir),this}desc(){return this.reverse()}eachKey(U){var Q=this._ctx;return Q.keysOnly=!Q.isMatch,this.each(function(B,R){U(R.key,R)})}eachUniqueKey(U){return this._ctx.unique="unique",this.eachKey(U)}eachPrimaryKey(U){var Q=this._ctx;return Q.keysOnly=!Q.isMatch,this.each(function(B,R){U(R.primaryKey,R)})}keys(U){var Q=this._ctx;Q.keysOnly=!Q.isMatch;var B=[];return this.each(function(R,V){B.push(V.key)}).then(function(){return B}).then(U)}primaryKeys(U){var Q=this._ctx;if(Q.dir==="next"&&XQ(Q,!0)&&Q.limit>0)return this._read(R=>{var V=HR(Q,Q.table.core.schema);return Q.table.core.query({trans:R,values:!1,limit:Q.limit,query:{index:V,range:Q.range}})}).then(({result:R})=>R).then(U);Q.keysOnly=!Q.isMatch;var B=[];return this.each(function(R,V){B.push(V.primaryKey)}).then(function(){return B}).then(U)}uniqueKeys(U){return this._ctx.unique="unique",this.keys(U)}firstKey(U){return this.limit(1).keys(function(Q){return Q[0]}).then(U)}lastKey(U){return this.reverse().firstKey(U)}distinct(){var U=this._ctx,Q=U.index&&U.table.schema.idxByName[U.index];if(!Q||!Q.multi)return this;var B={};return Y0(this._ctx,function(R){var V=R.primaryKey.toString(),d=jU(B,V);return B[V]=!0,!d}),this}modify(U){var Q=this._ctx;return this._write(B=>{var R;if(typeof U=="function")R=U;else{var V=eU(U),d=V.length;R=function(c){for(var h=!1,N=0;N<d;++N){var k=V[N],t=U[k];kF(c,k)!==t&&(AU(c,k,t),h=!0)}return h}}let l=Q.table.core,{outbound:n,extractKey:J}=l.schema.primaryKey,W=this.db._options.modifyChunkSize||200,E=[],Z=0,e=[],r=(c,h)=>{let{failures:N,numFailures:k}=h;Z+=c-k;for(let t of eU(N))E.push(N[t])};return this.clone().primaryKeys().then(c=>{let h=N=>{let k=Math.min(W,c.length-N);return l.getMany({trans:B,keys:c.slice(N,N+k),cache:"immutable"}).then(t=>{let S=[],a=[],T=n?[]:null,C=[];for(let p=0;p<k;++p){let o=t[p],s={value:rB(o),primKey:c[N+p]};R.call(s,s.value,s)!==!1&&(s.value==null?C.push(c[N+p]):n||bU(J(o),J(s.value))===0?(a.push(s.value),n&&T.push(c[N+p])):(C.push(c[N+p]),S.push(s.value)))}let D=XQ(Q)&&Q.limit===1/0&&(typeof U!="function"||U===v0)&&{index:Q.index,range:Q.range};return Promise.resolve(S.length>0&&l.mutate({trans:B,type:"add",values:S}).then(p=>{for(let o in p.failures)C.splice(parseInt(o),1);r(S.length,p)})).then(()=>(a.length>0||D&&typeof U=="object")&&l.mutate({trans:B,type:"put",keys:T,values:a,criteria:D,changeSpec:typeof U!="function"&&U}).then(p=>r(a.length,p))).then(()=>(C.length>0||D&&U===v0)&&l.mutate({trans:B,type:"delete",keys:C,criteria:D}).then(p=>r(C.length,p))).then(()=>c.length>N+k&&h(N+W))})};return h(0).then(()=>{if(E.length>0)throw new CR("Error modifying one or more objects",E,Z,e);return c.length})})})}delete(){var U=this._ctx,Q=U.range;return XQ(U)&&(U.isPrimKey&&!lN||Q.type===3)?this._write(B=>{let{primaryKey:R}=U.table.core.schema,V=Q;return U.table.core.count({trans:B,query:{index:R,range:V}}).then(d=>U.table.core.mutate({trans:B,type:"deleteRange",range:V}).then(({failures:l,lastResult:n,results:J,numFailures:W})=>{if(W)throw new CR("Could not delete some values",Object.keys(l).map(E=>l[E]),d-W);return d-W}))}):this.modify(v0)}},v0=(F,U)=>U.value=null;function nN(F,U){return F<U?-1:F===U?0:1}function JN(F,U){return F>U?-1:F===U?0:1}function IU(F,U,Q){var B=F instanceof G0?new F.Collection(F):F;return B._ctx.error=Q?new Q(U):new TypeError(U),B}function OQ(F){return new F.Collection(F,()=>Mn("")).limit(0)}function WN(F,U,Q,B,R,V){for(var d=Math.min(F.length,B.length),l=-1,n=0;n<d;++n){var J=U[n];if(J!==B[n])return R(F[n],Q[n])<0?F.substr(0,n)+Q[n]+Q.substr(n+1):R(F[n],B[n])<0?F.substr(0,n)+B[n]+Q.substr(n+1):l>=0?F.substr(0,l)+U[l]+Q.substr(l+1):null;R(F[n],J)<0&&(l=n)}return d<B.length&&V==="next"?F+Q.substr(F.length):d<F.length&&V==="prev"?F.substr(0,Q.length):l<0?null:F.substr(0,l)+B[l]+Q.substr(l+1)}function uR(F,U,Q,B){var R,V,d,l,n,J,W,E=Q.length;if(!Q.every(c=>typeof c=="string"))return IU(F,"String expected.");function Z(c){R=function(N){return N==="next"?k=>k.toUpperCase():k=>k.toLowerCase()}(c),V=function(N){return N==="next"?k=>k.toLowerCase():k=>k.toUpperCase()}(c),d=c==="next"?nN:JN;var h=Q.map(function(N){return{lower:V(N),upper:R(N)}}).sort(function(N,k){return d(N.lower,k.lower)});l=h.map(function(N){return N.upper}),n=h.map(function(N){return N.lower}),J=c,W=c==="next"?"":B}Z("next");var e=new F.Collection(F,()=>OF(l[0],n[E-1]+B));e._ondirectionchange=function(c){Z(c)};var r=0;return e._addAlgorithm(function(c,h,N){var k=c.key;if(typeof k!="string")return!1;var t=V(k);if(U(t,n,r))return!0;for(var S=null,a=r;a<E;++a){var T=WN(k,t,l[a],n[a],d,J);T===null&&S===null?r=a+1:(S===null||d(S,T)>0)&&(S=T)}return h(S!==null?function(){c.continue(S+W)}:N),!1}),e}function OF(F,U,Q,B){return{type:2,lower:F,upper:U,lowerOpen:Q,upperOpen:B}}function Mn(F){return{type:1,lower:F,upper:F}}var G0=class{get Collection(){return this._ctx.table.db.Collection}between(U,Q,B,R){B=B!==!1,R=R===!0;try{return this._cmp(U,Q)>0||this._cmp(U,Q)===0&&(B||R)&&(!B||!R)?OQ(this):new this.Collection(this,()=>OF(U,Q,!B,!R))}catch{return IU(this,hF)}}equals(U){return U==null?IU(this,hF):new this.Collection(this,()=>Mn(U))}above(U){return U==null?IU(this,hF):new this.Collection(this,()=>OF(U,void 0,!0))}aboveOrEqual(U){return U==null?IU(this,hF):new this.Collection(this,()=>OF(U,void 0,!1))}below(U){return U==null?IU(this,hF):new this.Collection(this,()=>OF(void 0,U,!1,!0))}belowOrEqual(U){return U==null?IU(this,hF):new this.Collection(this,()=>OF(void 0,U))}startsWith(U){return typeof U!="string"?IU(this,"String expected."):this.between(U,U+RQ,!0,!0)}startsWithIgnoreCase(U){return U===""?this.startsWith(U):uR(this,(Q,B)=>Q.indexOf(B[0])===0,[U],RQ)}equalsIgnoreCase(U){return uR(this,(Q,B)=>Q===B[0],[U],"")}anyOfIgnoreCase(){var U=aF.apply(YQ,arguments);return U.length===0?OQ(this):uR(this,(Q,B)=>B.indexOf(Q)!==-1,U,"")}startsWithAnyOfIgnoreCase(){var U=aF.apply(YQ,arguments);return U.length===0?OQ(this):uR(this,(Q,B)=>B.some(R=>Q.indexOf(R)===0),U,RQ)}anyOf(){let U=aF.apply(YQ,arguments),Q=this._cmp;try{U.sort(Q)}catch{return IU(this,hF)}if(U.length===0)return OQ(this);let B=new this.Collection(this,()=>OF(U[0],U[U.length-1]));B._ondirectionchange=V=>{Q=V==="next"?this._ascending:this._descending,U.sort(Q)};let R=0;return B._addAlgorithm((V,d,l)=>{let n=V.key;for(;Q(n,U[R])>0;)if(++R,R===U.length)return d(l),!1;return Q(n,U[R])===0||(d(()=>{V.continue(U[R])}),!1)}),B}notEqual(U){return this.inAnyRange([[-(1/0),U],[U,this.db._maxKey]],{includeLowers:!1,includeUppers:!1})}noneOf(){let U=aF.apply(YQ,arguments);if(U.length===0)return new this.Collection(this);try{U.sort(this._ascending)}catch{return IU(this,hF)}let Q=U.reduce((B,R)=>B?B.concat([[B[B.length-1][1],R]]):[[-(1/0),R]],null);return Q.push([U[U.length-1],this.db._maxKey]),this.inAnyRange(Q,{includeLowers:!1,includeUppers:!1})}inAnyRange(U,Q){let B=this._cmp,R=this._ascending,V=this._descending,d=this._min,l=this._max;if(U.length===0)return OQ(this);if(!U.every(k=>k[0]!==void 0&&k[1]!==void 0&&R(k[0],k[1])<=0))return IU(this,"First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower",K.InvalidArgument);let n=!Q||Q.includeLowers!==!1,J=Q&&Q.includeUppers===!0,W,E=R;function Z(k,t){return E(k[0],t[0])}try{W=U.reduce(function(k,t){let S=0,a=k.length;for(;S<a;++S){let T=k[S];if(B(t[0],T[1])<0&&B(t[1],T[0])>0){T[0]=d(T[0],t[0]),T[1]=l(T[1],t[1]);break}}return S===a&&k.push(t),k},[]),W.sort(Z)}catch{return IU(this,hF)}let e=0,r=J?k=>R(k,W[e][1])>0:k=>R(k,W[e][1])>=0,c=n?k=>V(k,W[e][0])>0:k=>V(k,W[e][0])>=0,h=r,N=new this.Collection(this,()=>OF(W[0][0],W[W.length-1][1],!n,!J));return N._ondirectionchange=k=>{k==="next"?(h=r,E=R):(h=c,E=V),W.sort(Z)},N._addAlgorithm((k,t,S)=>{for(var a=k.key;h(a);)if(++e,e===W.length)return t(S),!1;return!!function(T){return!r(T)&&!c(T)}(a)||(this._cmp(a,W[e][1])===0||this._cmp(a,W[e][0])===0||t(()=>{E===R?k.continue(W[e][0]):k.continue(W[e][1])}),!1)}),N}startsWithAnyOf(){let U=aF.apply(YQ,arguments);return U.every(Q=>typeof Q=="string")?U.length===0?OQ(this):this.inAnyRange(U.map(Q=>[Q,Q+RQ])):IU(this,"startsWithAnyOf() only works with strings")}};function dF(F){return ZU(function(U){return vB(U),F(U.target.error),!1})}function vB(F){F.stopPropagation&&F.stopPropagation(),F.preventDefault&&F.preventDefault()}var HF=YB(null,"storagemutated"),on=class{_lock(){return cB(!x.global),++this._reculock,this._reculock!==1||x.global||(x.lockOwnerFor=this),this}_unlock(){if(cB(!x.global),--this._reculock==0)for(x.global||(x.lockOwnerFor=null);this._blockedFuncs.length>0&&!this._locked();){var U=this._blockedFuncs.shift();try{bQ(U[1],U[0])}catch{}}return this}_locked(){return this._reculock&&x.lockOwnerFor!==this}create(U){if(!this.mode)return this;let Q=this.db.idbdb,B=this.db._state.dbOpenError;if(cB(!this.idbtrans),!U&&!Q)switch(B&&B.name){case"DatabaseClosedError":throw new K.DatabaseClosed(B);case"MissingAPIError":throw new K.MissingAPI(B.message,B);default:throw new K.OpenFailed(B)}if(!this.active)throw new K.TransactionInactive;return cB(this._completion._state===null),(U=this.idbtrans=U||(this.db.core?this.db.core.transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability}):Q.transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability}))).onerror=ZU(R=>{vB(R),this._reject(U.error)}),U.onabort=ZU(R=>{vB(R),this.active&&this._reject(new K.Abort(U.error)),this.active=!1,this.on("abort").fire(R)}),U.oncomplete=ZU(()=>{this.active=!1,this._resolve(),"mutatedParts"in U&&HF.storagemutated.fire(U.mutatedParts)}),this}_promise(U,Q,B){if(U==="readwrite"&&this.mode!=="readwrite")return TU(new K.ReadOnly("Transaction is readonly"));if(!this.active)return TU(new K.TransactionInactive);if(this._locked())return new b((V,d)=>{this._blockedFuncs.push([()=>{this._promise(U,Q,B).then(V,d)},x])});if(B)return bF(()=>{var V=new b((d,l)=>{this._lock();let n=Q(d,l,this);n&&n.then&&n.then(d,l)});return V.finally(()=>this._unlock()),V._lib=!0,V});var R=new b((V,d)=>{var l=Q(V,d,this);l&&l.then&&l.then(V,d)});return R._lib=!0,R}_root(){return this.parent?this.parent._root():this}waitFor(U){var Q=this._root();let B=b.resolve(U);if(Q._waitingFor)Q._waitingFor=Q._waitingFor.then(()=>B);else{Q._waitingFor=B,Q._waitingQueue=[];var R=Q.idbtrans.objectStore(Q.storeNames[0]);(function d(){for(++Q._spinCount;Q._waitingQueue.length;)Q._waitingQueue.shift()();Q._waitingFor&&(R.get(-1/0).onsuccess=d)})()}var V=Q._waitingFor;return new b((d,l)=>{B.then(n=>Q._waitingQueue.push(ZU(d.bind(null,n))),n=>Q._waitingQueue.push(ZU(l.bind(null,n)))).finally(()=>{Q._waitingFor===V&&(Q._waitingFor=null)})})}abort(){this.active&&(this.active=!1,this.idbtrans&&this.idbtrans.abort(),this._reject(new K.Abort))}table(U){let Q=this._memoizedTables||(this._memoizedTables={});if(jU(Q,U))return Q[U];let B=this.schema[U];if(!B)throw new K.NotFound("Table "+U+" not part of transaction");let R=new this.db.Table(U,B,this);return R.core=this.db.core.table(U),Q[U]=R,R}};function b0(F,U,Q,B,R,V,d){return{name:F,keyPath:U,unique:Q,multi:B,auto:R,compound:V,src:(Q&&!d?"&":"")+(B?"*":"")+(R?"++":"")+sn(U)}}function sn(F){return typeof F=="string"?F:F?"["+[].join.call(F,"+")+"]":""}function Yn(F,U,Q){return{name:F,primKey:U,indexes:Q,mappedClass:null,idxByName:Un(Q,B=>[B.name,B])}}var GB=F=>{try{return F.only([[]]),GB=()=>[[]],[[]]}catch{return GB=()=>RQ,RQ}};function X0(F){return F==null?()=>{}:typeof F=="string"?function(U){return U.split(".").length===1?Q=>Q[U]:Q=>kF(Q,U)}(F):U=>kF(U,F)}function yn(F){return[].slice.call(F)}var ZN=0;function bB(F){return F==null?":id":typeof F=="string"?F:`[${F.join("+")}]`}function NN(F,U,Q){function B(n){if(n.type===3)return null;if(n.type===4)throw new Error("Cannot convert never type to IDBKeyRange");let{lower:J,upper:W,lowerOpen:E,upperOpen:Z}=n;return J===void 0?W===void 0?null:U.upperBound(W,!!Z):W===void 0?U.lowerBound(J,!!E):U.bound(J,W,!!E,!!Z)}let{schema:R,hasGetAll:V}=function(n,J){let W=yn(n.objectStoreNames);return{schema:{name:n.name,tables:W.map(E=>J.objectStore(E)).map(E=>{let{keyPath:Z,autoIncrement:e}=E,r=iU(Z),c=Z==null,h={},N={name:E.name,primaryKey:{name:null,isPrimaryKey:!0,outbound:c,compound:r,keyPath:Z,autoIncrement:e,unique:!0,extractKey:X0(Z)},indexes:yn(E.indexNames).map(k=>E.index(k)).map(k=>{let{name:t,unique:S,multiEntry:a,keyPath:T}=k,C={name:t,compound:iU(T),keyPath:T,unique:S,multiEntry:a,extractKey:X0(T)};return h[bB(T)]=C,C}),getIndexByKeyPath:k=>h[bB(k)]};return h[":id"]=N.primaryKey,Z!=null&&(h[bB(Z)]=N.primaryKey),N})},hasGetAll:W.length>0&&"getAll"in J.objectStore(W[0])&&!(typeof navigator!="undefined"&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604)}}(F,Q),d=R.tables.map(n=>function(J){let W=J.name;return{name:W,schema:J,mutate:function({trans:E,type:Z,keys:e,values:r,range:c}){return new Promise((h,N)=>{h=ZU(h);let k=E.objectStore(W),t=k.keyPath==null,S=Z==="put"||Z==="add";if(!S&&Z!=="delete"&&Z!=="deleteRange")throw new Error("Invalid operation type: "+Z);let{length:a}=e||r||{length:1};if(e&&r&&e.length!==r.length)throw new Error("Given keys array must have same length as given values array.");if(a===0)return h({numFailures:0,failures:{},results:[],lastResult:void 0});let T,C=[],D=[],p=0,o=v=>{++p,vB(v)};if(Z==="deleteRange"){if(c.type===4)return h({numFailures:p,failures:D,results:[],lastResult:void 0});c.type===3?C.push(T=k.clear()):C.push(T=k.delete(B(c)))}else{let[v,y]=S?t?[r,e]:[r,null]:[e,null];if(S)for(let i=0;i<a;++i)C.push(T=y&&y[i]!==void 0?k[Z](v[i],y[i]):k[Z](v[i])),T.onerror=o;else for(let i=0;i<a;++i)C.push(T=k[Z](v[i])),T.onerror=o}let s=v=>{let y=v.target.result;C.forEach((i,w)=>i.error!=null&&(D[w]=i.error)),h({numFailures:p,failures:D,results:Z==="delete"?e:C.map(i=>i.result),lastResult:y})};T.onerror=v=>{o(v),s(v)},T.onsuccess=s})},getMany:({trans:E,keys:Z})=>new Promise((e,r)=>{e=ZU(e);let c=E.objectStore(W),h=Z.length,N=new Array(h),k,t=0,S=0,a=C=>{let D=C.target;N[D._pos]=D.result,++S===t&&e(N)},T=dF(r);for(let C=0;C<h;++C)Z[C]!=null&&(k=c.get(Z[C]),k._pos=C,k.onsuccess=a,k.onerror=T,++t);t===0&&e(N)}),get:({trans:E,key:Z})=>new Promise((e,r)=>{e=ZU(e);let c=E.objectStore(W).get(Z);c.onsuccess=h=>e(h.target.result),c.onerror=dF(r)}),query:function(E){return Z=>new Promise((e,r)=>{e=ZU(e);let{trans:c,values:h,limit:N,query:k}=Z,t=N===1/0?void 0:N,{index:S,range:a}=k,T=c.objectStore(W),C=S.isPrimaryKey?T:T.index(S.name),D=B(a);if(N===0)return e({result:[]});if(E){let p=h?C.getAll(D,t):C.getAllKeys(D,t);p.onsuccess=o=>e({result:o.target.result}),p.onerror=dF(r)}else{let p=0,o=h||!("openKeyCursor"in C)?C.openCursor(D):C.openKeyCursor(D),s=[];o.onsuccess=v=>{let y=o.result;return y?(s.push(h?y.value:y.primaryKey),++p===N?e({result:s}):void y.continue()):e({result:s})},o.onerror=dF(r)}})}(V),openCursor:function({trans:E,values:Z,query:e,reverse:r,unique:c}){return new Promise((h,N)=>{h=ZU(h);let{index:k,range:t}=e,S=E.objectStore(W),a=k.isPrimaryKey?S:S.index(k.name),T=r?c?"prevunique":"prev":c?"nextunique":"next",C=Z||!("openKeyCursor"in a)?a.openCursor(B(t),T):a.openKeyCursor(B(t),T);C.onerror=dF(N),C.onsuccess=ZU(D=>{let p=C.result;if(!p)return void h(null);p.___id=++ZN,p.done=!1;let o=p.continue.bind(p),s=p.continuePrimaryKey;s&&(s=s.bind(p));let v=p.advance.bind(p),y=()=>{throw new Error("Cursor not stopped")};p.trans=E,p.stop=p.continue=p.continuePrimaryKey=p.advance=()=>{throw new Error("Cursor not started")},p.fail=ZU(N),p.next=function(){let i=1;return this.start(()=>i--?this.continue():this.stop()).then(()=>this)},p.start=i=>{let w=new Promise((L,M)=>{L=ZU(L),C.onerror=dF(M),p.fail=M,p.stop=m=>{p.stop=p.continue=p.continuePrimaryKey=p.advance=y,L(m)}}),g=()=>{if(C.result)try{i()}catch(L){p.fail(L)}else p.done=!0,p.start=()=>{throw new Error("Cursor behind last entry")},p.stop()};return C.onsuccess=ZU(L=>{C.onsuccess=g,g()}),p.continue=o,p.continuePrimaryKey=s,p.advance=v,g(),w},h(p)},N)})},count({query:E,trans:Z}){let{index:e,range:r}=E;return new Promise((c,h)=>{let N=Z.objectStore(W),k=e.isPrimaryKey?N:N.index(e.name),t=B(r),S=t?k.count(t):k.count();S.onsuccess=ZU(a=>c(a.target.result)),S.onerror=dF(h)})}}}(n)),l={};return d.forEach(n=>l[n.name]=n),{stack:"dbcore",transaction:F.transaction.bind(F),table(n){if(!l[n])throw new Error(`Table '${n}' not found`);return l[n]},MIN_KEY:-1/0,MAX_KEY:GB(U),schema:R}}function O0({_novip:F},U){let Q=U.db,B=function(R,V,{IDBKeyRange:d,indexedDB:l},n){return{dbcore:function(W,E){return E.reduce((Z,{create:e})=>z(z({},Z),e(Z)),W)}(NN(V,d,n),R.dbcore)}}(F._middlewares,Q,F._deps,U);F.core=B.dbcore,F.tables.forEach(R=>{let V=R.name;F.core.schema.tables.some(d=>d.name===V)&&(R.core=F.core.table(V),F[V]instanceof F.Table&&(F[V].core=R.core))})}function xR({_novip:F},U,Q,B){Q.forEach(R=>{let V=B[R];U.forEach(d=>{let l=J0(d,R);(!l||"value"in l&&l.value===void 0)&&(d===F.Transaction.prototype||d instanceof F.Transaction?eF(d,R,{get(){return this.table(R)},set(n){ql(this,R,{value:n,writable:!0,configurable:!0,enumerable:!0})}}):d[R]=new F.Table(R,V))})})}function H0({_novip:F},U){U.forEach(Q=>{for(let B in Q)Q[B]instanceof F.Table&&delete Q[B]})}function EN(F,U){return F._cfg.version-U._cfg.version}function tN(F,U,Q,B){let R=F._dbSchema,V=F._createTransaction("readwrite",F._storeNames,R);V.create(Q),V._completion.catch(B);let d=V._reject.bind(V),l=x.transless||x;bF(()=>{x.trans=V,x.transless=l,U===0?(eU(R).forEach(n=>{z0(Q,n,R[n].primKey,R[n].indexes)}),O0(F,Q),b.follow(()=>F.on.populate.fire(V)).catch(d)):function({_novip:n},J,W,E){let Z=[],e=n._versions,r=n._dbSchema=x0(n,n.idbdb,E),c=!1;function h(){return Z.length?b.resolve(Z.shift()(W.idbtrans)).then(h):b.resolve()}return e.filter(N=>N._cfg.version>=J).forEach(N=>{Z.push(()=>{let k=r,t=N._cfg.dbschema;w0(n,k,E),w0(n,t,E),r=n._dbSchema=t;let S=vn(k,t);S.add.forEach(T=>{z0(E,T[0],T[1].primKey,T[1].indexes)}),S.change.forEach(T=>{if(T.recreate)throw new K.Upgrade("Not yet support for changing primary key");{let C=E.objectStore(T.name);T.add.forEach(D=>u0(C,D)),T.change.forEach(D=>{C.deleteIndex(D.name),u0(C,D)}),T.del.forEach(D=>C.deleteIndex(D))}});let a=N._cfg.contentUpgrade;if(a&&N._cfg.version>J){O0(n,E),W._memoizedTables={},c=!0;let T=Fn(t);S.del.forEach(o=>{T[o]=k[o]}),H0(n,[n.Transaction.prototype]),xR(n,[n.Transaction.prototype],eU(T),T),W.schema=T;let C=E0(a),D;C&&GQ();let p=b.follow(()=>{if(D=a(W),D&&C){var o=TF.bind(null,null);D.then(o,o)}});return D&&typeof D.then=="function"?b.resolve(D):p.then(()=>D)}}),Z.push(k=>{(!c||!dN)&&function(t,S){[].slice.call(S.db.objectStoreNames).forEach(a=>t[a]==null&&S.db.deleteObjectStore(a))}(N._cfg.dbschema,k),H0(n,[n.Transaction.prototype]),xR(n,[n.Transaction.prototype],n._storeNames,n._dbSchema),W.schema=n._dbSchema})}),h().then(()=>{var N,k;k=E,eU(N=r).forEach(t=>{k.db.objectStoreNames.contains(t)||z0(k,t,N[t].primKey,N[t].indexes)})})}(F,U,V,Q).catch(d)})}function vn(F,U){let Q={del:[],add:[],change:[]},B;for(B in F)U[B]||Q.del.push(B);for(B in U){let R=F[B],V=U[B];if(R){let d={name:B,def:V,recreate:!1,del:[],add:[],change:[]};if(""+(R.primKey.keyPath||"")!=""+(V.primKey.keyPath||"")||R.primKey.auto!==V.primKey.auto&&!XR)d.recreate=!0,Q.change.push(d);else{let l=R.idxByName,n=V.idxByName,J;for(J in l)n[J]||d.del.push(J);for(J in n){let W=l[J],E=n[J];W?W.src!==E.src&&d.change.push(E):d.add.push(E)}(d.del.length>0||d.add.length>0||d.change.length>0)&&Q.change.push(d)}}else Q.add.push([B,V])}return Q}function z0(F,U,Q,B){let R=F.db.createObjectStore(U,Q.keyPath?{keyPath:Q.keyPath,autoIncrement:Q.auto}:{autoIncrement:Q.auto});return B.forEach(V=>u0(R,V)),R}function u0(F,U){F.createIndex(U.name,U.keyPath,{unique:U.unique,multiEntry:U.multi})}function x0(F,U,Q){let B={};return rR(U.objectStoreNames,0).forEach(R=>{let V=Q.objectStore(R),d=V.keyPath,l=b0(sn(d),d||"",!1,!1,!!V.autoIncrement,d&&typeof d!="string",!0),n=[];for(let W=0;W<V.indexNames.length;++W){let E=V.index(V.indexNames[W]);d=E.keyPath;var J=b0(E.name,d,!!E.unique,!!E.multiEntry,!1,d&&typeof d!="string",!1);n.push(J)}B[R]=Yn(R,l,n)}),B}function w0({_novip:F},U,Q){let B=Q.db.objectStoreNames;for(let R=0;R<B.length;++R){let V=B[R],d=Q.objectStore(V);F._hasGetAll="getAll"in d;for(let l=0;l<d.indexNames.length;++l){let n=d.indexNames[l],J=d.index(n).keyPath,W=typeof J=="string"?J:"["+rR(J).join("+")+"]";if(U[V]){let E=U[V].idxByName[W];E&&(E.name=n,delete U[V].idxByName[W],U[V].idxByName[n]=E)}}}typeof navigator!="undefined"&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&JU.WorkerGlobalScope&&JU instanceof JU.WorkerGlobalScope&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604&&(F._hasGetAll=!1)}var Gn=class{_parseStoresSpec(U,Q){eU(U).forEach(B=>{if(U[B]!==null){var R=U[B].split(",").map((d,l)=>{let n=(d=d.trim()).replace(/([&*]|\+\+)/g,""),J=/^\[/.test(n)?n.match(/^\[(.*)\]$/)[1].split("+"):n;return b0(n,J||null,/\&/.test(d),/\*/.test(d),/\+\+/.test(d),iU(J),l===0)}),V=R.shift();if(V.multi)throw new K.Schema("Primary key cannot be multi-valued");R.forEach(d=>{if(d.auto)throw new K.Schema("Only primary key can be marked as autoIncrement (++)");if(!d.keyPath)throw new K.Schema("Index must have a name and cannot be an empty string")}),Q[B]=Yn(B,V,R)}})}stores(U){let Q=this.db;this._cfg.storesSource=this._cfg.storesSource?GU(this._cfg.storesSource,U):U;let B=Q._versions,R={},V={};return B.forEach(d=>{GU(R,d._cfg.storesSource),V=d._cfg.dbschema={},d._parseStoresSpec(R,V)}),Q._dbSchema=V,H0(Q,[Q._allTables,Q,Q.Transaction.prototype]),xR(Q,[Q._allTables,Q,Q.Transaction.prototype,this._cfg.tables],eU(V),V),Q._storeNames=eU(V),this}upgrade(U){return this._cfg.contentUpgrade=k0(this._cfg.contentUpgrade||dU,U),this}};function L0(F,U){let Q=F._dbNamesDB;return Q||(Q=F._dbNamesDB=new zF("__dbnames",{addons:[],indexedDB:F,IDBKeyRange:U}),Q.version(1).stores({dbnames:"name"})),Q.table("dbnames")}function j0(F){return F&&typeof F.databases=="function"}function I0(F){return bF(function(){return x.letThrough=!0,F()})}function SN(){var F;return!navigator.userAgentData&&/Safari\//.test(navigator.userAgent)&&!/Chrom(e|ium)\//.test(navigator.userAgent)&&indexedDB.databases?new Promise(function(U){var Q=function(){return indexedDB.databases().finally(U)};F=setInterval(Q,100),Q()}).finally(function(){return clearInterval(F)}):Promise.resolve()}function eN(F){let U=F._state,{indexedDB:Q}=F._deps;if(U.isBeingOpened||F.idbdb)return U.dbReadyPromise.then(()=>U.dbOpenError?TU(U.dbOpenError):F);VF&&(U.openCanceller._stackHolder=UQ()),U.isBeingOpened=!0,U.dbOpenError=null,U.openComplete=!1;let B=U.openCanceller;function R(){if(U.openCanceller!==B)throw new K.DatabaseClosed("db.open() was cancelled")}let V=U.dbReadyResolve,d=null,l=!1;return b.race([B,(typeof navigator=="undefined"?b.resolve():SN()).then(()=>new b((n,J)=>{if(R(),!Q)throw new K.MissingAPI;let W=F.name,E=U.autoSchema?Q.open(W):Q.open(W,Math.round(10*F.verno));if(!E)throw new K.MissingAPI;E.onerror=dF(J),E.onblocked=ZU(F._fireOnBlocked),E.onupgradeneeded=ZU(Z=>{if(d=E.transaction,U.autoSchema&&!F._options.allowEmptyDB){E.onerror=vB,d.abort(),E.result.close();let r=Q.deleteDatabase(W);r.onsuccess=r.onerror=ZU(()=>{J(new K.NoSuchDatabase(`Database ${W} doesnt exist`))})}else{d.onerror=dF(J);var e=Z.oldVersion>Math.pow(2,62)?0:Z.oldVersion;l=e<1,F._novip.idbdb=E.result,tN(F,e/10,d,J)}},J),E.onsuccess=ZU(()=>{d=null;let Z=F._novip.idbdb=E.result,e=rR(Z.objectStoreNames);if(e.length>0)try{let c=Z.transaction((r=e).length===1?r[0]:r,"readonly");U.autoSchema?function({_novip:h},N,k){h.verno=N.version/10;let t=h._dbSchema=x0(0,N,k);h._storeNames=rR(N.objectStoreNames,0),xR(h,[h._allTables],eU(t),t)}(F,Z,c):(w0(F,F._dbSchema,c),function(h,N){let k=vn(x0(0,h.idbdb,N),h._dbSchema);return!(k.add.length||k.change.some(t=>t.add.length||t.change.length))}(F,c)||console.warn("Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Some queries may fail.")),O0(F,c)}catch{}var r;sB.push(F),Z.onversionchange=ZU(c=>{U.vcFired=!0,F.on("versionchange").fire(c)}),Z.onclose=ZU(c=>{F.on("close").fire(c)}),l&&function({indexedDB:c,IDBKeyRange:h},N){!j0(c)&&N!=="__dbnames"&&L0(c,h).put({name:N}).catch(dU)}(F._deps,W),n()},J)}))]).then(()=>(R(),U.onReadyBeingFired=[],b.resolve(I0(()=>F.on.ready.fire(F.vip))).then(function n(){if(U.onReadyBeingFired.length>0){let J=U.onReadyBeingFired.reduce(k0,dU);return U.onReadyBeingFired=[],b.resolve(I0(()=>J(F.vip))).then(n)}}))).finally(()=>{U.onReadyBeingFired=null,U.isBeingOpened=!1}).then(()=>F).catch(n=>{U.dbOpenError=n;try{d&&d.abort()}catch{}return B===U.openCanceller&&F._close(),TU(n)}).finally(()=>{U.openComplete=!0,V()})}function f0(F){var U=V=>F.next(V),Q=R(U),B=R(V=>F.throw(V));function R(V){return d=>{var l=V(d),n=l.value;return l.done?n:n&&typeof n.then=="function"?n.then(Q,B):iU(n)?Promise.all(n).then(Q,B):Q(n)}}return R(U)()}function kN(F,U,Q){var B=arguments.length;if(B<2)throw new K.InvalidArgument("Too few arguments");for(var R=new Array(B-1);--B;)R[B-1]=arguments[B];Q=R.pop();var V=Qn(R);return[F,V,Q]}function bn(F,U,Q,B,R){return b.resolve().then(()=>{let V=x.transless||x,d=F._createTransaction(U,Q,F._dbSchema,B),l={trans:d,transless:V};if(B)d.idbtrans=B.idbtrans;else try{d.create(),F._state.PR1398_maxLoop=3}catch(E){return E.name===e0.InvalidState&&F.isOpen()&&--F._state.PR1398_maxLoop>0?(console.warn("Dexie: Need to reopen db"),F._close(),F.open().then(()=>bn(F,U,Q,null,R))):TU(E)}let n=E0(R),J;n&&GQ();let W=b.follow(()=>{if(J=R.call(d,d),J)if(n){var E=TF.bind(null,null);J.then(E,E)}else typeof J.next=="function"&&typeof J.throw=="function"&&(J=f0(J))},l);return(J&&typeof J.then=="function"?b.resolve(J).then(E=>d.active?E:TU(new K.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn"))):W.then(()=>J)).then(E=>(B&&d._resolve(),d._completion.then(()=>E))).catch(E=>(d._reject(E),TU(E)))})}function wR(F,U,Q){let B=iU(F)?F.slice():[F];for(let R=0;R<Q;++R)B.push(U);return B}var aN={stack:"dbcore",name:"VirtualIndexMiddleware",level:1,create:function(F){return _(z({},F),{table(U){let Q=F.table(U),{schema:B}=Q,R={},V=[];function d(W,E,Z){let e=bB(W),r=R[e]=R[e]||[],c=W==null?0:typeof W=="string"?1:W.length,h=E>0,N=_(z({},Z),{isVirtual:h,keyTail:E,keyLength:c,extractKey:X0(W),unique:!h&&Z.unique});return r.push(N),N.isPrimaryKey||V.push(N),c>1&&d(c===2?W[0]:W.slice(0,c-1),E+1,Z),r.sort((k,t)=>k.keyTail-t.keyTail),N}let l=d(B.primaryKey.keyPath,0,B.primaryKey);R[":id"]=[l];for(let W of B.indexes)d(W.keyPath,0,W);function n(W){let E=W.query.index;return E.isVirtual?_(z({},W),{query:{index:E,range:(Z=W.query.range,e=E.keyTail,{type:Z.type===1?2:Z.type,lower:wR(Z.lower,Z.lowerOpen?F.MAX_KEY:F.MIN_KEY,e),lowerOpen:!0,upper:wR(Z.upper,Z.upperOpen?F.MIN_KEY:F.MAX_KEY,e),upperOpen:!0})}}):W;var Z,e}return _(z({},Q),{schema:_(z({},B),{primaryKey:l,indexes:V,getIndexByKeyPath:function(W){let E=R[bB(W)];return E&&E[0]}}),count:W=>Q.count(n(W)),query:W=>Q.query(n(W)),openCursor(W){let{keyTail:E,isVirtual:Z,keyLength:e}=W.query.index;return Z?Q.openCursor(n(W)).then(r=>r&&function(c){return Object.create(c,{continue:{value:function(N){N!=null?c.continue(wR(N,W.reverse?F.MAX_KEY:F.MIN_KEY,E)):W.unique?c.continue(c.key.slice(0,e).concat(W.reverse?F.MIN_KEY:F.MAX_KEY,E)):c.continue()}},continuePrimaryKey:{value(N,k){c.continuePrimaryKey(wR(N,F.MAX_KEY,E),k)}},primaryKey:{get:()=>c.primaryKey},key:{get(){let N=c.key;return e===1?N[0]:N.slice(0,e)}},value:{get:()=>c.value}})}(r)):Q.openCursor(W)}})}})}};function K0(F,U,Q,B){return Q=Q||{},B=B||"",eU(F).forEach(R=>{if(jU(U,R)){var V=F[R],d=U[R];if(typeof V=="object"&&typeof d=="object"&&V&&d){let l=Z0(V);l!==Z0(d)?Q[B+R]=U[R]:l==="Object"?K0(V,d,Q,B+R+"."):V!==d&&(Q[B+R]=U[R])}else V!==d&&(Q[B+R]=U[R])}else Q[B+R]=void 0}),eU(U).forEach(R=>{jU(F,R)||(Q[B+R]=U[R])}),Q}var TN={stack:"dbcore",name:"HooksMiddleware",level:2,create:F=>_(z({},F),{table(U){let Q=F.table(U),{primaryKey:B}=Q.schema;return _(z({},Q),{mutate(V){let d=x.trans,{deleting:l,creating:n,updating:J}=d.table(U).hook;switch(V.type){case"add":if(n.fire===dU)break;return d._promise("readwrite",()=>W(V),!0);case"put":if(n.fire===dU&&J.fire===dU)break;return d._promise("readwrite",()=>W(V),!0);case"delete":if(l.fire===dU)break;return d._promise("readwrite",()=>W(V),!0);case"deleteRange":if(l.fire===dU)break;return d._promise("readwrite",()=>function(Z){return E(Z.trans,Z.range,1e4)}(V),!0)}return Q.mutate(V);function W(Z){let e=x.trans,r=Z.keys||function(c,h){return h.type==="delete"?h.keys:h.keys||h.values.map(c.extractKey)}(B,Z);if(!r)throw new Error("Keys missing");return(Z=Z.type==="add"||Z.type==="put"?_(z({},Z),{keys:r}):z({},Z)).type!=="delete"&&(Z.values=[...Z.values]),Z.keys&&(Z.keys=[...Z.keys]),function(c,h,N){return h.type==="add"?Promise.resolve([]):c.getMany({trans:h.trans,keys:N,cache:"immutable"})}(Q,Z,r).then(c=>{let h=r.map((N,k)=>{let t=c[k],S={onerror:null,onsuccess:null};if(Z.type==="delete")l.fire.call(S,N,t,e);else if(Z.type==="add"||t===void 0){let a=n.fire.call(S,N,Z.values[k],e);N==null&&a!=null&&(N=a,Z.keys[k]=N,B.outbound||AU(Z.values[k],B.keyPath,N))}else{let a=K0(t,Z.values[k]),T=J.fire.call(S,a,N,t,e);if(T){let C=Z.values[k];Object.keys(T).forEach(D=>{jU(C,D)?C[D]=T[D]:AU(C,D,T[D])})}}return S});return Q.mutate(Z).then(({failures:N,results:k,numFailures:t,lastResult:S})=>{for(let a=0;a<r.length;++a){let T=k?k[a]:r[a],C=h[a];T==null?C.onerror&&C.onerror(N[a]):C.onsuccess&&C.onsuccess(Z.type==="put"&&c[a]?Z.values[a]:T)}return{failures:N,results:k,numFailures:t,lastResult:S}}).catch(N=>(h.forEach(k=>k.onerror&&k.onerror(N)),Promise.reject(N)))})}function E(Z,e,r){return Q.query({trans:Z,values:!1,query:{index:B,range:e},limit:r}).then(({result:c})=>W({type:"delete",keys:c,trans:Z}).then(h=>h.numFailures>0?Promise.reject(h.failures[0]):c.length<r?{failures:[],numFailures:0,lastResult:void 0}:E(Z,_(z({},e),{lower:c[c.length-1],lowerOpen:!0}),r)))}}})}})};function Xn(F,U,Q){try{if(!U||U.keys.length<F.length)return null;let B=[];for(let R=0,V=0;R<U.keys.length&&V<F.length;++R)bU(U.keys[R],F[V])===0&&(B.push(Q?rB(U.values[R]):U.values[R]),++V);return B.length===F.length?B:null}catch{return null}}var hN={stack:"dbcore",level:-1,create:F=>({table:U=>{let Q=F.table(U);return _(z({},Q),{getMany:B=>{if(!B.cache)return Q.getMany(B);let R=Xn(B.keys,B.trans._cache,B.cache==="clone");return R?b.resolve(R):Q.getMany(B).then(V=>(B.trans._cache={keys:B.keys,values:B.cache==="clone"?rB(V):V},V))},mutate:B=>(B.type!=="add"&&(B.trans._cache=null),Q.mutate(B))})}})};function g0(F){return!("from"in F)}var cF=function(F,U){if(!this){let Q=new cF;return F&&"d"in F&&GU(Q,F),Q}GU(this,arguments.length?{d:1,from:F,to:arguments.length>1?U:F}:{d:0})};function XB(F,U,Q){let B=bU(U,Q);if(isNaN(B))return;if(B>0)throw RangeError();if(g0(F))return GU(F,{from:U,to:Q,d:1});let R=F.l,V=F.r;if(bU(Q,F.from)<0)return R?XB(R,U,Q):F.l={from:U,to:Q,d:1,l:null,r:null},On(F);if(bU(U,F.to)>0)return V?XB(V,U,Q):F.r={from:U,to:Q,d:1,l:null,r:null},On(F);bU(U,F.from)<0&&(F.from=U,F.l=null,F.d=V?V.d+1:1),bU(Q,F.to)>0&&(F.to=Q,F.r=null,F.d=F.l?F.l.d+1:1);let d=!F.r;R&&!F.l&&LR(F,R),V&&d&&LR(F,V)}function LR(F,U){g0(U)||function Q(B,{from:R,to:V,l:d,r:l}){XB(B,R,V),d&&Q(B,d),l&&Q(B,l)}(F,U)}function P0(F){let U=g0(F)?null:{s:0,n:F};return{next(Q){let B=arguments.length>0;for(;U;)switch(U.s){case 0:if(U.s=1,B)for(;U.n.l&&bU(Q,U.n.from)<0;)U={up:U,n:U.n.l,s:1};else for(;U.n.l;)U={up:U,n:U.n.l,s:1};case 1:if(U.s=2,!B||bU(Q,U.n.to)<=0)return{value:U.n,done:!1};case 2:if(U.n.r){U.s=3,U={up:U,n:U.n.r,s:0};continue}case 3:U=U.up}return{done:!0}}}}function On(F){var U,Q;let B=(((U=F.r)===null||U===void 0?void 0:U.d)||0)-(((Q=F.l)===null||Q===void 0?void 0:Q.d)||0),R=B>1?"r":B<-1?"l":"";if(R){let V=R==="r"?"l":"r",d=z({},F),l=F[R];F.from=l.from,F.to=l.to,F[R]=l[R],d[R]=l[V],F[V]=d,d.d=Hn(d)}F.d=Hn(F)}function Hn({r:F,l:U}){return(F?U?Math.max(F.d,U.d):F.d:U?U.d:0)+1}iQ(cF.prototype,{add(F){return LR(this,F),this},addKey(F){return XB(this,F,F),this},addKeys(F){return F.forEach(U=>XB(this,U,U)),this},[N0](){return P0(this)}});var cN={stack:"dbcore",level:0,create:F=>{let U=F.schema.name,Q=new cF(F.MIN_KEY,F.MAX_KEY);return _(z({},F),{table:B=>{let R=F.table(B),{schema:V}=R,{primaryKey:d}=V,{extractKey:l,outbound:n}=d,J=_(z({},R),{mutate:Z=>{let e=Z.trans,r=e.mutatedParts||(e.mutatedParts={}),c=T=>{let C=`idb://${U}/${B}/${T}`;return r[C]||(r[C]=new cF)},h=c(""),N=c(":dels"),{type:k}=Z,[t,S]=Z.type==="deleteRange"?[Z.range]:Z.type==="delete"?[Z.keys]:Z.values.length<50?[[],Z.values]:[],a=Z.trans._cache;return R.mutate(Z).then(T=>{if(iU(t)){k!=="delete"&&(t=T.results),h.addKeys(t);let C=Xn(t,a);C||k==="add"||N.addKeys(t),(C||S)&&function(D,p,o,s){function v(y){let i=D(y.name||"");function w(L){return L!=null?y.extractKey(L):null}let g=L=>y.multiEntry&&iU(L)?L.forEach(M=>i.addKey(M)):i.addKey(L);(o||s).forEach((L,M)=>{let m=o&&w(o[M]),Y=s&&w(s[M]);bU(m,Y)!==0&&(m!=null&&g(m),Y!=null&&g(Y))})}p.indexes.forEach(v)}(c,V,C,S)}else if(t){let C={from:t.lower,to:t.upper};N.add(C),h.add(C)}else h.add(Q),N.add(Q),V.indexes.forEach(C=>c(C.name).add(Q));return T})}}),W=({query:{index:Z,range:e}})=>{var r,c;return[Z,new cF((r=e.lower)!==null&&r!==void 0?r:F.MIN_KEY,(c=e.upper)!==null&&c!==void 0?c:F.MAX_KEY)]},E={get:Z=>[d,new cF(Z.key)],getMany:Z=>[d,new cF().addKeys(Z.keys)],count:W,query:W,openCursor:W};return eU(E).forEach(Z=>{J[Z]=function(e){let{subscr:r}=x;if(r){let c=S=>{let a=`idb://${U}/${B}/${S}`;return r[a]||(r[a]=new cF)},h=c(""),N=c(":dels"),[k,t]=E[Z](e);if(c(k.name||"").add(t),!k.isPrimaryKey){if(Z!=="count"){let S=Z==="query"&&n&&e.values&&R.query(_(z({},e),{values:!1}));return R[Z].apply(this,arguments).then(a=>{if(Z==="query"){if(n&&e.values)return S.then(({result:C})=>(h.addKeys(C),a));let T=e.values?a.result.map(l):a.result;e.values?h.addKeys(T):N.addKeys(T)}else if(Z==="openCursor"){let T=a,C=e.values;return T&&Object.create(T,{key:{get:()=>(N.addKey(T.primaryKey),T.key)},primaryKey:{get(){let D=T.primaryKey;return N.addKey(D),D}},value:{get:()=>(C&&h.addKey(T.primaryKey),T.value)}})}return a})}N.add(Q)}}return R[Z].apply(this,arguments)}}),J}})}},zF=class{constructor(U,Q){this._middlewares={},this.verno=0;let B=zF.dependencies;this._options=Q=z({addons:zF.addons,autoOpen:!0,indexedDB:B.indexedDB,IDBKeyRange:B.IDBKeyRange},Q),this._deps={indexedDB:Q.indexedDB,IDBKeyRange:Q.IDBKeyRange};let{addons:R}=Q;this._dbSchema={},this._versions=[],this._storeNames=[],this._allTables={},this.idbdb=null,this._novip=this;let V={dbOpenError:null,isBeingOpened:!1,onReadyBeingFired:null,openComplete:!1,dbReadyResolve:dU,dbReadyPromise:null,cancelOpen:dU,openCanceller:null,autoSchema:!0,PR1398_maxLoop:3};var d;V.dbReadyPromise=new b(l=>{V.dbReadyResolve=l}),V.openCanceller=new b((l,n)=>{V.cancelOpen=n}),this._state=V,this.name=U,this.on=YB(this,"populate","blocked","versionchange","close",{ready:[k0,dU]}),this.on.ready.subscribe=Al(this.on.ready.subscribe,l=>(n,J)=>{zF.vip(()=>{let W=this._state;if(W.openComplete)W.dbOpenError||b.resolve().then(n),J&&l(n);else if(W.onReadyBeingFired)W.onReadyBeingFired.push(n),J&&l(n);else{l(n);let E=this;J||l(function Z(){E.on.ready.unsubscribe(n),E.on.ready.unsubscribe(Z)})}})}),this.Collection=(d=this,yB(mn.prototype,function(l,n){this.db=d;let J=hn,W=null;if(n)try{J=n()}catch(r){W=r}let E=l._ctx,Z=E.table,e=Z.hook.reading.fire;this._ctx={table:Z,index:E.index,isPrimKey:!E.index||Z.schema.primKey.keyPath&&E.index===Z.schema.primKey.name,range:J,keysOnly:!1,dir:"next",unique:"",algorithm:null,filter:null,replayFilter:null,justLimit:!0,isMatch:null,offset:0,limit:1/0,error:W,or:E.or,valueMapper:e!==DB?e:null}})),this.Table=function(l){return yB(cn.prototype,function(n,J,W){this.db=l,this._tx=W,this.name=n,this.schema=J,this.hook=l._allTables[n]?l._allTables[n].hook:YB(null,{creating:[_Z,dU],reading:[PZ,DB],updating:[AZ,dU],deleting:[qZ,dU]})})}(this),this.Transaction=function(l){return yB(on.prototype,function(n,J,W,E,Z){this.db=l,this.mode=n,this.storeNames=J,this.schema=W,this.chromeTransactionDurability=E,this.idbtrans=null,this.on=YB(this,"complete","error","abort"),this.parent=Z||null,this.active=!0,this._reculock=0,this._blockedFuncs=[],this._resolve=null,this._reject=null,this._waitingFor=null,this._waitingQueue=null,this._spinCount=0,this._completion=new b((e,r)=>{this._resolve=e,this._reject=r}),this._completion.then(()=>{this.active=!1,this.on.complete.fire()},e=>{var r=this.active;return this.active=!1,this.on.error.fire(e),this.parent?this.parent._reject(e):r&&this.idbtrans&&this.idbtrans.abort(),TU(e)})})}(this),this.Version=function(l){return yB(Gn.prototype,function(n){this.db=l,this._cfg={version:n,storesSource:null,dbschema:{},tables:{},contentUpgrade:null}})}(this),this.WhereClause=function(l){return yB(G0.prototype,function(n,J,W){this.db=l,this._ctx={table:n,index:J===":id"?null:J,or:W};let E=l._deps.indexedDB;if(!E)throw new K.MissingAPI;this._cmp=this._ascending=E.cmp.bind(E),this._descending=(Z,e)=>E.cmp(e,Z),this._max=(Z,e)=>E.cmp(Z,e)>0?Z:e,this._min=(Z,e)=>E.cmp(Z,e)<0?Z:e,this._IDBKeyRange=l._deps.IDBKeyRange})}(this),this.on("versionchange",l=>{l.newVersion>0?console.warn(`Another connection wants to upgrade database '${this.name}'. Closing db now to resume the upgrade.`):console.warn(`Another connection wants to delete database '${this.name}'. Closing db now to resume the delete request.`),this.close()}),this.on("blocked",l=>{!l.newVersion||l.newVersion<l.oldVersion?console.warn(`Dexie.delete('${this.name}') was blocked`):console.warn(`Upgrade '${this.name}' blocked by other connection holding version ${l.oldVersion/10}`)}),this._maxKey=GB(Q.IDBKeyRange),this._createTransaction=(l,n,J,W)=>new this.Transaction(l,n,J,this._options.chromeTransactionDurability,W),this._fireOnBlocked=l=>{this.on("blocked").fire(l),sB.filter(n=>n.name===this.name&&n!==this&&!n._state.vcFired).map(n=>n.on("versionchange").fire(l))},this.use(aN),this.use(TN),this.use(cN),this.use(hN),this.vip=Object.create(this,{_vip:{value:!0}}),R.forEach(l=>l(this))}version(U){if(isNaN(U)||U<.1)throw new K.Type("Given version is not a positive number");if(U=Math.round(10*U)/10,this.idbdb||this._state.isBeingOpened)throw new K.Schema("Cannot add version when database is open");this.verno=Math.max(this.verno,U);let Q=this._versions;var B=Q.filter(R=>R._cfg.version===U)[0];return B||(B=new this.Version(U),Q.push(B),Q.sort(EN),B.stores({}),this._state.autoSchema=!1,B)}_whenReady(U){return this.idbdb&&(this._state.openComplete||x.letThrough||this._vip)?U():new b((Q,B)=>{if(this._state.openComplete)return B(new K.DatabaseClosed(this._state.dbOpenError));if(!this._state.isBeingOpened){if(!this._options.autoOpen)return void B(new K.DatabaseClosed);this.open().catch(dU)}this._state.dbReadyPromise.then(Q,B)}).then(U)}use({stack:U,create:Q,level:B,name:R}){R&&this.unuse({stack:U,name:R});let V=this._middlewares[U]||(this._middlewares[U]=[]);return V.push({stack:U,create:Q,level:B??10,name:R}),V.sort((d,l)=>d.level-l.level),this}unuse({stack:U,name:Q,create:B}){return U&&this._middlewares[U]&&(this._middlewares[U]=this._middlewares[U].filter(R=>B?R.create!==B:!!Q&&R.name!==Q)),this}open(){return eN(this)}_close(){let U=this._state,Q=sB.indexOf(this);if(Q>=0&&sB.splice(Q,1),this.idbdb){try{this.idbdb.close()}catch{}this._novip.idbdb=null}U.dbReadyPromise=new b(B=>{U.dbReadyResolve=B}),U.openCanceller=new b((B,R)=>{U.cancelOpen=R})}close(){this._close();let U=this._state;this._options.autoOpen=!1,U.dbOpenError=new K.DatabaseClosed,U.isBeingOpened&&U.cancelOpen(U.dbOpenError)}delete(){let U=arguments.length>0,Q=this._state;return new b((B,R)=>{let V=()=>{this.close();var d=this._deps.indexedDB.deleteDatabase(this.name);d.onsuccess=ZU(()=>{(function({indexedDB:l,IDBKeyRange:n},J){!j0(l)&&J!=="__dbnames"&&L0(l,n).delete(J).catch(dU)})(this._deps,this.name),B()}),d.onerror=dF(R),d.onblocked=this._fireOnBlocked};if(U)throw new K.InvalidArgument("Arguments not allowed in db.delete()");Q.isBeingOpened?Q.dbReadyPromise.then(V):V()})}backendDB(){return this.idbdb}isOpen(){return this.idbdb!==null}hasBeenClosed(){let U=this._state.dbOpenError;return U&&U.name==="DatabaseClosed"}hasFailed(){return this._state.dbOpenError!==null}dynamicallyOpened(){return this._state.autoSchema}get tables(){return eU(this._allTables).map(U=>this._allTables[U])}transaction(){let U=kN.apply(this,arguments);return this._transaction.apply(this,U)}_transaction(U,Q,B){let R=x.trans;R&&R.db===this&&U.indexOf("!")===-1||(R=null);let V=U.indexOf("?")!==-1,d,l;U=U.replace("!","").replace("?","");try{if(l=Q.map(J=>{var W=J instanceof this.Table?J.name:J;if(typeof W!="string")throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");return W}),U=="r"||U==="readonly")d="readonly";else{if(U!="rw"&&U!="readwrite")throw new K.InvalidArgument("Invalid transaction mode: "+U);d="readwrite"}if(R){if(R.mode==="readonly"&&d==="readwrite"){if(!V)throw new K.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");R=null}R&&l.forEach(J=>{if(R&&R.storeNames.indexOf(J)===-1){if(!V)throw new K.SubTransaction("Table "+J+" not included in parent transaction.");R=null}}),V&&R&&!R.active&&(R=null)}}catch(J){return R?R._promise(null,(W,E)=>{E(J)}):TU(J)}let n=bn.bind(null,this,d,l,R,B);return R?R._promise(d,n,"lock"):x.trans?bQ(x.transless,()=>this._whenReady(n)):this._whenReady(n)}table(U){if(!jU(this._allTables,U))throw new K.InvalidTable(`Table ${U} does not exist`);return this._allTables[U]}},rN=typeof Symbol!="undefined"&&"observable"in Symbol?Symbol.observable:"@@observable",zn=class{constructor(U){this._subscribe=U}subscribe(U,Q,B){return this._subscribe(U&&typeof U!="function"?U:{next:U,error:Q,complete:B})}[rN](){return this}};function un(F,U){return eU(U).forEach(Q=>{LR(F[Q]||(F[Q]=new cF),U[Q])}),F}var _0;try{_0={indexedDB:JU.indexedDB||JU.mozIndexedDB||JU.webkitIndexedDB||JU.msIndexedDB,IDBKeyRange:JU.IDBKeyRange||JU.webkitIDBKeyRange}}catch{_0={indexedDB:null,IDBKeyRange:null}}var dQ=zF;function jR(F){let U=rF;try{rF=!0,HF.storagemutated.fire(F)}finally{rF=U}}iQ(dQ,_(z({},DR),{delete:F=>new dQ(F,{addons:[]}).delete(),exists:F=>new dQ(F,{addons:[]}).open().then(U=>(U.close(),!0)).catch("NoSuchDatabaseError",()=>!1),getDatabaseNames(F){try{return function({indexedDB:U,IDBKeyRange:Q}){return j0(U)?Promise.resolve(U.databases()).then(B=>B.map(R=>R.name).filter(R=>R!=="__dbnames")):L0(U,Q).toCollection().primaryKeys()}(dQ.dependencies).then(F)}catch{return TU(new K.MissingAPI)}},defineClass:()=>function(F){GU(this,F)},ignoreTransaction:F=>x.trans?bQ(x.transless,F):F(),vip:I0,async:function(F){return function(){try{var U=f0(F.apply(this,arguments));return U&&typeof U.then=="function"?U:b.resolve(U)}catch(Q){return TU(Q)}}},spawn:function(F,U,Q){try{var B=f0(F.apply(Q,U||[]));return B&&typeof B.then=="function"?B:b.resolve(B)}catch(R){return TU(R)}},currentTransaction:{get:()=>x.trans||null},waitFor:function(F,U){let Q=b.resolve(typeof F=="function"?dQ.ignoreTransaction(F):F).timeout(U||6e4);return x.trans?x.trans.waitFor(Q):Q},Promise:b,debug:{get:()=>VF,set:F=>{Rn(F,F==="dexie"?()=>!0:Tn)}},derive:sQ,extend:GU,props:iQ,override:Al,Events:YB,on:HF,liveQuery:function(F){return new zn(U=>{let Q=E0(F),B=!1,R={},V={},d={get closed(){return B},unsubscribe:()=>{B=!0,HF.storagemutated.unsubscribe(W)}};U.start&&U.start(d);let l=!1,n=!1;function J(){return eU(V).some(Z=>R[Z]&&function(e,r){let c=P0(r),h=c.next();if(h.done)return!1;let N=h.value,k=P0(e),t=k.next(N.from),S=t.value;for(;!h.done&&!t.done;){if(bU(S.from,N.to)<=0&&bU(S.to,N.from)>=0)return!0;bU(N.from,S.from)<0?N=(h=c.next(S.from)).value:S=(t=k.next(N.from)).value}return!1}(R[Z],V[Z]))}let W=Z=>{un(R,Z),J()&&E()},E=()=>{if(l||B)return;R={};let Z={},e=function(r){Q&&GQ();let c=()=>bF(F,{subscr:r,trans:null}),h=x.trans?bQ(x.transless,c):c();return Q&&h.then(TF,TF),h}(Z);n||(HF("storagemutated",W),n=!0),l=!0,Promise.resolve(e).then(r=>{l=!1,B||(J()?E():(R={},V=Z,U.next&&U.next(r)))},r=>{l=!1,U.error&&U.error(r),d.unsubscribe()})};return E(),d})},extendObservabilitySet:un,getByKeyPath:kF,setByKeyPath:AU,delByKeyPath:function(F,U){typeof U=="string"?AU(F,U,void 0):"length"in U&&[].map.call(U,function(Q){AU(F,Q,void 0)})},shallowClone:Fn,deepClone:rB,getObjectDiff:K0,cmp:bU,asap:$l,minKey:-(1/0),addons:[],connections:sB,errnames:e0,dependencies:_0,semVer:"3.2.2",version:"3.2.2".split(".").map(F=>parseInt(F)).reduce((F,U,Q)=>F+U/Math.pow(10,2*Q))})),dQ.maxKey=GB(dQ.dependencies.IDBKeyRange),typeof dispatchEvent!="undefined"&&typeof addEventListener!="undefined"&&(HF("storagemutated",F=>{if(!rF){let U;XR?(U=document.createEvent("CustomEvent"),U.initCustomEvent("x-storagemutated-1",!0,!0,F)):U=new CustomEvent("x-storagemutated-1",{detail:F}),rF=!0,dispatchEvent(U),rF=!1}}),addEventListener("x-storagemutated-1",({detail:F})=>{rF||jR(F)}));var rF=!1;if(typeof BroadcastChannel!="undefined"){let F=new BroadcastChannel("x-storagemutated-1");HF("storagemutated",U=>{rF||F.postMessage(U)}),F.onmessage=U=>{U.data&&jR(U.data)}}else if(typeof self!="undefined"&&typeof navigator!="undefined"){HF("storagemutated",U=>{try{rF||(typeof localStorage!="undefined"&&localStorage.setItem("x-storagemutated-1",JSON.stringify({trig:Math.random(),changedParts:U})),typeof self.clients=="object"&&[...self.clients.matchAll({includeUncontrolled:!0})].forEach(Q=>Q.postMessage({type:"x-storagemutated-1",changedParts:U})))}catch{}}),typeof addEventListener!="undefined"&&addEventListener("storage",U=>{if(U.key==="x-storagemutated-1"){let Q=JSON.parse(U.newValue);Q&&jR(Q.changedParts)}});let F=self.document&&navigator.serviceWorker;F&&F.addEventListener("message",function({data:U}){U&&U.type==="x-storagemutated-1"&&jR(U.changedParts)})}b.rejectionMapper=function(F,U){if(!F||F instanceof yQ||F instanceof TypeError||F instanceof SyntaxError||!F.name||!nn[F.name])return F;var Q=new nn[F.name](U||F.message,F);return"stack"in F&&eF(Q,"stack",{get:function(){return this.inner.stack}}),Q},Rn(VF,Tn);var CF=new class extends zF{constructor(){super("obsidian-text-extract/cache/"+app.appId),this.version(3).stores({pdf:"path, hash, size",images:"path, hash, size"}),this.clearOldDatabases()}clearOldDatabases(){indexedDB.deleteDatabase("obsidian-text-extract/cache")}},xn=class{value;next;constructor(U){this.value=U}},wn=class{#U;#F;#Q;constructor(){this.clear()}enqueue(U){let Q=new xn(U);this.#U?(this.#F.next=Q,this.#F=Q):(this.#U=Q,this.#F=Q),this.#Q++}dequeue(){let U=this.#U;if(U)return this.#U=this.#U.next,this.#Q--,U.value}clear(){this.#U=void 0,this.#F=void 0,this.#Q=0}get size(){return this.#Q}*[Symbol.iterator](){let U=this.#U;for(;U;)yield U.value,U=U.next}},Ln=TB.Platform.isMobileApp?1:require("os").cpus().length,IR=Math.max(1,Math.floor(.7*Ln));IR==Ln&&(IR=1);var q0=Symbol.for("be.scambier.obsidian-text-extract");globalThis[q0]||(console.info("Text Extract - Number of available workers: "+IR),globalThis[q0]=function(F){if(!Number.isInteger(F)&&F!==Number.POSITIVE_INFINITY||!(F>0))throw new TypeError("Expected `concurrency` to be a number from 1 and up");let U=new wn,Q=0,B=async(V,d,l)=>{Q++;let n=(async()=>V(...l))();d(n);try{await n}catch{}Q--,U.size>0&&U.dequeue()()},R=(V,...d)=>new Promise(l=>{((n,J,W)=>{U.enqueue(B.bind(void 0,n,J,W)),(async()=>{await Promise.resolve(),Q<F&&U.size>0&&U.dequeue()()})()})(V,l,d)});return Object.defineProperties(R,{activeCount:{get:()=>Q},pendingCount:{get:()=>U.size},clearQueue:{value:()=>{U.clear()}}}),R}(IR));var jn=globalThis[q0],lQ=class{constructor(U){this.worker=U,this.running=!1}static getWorker(){let U=lQ.pool.find(B=>!B.running);if(U)return U;let Q=new lQ(new HZ({name:"PDF Text Extractor"}));return lQ.pool.push(Q),Q}async run(U){return new Promise((Q,B)=>{this.running=!0;let R=setTimeout(()=>{this.worker.terminate(),console.warn("Omnisearch - Worker timeout"),B("timeout"),this.running=!1},12e4);this.worker.postMessage(U),this.worker.onmessage=V=>{clearTimeout(R),Q(V),this.running=!1}})}};lQ.pool=[];var In=new class{async getPdfText(F){return TB.Platform.isMobile?"":jn(this._getPdfText,F)}async _getPdfText(F){let U=await CF.pdf.get({path:F.path,size:F.stat.size});if(U)return U.text;let Q=new Uint8Array(await app.vault.readBinary(F)),B=_l(Q),R=await CF.pdf.get(B);if(R)return R.text;let V=lQ.getWorker();return new Promise(async(d,l)=>{try{let n=(await V.run({data:Q,name:F.basename})).data.text.replace(/\n/g," ").replace(/ +/g," ").trim();CF.pdf.add({hash:B,text:n,path:F.path,size:F.stat.size,libVersion:"1.0.4"}).then(()=>{d(n)})}catch{CF.pdf.add({hash:B,text:"",path:F.path,size:F.stat.size,libVersion:"1.0.4"}).then(()=>{d("")})}})}async cleanCache(){CF.pdf.each(async F=>{await app.vault.adapter.exists(F.path)||console.log(F.path+" does not exist")})}};(function(F){var U=function(Q){var B,R=Object.prototype,V=R.hasOwnProperty,d=Object.defineProperty||function(M,m,Y){M[m]=Y.value},l=typeof Symbol=="function"?Symbol:{},n=l.iterator||"@@iterator",J=l.asyncIterator||"@@asyncIterator",W=l.toStringTag||"@@toStringTag";function E(M,m,Y){return Object.defineProperty(M,m,{value:Y,enumerable:!0,configurable:!0,writable:!0}),M[m]}try{E({},"")}catch{E=function(m,Y,I){return m[Y]=I}}function Z(M,m,Y,I){var X=m&&m.prototype instanceof k?m:k,lU=Object.create(X.prototype),EU=new w(I||[]);return d(lU,"_invoke",{value:s(M,Y,EU)}),lU}function e(M,m,Y){try{return{type:"normal",arg:M.call(m,Y)}}catch(I){return{type:"throw",arg:I}}}Q.wrap=Z;var r="suspendedStart",c="executing",h="completed",N={};function k(){}function t(){}function S(){}var a={};E(a,n,function(){return this});var T=Object.getPrototypeOf,C=T&&T(T(g([])));C&&C!==R&&V.call(C,n)&&(a=C);var D=S.prototype=k.prototype=Object.create(a);function p(M){["next","throw","return"].forEach(function(m){E(M,m,function(Y){return this._invoke(m,Y)})})}function o(M,m){function Y(X,lU,EU,zU){var uU=e(M[X],M,lU);if(uU.type!=="throw"){var ZQ=uU.arg,xQ=ZQ.value;return xQ&&typeof xQ=="object"&&V.call(xQ,"__await")?m.resolve(xQ.__await).then(function(xF){Y("next",xF,EU,zU)},function(xF){Y("throw",xF,EU,zU)}):m.resolve(xQ).then(function(xF){ZQ.value=xF,EU(ZQ)},function(xF){return Y("throw",xF,EU,zU)})}zU(uU.arg)}var I;d(this,"_invoke",{value:function(X,lU){function EU(){return new m(function(zU,uU){Y(X,lU,zU,uU)})}return I=I?I.then(EU,EU):EU()}})}function s(M,m,Y){var I=r;return function(X,lU){if(I===c)throw new Error("Generator is already running");if(I===h){if(X==="throw")throw lU;return L()}for(Y.method=X,Y.arg=lU;;){var EU=Y.delegate;if(EU){var zU=v(EU,Y);if(zU){if(zU===N)continue;return zU}}if(Y.method==="next")Y.sent=Y._sent=Y.arg;else if(Y.method==="throw"){if(I===r)throw I=h,Y.arg;Y.dispatchException(Y.arg)}else Y.method==="return"&&Y.abrupt("return",Y.arg);I=c;var uU=e(M,m,Y);if(uU.type==="normal"){if(I=Y.done?h:"suspendedYield",uU.arg===N)continue;return{value:uU.arg,done:Y.done}}uU.type==="throw"&&(I=h,Y.method="throw",Y.arg=uU.arg)}}}function v(M,m){var Y=M.iterator[m.method];if(Y===B){if(m.delegate=null,m.method==="throw"){if(M.iterator.return&&(m.method="return",m.arg=B,v(M,m),m.method==="throw"))return N;m.method="throw",m.arg=new TypeError("The iterator does not provide a 'throw' method")}return N}var I=e(Y,M.iterator,m.arg);if(I.type==="throw")return m.method="throw",m.arg=I.arg,m.delegate=null,N;var X=I.arg;return X?X.done?(m[M.resultName]=X.value,m.next=M.nextLoc,m.method!=="return"&&(m.method="next",m.arg=B),m.delegate=null,N):X:(m.method="throw",m.arg=new TypeError("iterator result is not an object"),m.delegate=null,N)}function y(M){var m={tryLoc:M[0]};1 in M&&(m.catchLoc=M[1]),2 in M&&(m.finallyLoc=M[2],m.afterLoc=M[3]),this.tryEntries.push(m)}function i(M){var m=M.completion||{};m.type="normal",delete m.arg,M.completion=m}function w(M){this.tryEntries=[{tryLoc:"root"}],M.forEach(y,this),this.reset(!0)}function g(M){if(M){var m=M[n];if(m)return m.call(M);if(typeof M.next=="function")return M;if(!isNaN(M.length)){var Y=-1,I=function X(){for(;++Y<M.length;)if(V.call(M,Y))return X.value=M[Y],X.done=!1,X;return X.value=B,X.done=!0,X};return I.next=I}}return{next:L}}function L(){return{value:B,done:!0}}return t.prototype=S,d(D,"constructor",{value:S,configurable:!0}),d(S,"constructor",{value:t,configurable:!0}),t.displayName=E(S,W,"GeneratorFunction"),Q.isGeneratorFunction=function(M){var m=typeof M=="function"&&M.constructor;return!!m&&(m===t||(m.displayName||m.name)==="GeneratorFunction")},Q.mark=function(M){return Object.setPrototypeOf?Object.setPrototypeOf(M,S):(M.__proto__=S,E(M,W,"GeneratorFunction")),M.prototype=Object.create(D),M},Q.awrap=function(M){return{__await:M}},p(o.prototype),E(o.prototype,J,function(){return this}),Q.AsyncIterator=o,Q.async=function(M,m,Y,I,X){X===void 0&&(X=Promise);var lU=new o(Z(M,m,Y,I),X);return Q.isGeneratorFunction(m)?lU:lU.next().then(function(EU){return EU.done?EU.value:lU.next()})},p(D),E(D,W,"Generator"),E(D,n,function(){return this}),E(D,"toString",function(){return"[object Generator]"}),Q.keys=function(M){var m=Object(M),Y=[];for(var I in m)Y.push(I);return Y.reverse(),function X(){for(;Y.length;){var lU=Y.pop();if(lU in m)return X.value=lU,X.done=!1,X}return X.done=!0,X}},Q.values=g,w.prototype={constructor:w,reset:function(M){if(this.prev=0,this.next=0,this.sent=this._sent=B,this.done=!1,this.delegate=null,this.method="next",this.arg=B,this.tryEntries.forEach(i),!M)for(var m in this)m.charAt(0)==="t"&&V.call(this,m)&&!isNaN(+m.slice(1))&&(this[m]=B)},stop:function(){this.done=!0;var M=this.tryEntries[0].completion;if(M.type==="throw")throw M.arg;return this.rval},dispatchException:function(M){if(this.done)throw M;var m=this;function Y(uU,ZQ){return lU.type="throw",lU.arg=M,m.next=uU,ZQ&&(m.method="next",m.arg=B),!!ZQ}for(var I=this.tryEntries.length-1;I>=0;--I){var X=this.tryEntries[I],lU=X.completion;if(X.tryLoc==="root")return Y("end");if(X.tryLoc<=this.prev){var EU=V.call(X,"catchLoc"),zU=V.call(X,"finallyLoc");if(EU&&zU){if(this.prev<X.catchLoc)return Y(X.catchLoc,!0);if(this.prev<X.finallyLoc)return Y(X.finallyLoc)}else if(EU){if(this.prev<X.catchLoc)return Y(X.catchLoc,!0)}else{if(!zU)throw new Error("try statement without catch or finally");if(this.prev<X.finallyLoc)return Y(X.finallyLoc)}}}},abrupt:function(M,m){for(var Y=this.tryEntries.length-1;Y>=0;--Y){var I=this.tryEntries[Y];if(I.tryLoc<=this.prev&&V.call(I,"finallyLoc")&&this.prev<I.finallyLoc){var X=I;break}}X&&(M==="break"||M==="continue")&&X.tryLoc<=m&&m<=X.finallyLoc&&(X=null);var lU=X?X.completion:{};return lU.type=M,lU.arg=m,X?(this.method="next",this.next=X.finallyLoc,N):this.complete(lU)},complete:function(M,m){if(M.type==="throw")throw M.arg;return M.type==="break"||M.type==="continue"?this.next=M.arg:M.type==="return"?(this.rval=this.arg=M.arg,this.method="return",this.next="end"):M.type==="normal"&&m&&(this.next=m),N},finish:function(M){for(var m=this.tryEntries.length-1;m>=0;--m){var Y=this.tryEntries[m];if(Y.finallyLoc===M)return this.complete(Y.completion,Y.afterLoc),i(Y),N}},catch:function(M){for(var m=this.tryEntries.length-1;m>=0;--m){var Y=this.tryEntries[m];if(Y.tryLoc===M){var I=Y.completion;if(I.type==="throw"){var X=I.arg;i(Y)}return X}}throw new Error("illegal catch attempt")},delegateYield:function(M,m,Y){return this.delegate={iterator:g(M),resultName:m,nextLoc:Y},this.method==="next"&&(this.arg=B),N}},Q}(F.exports);try{regeneratorRuntime=U}catch{typeof globalThis=="object"?globalThis.regeneratorRuntime=U:Function("r","regeneratorRuntime = r")(U)}})({exports:{}});var A0=(F,U)=>`${F}-${U}-${Math.random().toString(16).slice(3,8)}`,CN=A0,fn=0,Kn=({id:F,action:U,payload:Q={}})=>{let B=F;return B===void 0&&(B=CN("Job",fn),fn+=1),{id:B,action:U,payload:Q}},HQ={},$0=!1;HQ.logging=$0,HQ.setLogging=F=>{$0=F},HQ.log=(...F)=>$0?console.log.apply(void 0,F):null;var DN=Kn,{log:fR}=HQ,pN=A0,gn=0,mN=function(){return typeof window!="undefined"&&typeof window.process=="object"&&window.process.type==="renderer"||!(typeof process=="undefined"||typeof process.versions!="object"||!process.versions.electron)||typeof navigator=="object"&&typeof navigator.userAgent=="string"&&navigator.userAgent.indexOf("Electron")>=0},Pn,_n={exports:{}};function Ud(){return Pn?_n.exports:(Pn=1,_n.exports=function(){function F(){var U=arguments.length;if(U===0)throw new Error("resolveUrl requires at least one argument; got none.");var Q=document.createElement("base");if(Q.href=arguments[0],U===1)return Q.href;var B=document.getElementsByTagName("head")[0];B.insertBefore(Q,B.firstChild);for(var R,V=document.createElement("a"),d=1;d<U;d++)V.href=arguments[d],R=V.href,Q.href=R;return B.removeChild(Q),R}return F}())}var MN=(F=>{let U={};return typeof WorkerGlobalScope!="undefined"?U.type="webworker":mN()?U.type="electron":typeof window=="object"?U.type="browser":typeof process=="object"&&(U.type="node"),F===void 0?U:U[F]})("type")==="browser"?Ud():F=>F,qn={TESSERACT_ONLY:0,LSTM_ONLY:1,TESSERACT_LSTM_COMBINED:2,DEFAULT:3},oN={defaultOEM:qn.DEFAULT},iN={name:"tesseract.js",version:"3.0.3",description:"Pure Javascript Multilingual OCR",main:"src/index.js",types:"src/index.d.ts",unpkg:"dist/tesseract.min.js",jsdelivr:"dist/tesseract.min.js",scripts:{start:"node scripts/server.js",build:"rimraf dist && webpack --config scripts/webpack.config.prod.js && rollup -c scripts/rollup.esm.js","profile:tesseract":"webpack-bundle-analyzer dist/tesseract-stats.json","profile:worker":"webpack-bundle-analyzer dist/worker-stats.json",prepublishOnly:"npm run build",wait:"rimraf dist && wait-on http://localhost:3000/dist/tesseract.dev.js",test:"npm-run-all -p -r start test:all","test:all":"npm-run-all wait test:browser:* test:node:all","test:node":"nyc mocha --exit --bail --require ./scripts/test-helper.js","test:node:all":"npm run test:node -- ./tests/*.test.js","test:browser-tpl":"mocha-headless-chrome -a incognito -a no-sandbox -a disable-setuid-sandbox -a disable-logging -t 300000","test:browser:detect":"npm run test:browser-tpl -- -f ./tests/detect.test.html","test:browser:recognize":"npm run test:browser-tpl -- -f ./tests/recognize.test.html","test:browser:scheduler":"npm run test:browser-tpl -- -f ./tests/scheduler.test.html","test:browser:FS":"npm run test:browser-tpl -- -f ./tests/FS.test.html",lint:"eslint src","lint:fix":"eslint --fix src",postinstall:"opencollective-postinstall || true"},browser:{"./src/worker/node/index.js":"./src/worker/browser/index.js"},author:"",contributors:["jeromewu"],license:"Apache-2.0",devDependencies:{"@babel/core":"^7.18.7","@babel/preset-env":"^7.18.7","@rollup/plugin-commonjs":"^22.0.2",acorn:"^6.4.0","babel-loader":"^8.2.0",buffer:"^6.0.3",cors:"^2.8.5",eslint:"^7.2.0","eslint-config-airbnb-base":"^14.2.0","eslint-plugin-import":"^2.22.1","expect.js":"^0.3.1",express:"^4.17.1",mocha:"^8.1.3","mocha-headless-chrome":"^2.0.3","npm-run-all":"^4.1.5",nyc:"^15.1.0",rimraf:"^2.7.1",rollup:"^2.79.0","wait-on":"^3.3.0",webpack:"^5.74.0","webpack-bundle-analyzer":"^4.6.0","webpack-cli":"^4.10.0","webpack-dev-middleware":"^5.3.3"},dependencies:{"babel-eslint":"^10.1.0","bmp-js":"^0.1.0","file-type":"^12.4.1","idb-keyval":"^3.2.0","is-electron":"^2.2.0","is-url":"^1.2.4","node-fetch":"^2.6.0","opencollective-postinstall":"^2.0.2","regenerator-runtime":"^0.13.3","resolve-url":"^0.2.1","tesseract.js-core":"^3.0.2","wasm-feature-detect":"^1.2.11",zlibjs:"^0.3.1"},repository:{type:"git",url:"https://github.com/naptha/tesseract.js.git"},bugs:{url:"https://github.com/naptha/tesseract.js/issues"},homepage:"https://github.com/naptha/tesseract.js",collective:{type:"opencollective",url:"https://opencollective.com/tesseractjs"}},sN=Ud(),{version:YN}=iN,yN={langPath:"https://tessdata.projectnaptha.com/4.0.0",workerBlobURL:!0,logger:()=>{},workerPath:typeof process!="undefined"&&process.env.TESS_ENV==="development"?sN(`/dist/worker.dev.js?nocache=${Math.random().toString(36).slice(3)}`):`https://unpkg.com/tesseract.js@v${YN}/dist/worker.min.js`,corePath:null},vN=Ud(),An=F=>new Promise((U,Q)=>{let B=new FileReader;B.onload=()=>{U(B.result)},B.onerror=({target:{error:{code:R}}})=>{Q(Error(`File could not be read! Code=${R}`))},B.readAsArrayBuffer(F)}),Fd=async F=>{let U=F;return F===void 0?"undefined":(typeof F=="string"?/data:image\/([a-zA-Z]*);base64,([^"]*)/.test(F)?U=atob(F.split(",")[1]).split("").map(Q=>Q.charCodeAt(0)):U=await(await fetch(vN(F))).arrayBuffer():F instanceof HTMLElement?(F.tagName==="IMG"&&(U=await Fd(F.src)),F.tagName==="VIDEO"&&(U=await Fd(F.poster)),F.tagName==="CANVAS"&&await new Promise(Q=>{F.toBlob(async B=>{U=await An(B),Q()})})):(F instanceof File||F instanceof Blob)&&(U=await An(F)),new Uint8Array(U))},GN={defaultOptions:yN,spawnWorker:({workerPath:F,workerBlobURL:U})=>{let Q;if(Blob&&URL&&U){let B=new Blob([`importScripts("${F}");`],{type:"application/javascript"});Q=new Worker(URL.createObjectURL(B))}else Q=new Worker(F);return Q},terminateWorker:F=>{F.terminate()},onMessage:(F,U)=>{F.onmessage=({data:Q})=>{U(Q)}},send:async(F,U)=>{F.postMessage(U)},loadImage:Fd},bN=F=>{let U=z({},F);return["corePath","workerPath","langPath"].forEach(Q=>{F[Q]&&(U[Q]=MN(U[Q]))}),U},XN=F=>{let U=[],Q=[],B=[],R=[],V=[];return F.blocks.forEach(d=>{d.paragraphs.forEach(l=>{l.lines.forEach(n=>{n.words.forEach(J=>{J.symbols.forEach(W=>{V.push(_(z({},W),{page:F,block:d,paragraph:l,line:n,word:J}))}),R.push(_(z({},J),{page:F,block:d,paragraph:l,line:n}))}),B.push(_(z({},n),{page:F,block:d,paragraph:l}))}),Q.push(_(z({},l),{page:F,block:d}))}),U.push(_(z({},d),{page:F}))}),_(z({},F),{blocks:U,paragraphs:Q,lines:B,words:R,symbols:V})},$U=Kn,{log:$n}=HQ,ON=A0,{defaultOEM:HN}=oN,{defaultOptions:zN,spawnWorker:uN,terminateWorker:xN,onMessage:wN,loadImage:UJ,send:LN}=GN,FJ=0,QJ=(F={})=>{let U=ON("Worker",FJ),E=bN(z(z({},zN),F)),{logger:Q,errorHandler:B}=E,R=Cd(E,["logger","errorHandler"]),V={},d={},l=uN(R);FJ+=1;let n=(Z,e)=>{V[Z]=e},J=(Z,e)=>{d[Z]=e},W=({id:Z,action:e,payload:r})=>new Promise((c,h)=>{$n(`[${U}]: Start ${Z}, action=${e}`),n(e,c),J(e,h),LN(l,{workerId:U,jobId:Z,action:e,payload:r})});return wN(l,({workerId:Z,jobId:e,status:r,action:c,data:h})=>{if(r==="resolve"){$n(`[${Z}]: Complete ${e}`);let N=h;c==="recognize"?N=XN(h):c==="getPDF"&&(N=Array.from(_(z({},h),{length:Object.keys(h).length}))),V[c]({jobId:e,data:N})}else if(r==="reject"){if(d[c](h),!B)throw Error(h);B(h)}else r==="progress"&&Q(_(z({},h),{userJobId:e}))}),{id:U,worker:l,setResolve:n,setReject:J,load:Z=>W($U({id:Z,action:"load",payload:{options:R}})),writeText:(Z,e,r)=>W($U({id:r,action:"FS",payload:{method:"writeFile",args:[Z,e]}})),readText:(Z,e)=>W($U({id:e,action:"FS",payload:{method:"readFile",args:[Z,{encoding:"utf8"}]}})),removeFile:(Z,e)=>W($U({id:e,action:"FS",payload:{method:"unlink",args:[Z]}})),FS:(Z,e,r)=>W($U({id:r,action:"FS",payload:{method:Z,args:e}})),loadLanguage:(Z="eng",e)=>W($U({id:e,action:"loadLanguage",payload:{langs:Z,options:R}})),initialize:(Z="eng",e=HN,r)=>W($U({id:r,action:"initialize",payload:{langs:Z,oem:e}})),setParameters:(Z={},e)=>W($U({id:e,action:"setParameters",payload:{params:Z}})),recognize:async(Z,e={},r)=>W($U({id:r,action:"recognize",payload:{image:await UJ(Z),options:e}})),getPDF:(Z="Tesseract OCR Result",e=!1,r)=>W($U({id:r,action:"getPDF",payload:{title:Z,textonly:e}})),detect:async(Z,e)=>W($U({id:e,action:"detect",payload:{image:await UJ(Z)}})),terminate:async()=>(l!==null&&(xN(l),l=null),Promise.resolve())}},BJ=QJ,jN=()=>{let F=pN("Scheduler",gn),U={},Q={},B=[];gn+=1;let R=()=>Object.keys(U).length,V=()=>{if(B.length!==0){let d=Object.keys(U);for(let l=0;l<d.length;l+=1)if(Q[d[l]]===void 0){B[0](U[d[l]]);break}}};return{addWorker:d=>(U[d.id]=d,fR(`[${F}]: Add ${d.id}`),fR(`[${F}]: Number of workers=${R()}`),V(),d.id),addJob:async(d,...l)=>{if(R()===0)throw Error(`[${F}]: You need to have at least one worker before adding jobs`);return((n,J)=>new Promise((W,E)=>{let Z=DN({action:n,payload:J});B.push(async e=>{B.shift(),Q[e.id]=Z;try{W(await e[n].apply(void 0,[...J,Z.id]))}catch(r){E(r)}finally{delete Q[e.id],V()}}),fR(`[${F}]: Add ${Z.id} to JobQueue`),fR(`[${F}]: JobQueue length=${B.length}`),V()}))(d,l)},terminate:async()=>{Object.keys(U).forEach(async d=>{await U[d].terminate()}),B=[]},getQueueLen:()=>B.length,getNumWorkers:R}},IN=QJ,fN={recognize:async(F,U,Q)=>{let B=BJ(Q);return await B.load(),await B.loadLanguage(U),await B.initialize(U),B.recognize(F).finally(async()=>{await B.terminate()})},detect:async(F,U)=>{let Q=BJ(U);return await Q.load(),await Q.loadLanguage("osd"),await Q.initialize("osd"),Q.detect(F).finally(async()=>{await Q.terminate()})}},KN={AFR:"afr",AMH:"amh",ARA:"ara",ASM:"asm",AZE:"aze",AZE_CYRL:"aze_cyrl",BEL:"bel",BEN:"ben",BOD:"bod",BOS:"bos",BUL:"bul",CAT:"cat",CEB:"ceb",CES:"ces",CHI_SIM:"chi_sim",CHI_TRA:"chi_tra",CHR:"chr",CYM:"cym",DAN:"dan",DEU:"deu",DZO:"dzo",ELL:"ell",ENG:"eng",ENM:"enm",EPO:"epo",EST:"est",EUS:"eus",FAS:"fas",FIN:"fin",FRA:"fra",FRK:"frk",FRM:"frm",GLE:"gle",GLG:"glg",GRC:"grc",GUJ:"guj",HAT:"hat",HEB:"heb",HIN:"hin",HRV:"hrv",HUN:"hun",IKU:"iku",IND:"ind",ISL:"isl",ITA:"ita",ITA_OLD:"ita_old",JAV:"jav",JPN:"jpn",KAN:"kan",KAT:"kat",KAT_OLD:"kat_old",KAZ:"kaz",KHM:"khm",KIR:"kir",KOR:"kor",KUR:"kur",LAO:"lao",LAT:"lat",LAV:"lav",LIT:"lit",MAL:"mal",MAR:"mar",MKD:"mkd",MLT:"mlt",MSA:"msa",MYA:"mya",NEP:"nep",NLD:"nld",NOR:"nor",ORI:"ori",PAN:"pan",POL:"pol",POR:"por",PUS:"pus",RON:"ron",RUS:"rus",SAN:"san",SIN:"sin",SLK:"slk",SLV:"slv",SPA:"spa",SPA_OLD:"spa_old",SQI:"sqi",SRP:"srp",SRP_LATN:"srp_latn",SWA:"swa",SWE:"swe",SYR:"syr",TAM:"tam",TEL:"tel",TGK:"tgk",TGL:"tgl",THA:"tha",TIR:"tir",TUR:"tur",UIG:"uig",UKR:"ukr",URD:"urd",UZB:"uzb",UZB_CYRL:"uzb_cyrl",VIE:"vie",YID:"yid"},gN=qn,PN={OSD_ONLY:"0",AUTO_OSD:"1",AUTO_ONLY:"2",AUTO:"3",SINGLE_COLUMN:"4",SINGLE_BLOCK_VERT_TEXT:"5",SINGLE_BLOCK:"6",SINGLE_LINE:"7",SINGLE_WORD:"8",CIRCLE_WORD:"9",SINGLE_CHAR:"10",SPARSE_TEXT:"11",SPARSE_TEXT_OSD:"12"},{setLogging:_N}=HQ,qN=z({languages:KN,OEM:gN,PSM:PN,createScheduler:jN,createWorker:IN,setLogging:_N},fN),nQ=class{constructor(U){this.worker=U,this.running=!1,this.ready=!1}static getWorker(){let U=nQ.pool.find(B=>!B.running&&B.ready);if(U)return U;let Q=new nQ(qN.createWorker({cachePath:"tesseract"}));return nQ.pool.push(Q),Q}async run(U){return new Promise(async(Q,B)=>{this.running=!0,this.ready||(await this.worker.load(),await this.worker.loadLanguage("eng"),await this.worker.initialize("eng"),this.ready=!0);let R=setTimeout(()=>{this.worker.terminate(),console.warn("Omnisearch - Worker timeout"),B("timeout"),this.running=!1},12e4);try{let{data:V}=await this.worker.recognize(U.imageData);return clearTimeout(R),Q(V)}catch{console.error("Omnisearch - OCR Worker timeout for "+name),Q({text:""})}finally{this.running=!1}})}};nQ.pool=[];var RJ=new class{async getImageText(F){return TB.Platform.isMobile?"":jn(this._getImageText,F)}async _getImageText(F){let U=await CF.images.get({path:F.path,size:F.stat.size});if(U)return U.text;let Q=new Uint8ClampedArray(await app.vault.readBinary(F)),B=_l(Q),R=await CF.images.get(B);if(R)return R.text;let V=nQ.getWorker();return new Promise(async(d,l)=>{try{let n=(await V.run({imageData:Buffer.from(Q.buffer),name:F.basename})).text.replace(/\n/g," ").replace(/ +/g," ").trim();CF.images.add({hash:B,text:n,path:F.path,size:F.stat.size,libVersion:"1.0.4"}).then(()=>{d(n)})}catch{CF.images.add({hash:B,text:"",path:F.path,size:F.stat.size,libVersion:"1.0.4"}).then(()=>{d("")})}})}},VJ=In.getPdfText.bind(In),dJ=RJ.getImageText.bind(RJ);async function AN(F){let U=app.vault.getFiles().find(R=>R.path===F);if(!U)throw new Error(`Invalid file path: "${F}"`);let Q;if(l0(F))Q=await app.vault.cachedRead(U);else if(aB(F))Q=await VJ(U);else if(kB(U.path))Q=await dJ(U);else throw new Error("Invalid file format: "+U.path);Q=$F(Q);let B=app.metadataCache.getFileCache(U);if(B&&B.frontmatter?.["excalidraw-plugin"]){let R=B.sections?.filter(V=>V.type==="comment")??[];for(let{start:V,end:d}of R.map(l=>l.position))Q=Q.substring(0,V.offset-1)+Q.substring(d.offset)}return{basename:$F(U.basename),content:Q,path:U.path,mtime:U.stat.mtime,tags:ul(B),aliases:zl(B).join(""),headings1:B?TR(B,1).join(" "):"",headings2:B?TR(B,2).join(" "):"",headings3:B?TR(B,3).join(" "):""}}var nJ=class{constructor(){this.nextQueryIsEmpty=!1;this.documents=new Map}async addToLiveCache(U){let Q=await AN(U);this.documents.set(U,Q)}removeFromLiveCache(U){this.documents.delete(U)}async getDocument(U){return this.documents.has(U)?this.documents.get(U):(await this.addToLiveCache(U),this.documents.get(U))}async addToSearchHistory(U){if(!U){this.nextQueryIsEmpty=!0;return}this.nextQueryIsEmpty=!1;let Q=await fU.searchHistory.toArray();Q=Q.filter(B=>B.query!==U).reverse(),Q.unshift({query:U}),Q=Q.slice(0,10),await fU.searchHistory.clear(),await fU.searchHistory.bulkAdd(Q)}async getSearchHistory(){let U=(await fU.searchHistory.toArray()).reverse().map(Q=>Q.query);return this.nextQueryIsEmpty&&U.unshift(""),U}getDocumentsChecksum(U){return Ll(JSON.stringify(U.sort((Q,B)=>Q.path<B.path?-1:Q.path>B.path?1:0)))}async getMinisearchCache(){try{return(await fU.minisearch.toArray())[0]}catch(U){return new lJ.Notice("Omnisearch - Cache missing or invalid. Some freezes may occur while Omnisearch indexes your vault."),console.error("Omnisearch - Error while loading Minisearch cache"),console.error(U),null}}async writeMinisearchCache(U,Q){let B=Array.from(Q).map(([R,V])=>({path:R,mtime:V}));await fU.minisearch.clear(),await fU.minisearch.add({date:new Date().toISOString(),paths:B,data:U.toJSON()}),console.log("Omnisearch - Search cache written")}},hU=new nJ;function $N(F){let U,Q,B,R,V,d,l,n,J=F[8].default,W=EQ(J,F,F[7],null);return{c(){U=j("div"),Q=j("div"),B=j("input"),V=FU(),W&&W.c(),P(B,"class","prompt-input"),P(B,"placeholder",F[0]),P(B,"spellcheck","false"),P(B,"type","text"),P(Q,"class","omnisearch-input-field"),P(U,"class","omnisearch-input-container")},m(E,Z){UU(E,U,Z),H(U,Q),H(Q,B),F[9](B),RV(B,F[1]),H(U,V),W&&W.m(U,null),d=!0,l||(n=[xU(B,"input",F[10]),od(R=F[3].call(null,B)),xU(B,"compositionend",F[11]),xU(B,"compositionstart",F[12]),xU(B,"input",F[4])],l=!0)},p(E,[Z]){(!d||Z&1)&&P(B,"placeholder",E[0]),Z&2&&B.value!==E[1]&&RV(B,E[1]),W&&W.p&&(!d||Z&128)&&SQ(W,J,E,E[7],d?tQ(J,E[7],Z,null):eQ(E[7]),null)},i(E){d||(BU(W,E),d=!0)},o(E){RU(W,E),d=!1},d(E){E&&A(U),F[9](null),W&&W.d(E),l=!1,gU(n)}}}function UE(F,U,Q){let{$$slots:B={},$$scope:R}=U,{initialValue:V=""}=U,d=!1,{placeholder:l=""}=U,n="",J,W=lV();async function E(){await lF(),J.focus(),await lF(),J.select(),await lF()}let Z=(0,JJ.debounce)(()=>{hU.addToSearchHistory(""),W("input",n)},500);function e(N){wB[N?"unshift":"push"](()=>{J=N,Q(2,J)})}function r(){n=this.value,Q(1,n),Q(5,V),Q(6,d)}let c=N=>R0(!1),h=N=>R0(!0);return F.$$set=N=>{"initialValue"in N&&Q(5,V=N.initialValue),"placeholder"in N&&Q(0,l=N.placeholder),"$$scope"in N&&Q(7,R=N.$$scope)},F.$$.update=()=>{if(F.$$.dirty&98){U:V&&!d&&!n&&(Q(6,d=!0),Q(1,n=V),E())}},[l,n,J,E,Z,V,d,R,B,e,r,c,h]}var WJ=class extends CU{constructor(U){super();mU(this,U,UE,$N,rU,{initialValue:5,placeholder:0})}},KR=WJ;function FE(F){let U,Q,B,R,V=F[1].default,d=EQ(V,F,F[0],null);return{c(){U=j("div"),d&&d.c(),P(U,"class","prompt-results")},m(l,n){UU(l,U,n),d&&d.m(U,null),Q=!0,B||(R=xU(U,"mousedown",QE),B=!0)},p(l,[n]){d&&d.p&&(!Q||n&1)&&SQ(d,V,l,l[0],Q?tQ(V,l[0],n,null):eQ(l[0]),null)},i(l){Q||(BU(d,l),Q=!0)},o(l){RU(d,l),Q=!1},d(l){l&&A(U),d&&d.d(l),B=!1,R()}}}var QE=F=>F.preventDefault();function BE(F,U,Q){let{$$slots:B={},$$scope:R}=U;return F.$$set=V=>{"$$scope"in V&&Q(0,R=V.$$scope)},[R,B]}var ZJ=class extends CU{constructor(U){super();mU(this,U,BE,FE,rU,{})}},gR=ZJ;var Qd=XU(require("obsidian"));async function PR(F,U=!1){let Q=vF(F.foundWords);Q.exec(F.content);let B=Q.lastIndex,R=!1;app.workspace.iterateAllLeaves(l=>{l.view instanceof Qd.MarkdownView&&!U&&l.getViewState().state?.file===F.path&&l.getViewState()?.pinned&&(app.workspace.setActiveLeaf(l,{focus:!0}),R=!0)}),R||await app.workspace.openLinkText(F.path,"",U);let V=app.workspace.getActiveViewOfType(Qd.MarkdownView);if(!V)return;let d=V.editor.offsetToPos(B);d.ch=0,V.editor.setCursor(d),V.editor.scrollIntoView({from:{line:d.line-10,ch:0},to:{line:d.line+10,ch:0}})}async function NJ(F,U=!1){try{let Q;switch(app.vault.getConfig("newFileLocation")){case"current":Q=(app.workspace.getActiveFile()?.parent.path??"")+"/";break;case"folder":Q=app.vault.getConfig("newFileFolderPath")+"/";break;default:Q="";break}await app.workspace.openLinkText(`${Q}${F}.md`,"",U)}catch(Q){throw Q.message="OmniSearch - Could not create note: "+Q.message,console.error(Q),Q}}function RE(F){let U;return{c(){U=j("span"),U.innerHTML='<svg viewBox="0 0 100 100" class="add-note-glyph" width="16" height="16"><path fill="currentColor" stroke="currentColor" d="M23.3,6.7c-3.7,0-6.7,3-6.7,6.7v73.3c0,3.7,3,6.7,6.7,6.7h28.4c-3.2-4.8-5.1-10.5-5.1-16.7c0-16.6,13.4-30,30-30 c2.3,0,4.5,0.3,6.7,0.8V31.7c0-0.9-0.3-1.7-1-2.4L60.7,7.6c-0.6-0.6-1.5-1-2.4-1L23.3,6.7z M56.7,13L77,33.3H60 c-1.8,0-3.3-1.5-3.3-3.3L56.7,13z M76.7,53.3c-12.9,0-23.3,10.4-23.3,23.3S63.8,100,76.7,100S100,89.6,100,76.7 S89.6,53.3,76.7,53.3z M76.7,63.3c1.8,0,3.3,1.5,3.3,3.3v6.7h6.7c1.8,0,3.3,1.5,3.3,3.3c0,1.8-1.5,3.3-3.3,3.3H80v6.7 c0,1.8-1.5,3.3-3.3,3.3c-1.8,0-3.3-1.5-3.3-3.3V80h-6.7c-1.8,0-3.3-1.5-3.3-3.3s1.5-3.3,3.3-3.3h6.7v-6.7 C73.3,64.8,74.8,63.3,76.7,63.3L76.7,63.3z"></path></svg>',P(U,"class","suggestion-flair"),P(U,"aria-label","Not created yet, select to create")},m(Q,B){UU(Q,U,B)},p:tU,i:tU,o:tU,d(Q){Q&&A(U)}}}function VE(F){"use strict";return[]}var EJ=class extends CU{constructor(U){super();mU(this,U,VE,RE,rU,{})}},tJ=EJ;function SJ(F){let U,Q;return U=new tJ({}),{c(){OU(U.$$.fragment)},m(B,R){YU(U,B,R),Q=!0},i(B){Q||(BU(U.$$.fragment,B),Q=!0)},o(B){RU(U.$$.fragment,B),Q=!1},d(B){pU(U,B)}}}function dE(F){let U,Q,B,R,V,d=F[2]&&SJ(F),l=F[4].default,n=EQ(l,F,F[3],null);return{c(){U=j("div"),d&&d.c(),Q=FU(),n&&n.c(),P(U,"data-result-id",F[0]),P(U,"class","suggestion-item omnisearch-result"),VV(U,"is-selected",F[1])},m(J,W){UU(J,U,W),d&&d.m(U,null),H(U,Q),n&&n.m(U,null),B=!0,R||(V=[xU(U,"mousemove",F[5]),xU(U,"click",F[6]),xU(U,"auxclick",F[7])],R=!0)},p(J,[W]){J[2]?d?W&4&&BU(d,1):(d=SJ(J),d.c(),BU(d,1),d.m(U,Q)):d&&(LF(),RU(d,1,1,()=>{d=null}),jF()),n&&n.p&&(!B||W&8)&&SQ(n,l,J,J[3],B?tQ(l,J[3],W,null):eQ(J[3]),null),(!B||W&1)&&P(U,"data-result-id",J[0]),(!B||W&2)&&VV(U,"is-selected",J[1])},i(J){B||(BU(d),BU(n,J),B=!0)},o(J){RU(d),RU(n,J),B=!1},d(J){J&&A(U),d&&d.d(),n&&n.d(J),R=!1,gU(V)}}}function lE(F,U,Q){let{$$slots:B={},$$scope:R}=U,{id:V}=U,{selected:d=!1}=U,{glyph:l=!1}=U;function n(E){FF.call(this,F,E)}function J(E){FF.call(this,F,E)}function W(E){FF.call(this,F,E)}return F.$$set=E=>{"id"in E&&Q(0,V=E.id),"selected"in E&&Q(1,d=E.selected),"glyph"in E&&Q(2,l=E.glyph),"$$scope"in E&&Q(3,R=E.$$scope)},[V,d,l,R,B,n,J,W]}var eJ=class extends CU{constructor(U){super();mU(this,U,lE,dE,rU,{id:0,selected:1,glyph:2})}},_R=eJ;function kJ(F){let U,Q=F[1].matches.length+"",B,R,V=(F[1].matches.length>1?"matches":"match")+"",d;return{c(){U=j("span"),B=PU(Q),R=PU("\xA0"),d=PU(V),P(U,"class","omnisearch-result__counter")},m(l,n){UU(l,U,n),H(U,B),H(U,R),H(U,d)},p(l,n){n&2&&Q!==(Q=l[1].matches.length+"")&&jQ(B,Q),n&2&&V!==(V=(l[1].matches.length>1?"matches":"match")+"")&&jQ(d,V)},d(l){l&&A(U)}}}function aJ(F){let U,Q=F[5].replace(F[6],yF)+"";return{c(){U=j("div"),P(U,"class","omnisearch-result__body")},m(B,R){UU(B,U,R),U.innerHTML=Q},p(B,R){R&96&&Q!==(Q=B[5].replace(B[6],yF)+"")&&(U.innerHTML=Q)},d(B){B&&A(U)}}}function TJ(F){let U,Q;return{c(){U=j("img"),UF(U,"width","100px"),BV(U.src,Q=F[2])||P(U,"src",Q),P(U,"alt","")},m(B,R){UU(B,U,R)},p(B,R){R&4&&!BV(U.src,Q=B[2])&&P(U,"src",Q)},d(B){B&&A(U)}}}function nE(F){let U,Q,B,R,V=F[3].replace(F[6],yF)+"",d,l,n,J=F[1].matches.length>0&&kJ(F),W=F[7]&&aJ(F),E=F[2]&&TJ(F);return{c(){U=j("div"),Q=j("div"),B=j("div"),R=j("span"),d=FU(),J&&J.c(),l=FU(),W&&W.c(),n=FU(),E&&E.c(),P(R,"class","omnisearch-result__title"),UF(U,"display","flex")},m(Z,e){UU(Z,U,e),H(U,Q),H(Q,B),H(B,R),R.innerHTML=V,H(B,d),J&&J.m(B,null),H(Q,l),W&&W.m(Q,null),H(U,n),E&&E.m(U,null)},p(Z,e){e&72&&V!==(V=Z[3].replace(Z[6],yF)+"")&&(R.innerHTML=V),Z[1].matches.length>0?J?J.p(Z,e):(J=kJ(Z),J.c(),J.m(B,null)):J&&(J.d(1),J=null),Z[7]?W?W.p(Z,e):(W=aJ(Z),W.c(),W.m(Q,null)):W&&(W.d(1),W=null),Z[2]?E?E.p(Z,e):(E=TJ(Z),E.c(),E.m(U,null)):E&&(E.d(1),E=null)},d(Z){Z&&A(U),J&&J.d(),W&&W.d(),E&&E.d()}}}function JE(F){let U,Q;return U=new _R({props:{id:F[1].path,selected:F[0],glyph:F[4],$$slots:{default:[nE]},$$scope:{ctx:F}}}),U.$on("mousemove",F[8]),U.$on("click",F[9]),{c(){OU(U.$$.fragment)},m(B,R){YU(U,B,R),Q=!0},p(B,[R]){let V={};R&2&&(V.id=B[1].path),R&1&&(V.selected=B[0]),R&16&&(V.glyph=B[4]),R&1262&&(V.$$scope={dirty:R,ctx:B}),U.$set(V)},i(B){Q||(BU(U.$$.fragment,B),Q=!0)},o(B){RU(U.$$.fragment,B),Q=!1},d(B){pU(U,B)}}}function WE(F,U,Q){let B,R,V,d,l;uB(F,AF,e=>Q(7,l=e));let{selected:n=!1}=U,{note:J}=U,W=null;function E(e){FF.call(this,F,e)}function Z(e){FF.call(this,F,e)}F.$$set=e=>{"selected"in e&&Q(0,n=e.selected),"note"in e&&Q(1,J=e.note)},F.$$.update=()=>{if(F.$$.dirty&2){U:if(Q(2,W=null),kB(J.path)){let e=app.vault.getFiles().find(r=>r.path===J.path);e&&Q(2,W=app.vault.getResourcePath(e))}}if(F.$$.dirty&2){U:Q(6,B=vF(J.foundWords))}if(F.$$.dirty&2){U:Q(5,R=cR(J.content,J.matches[0]?.offset??-1))}if(F.$$.dirty&2){U:Q(3,d=O.showShortName?J.basename:J.path)}};U:Q(4,V=!1);return[n,J,W,d,V,R,B,l,E,Z]}var hJ=class extends CU{constructor(U){super();mU(this,U,WE,JE,rU,{selected:0,note:1})}},cJ=hJ;function rJ(F,U){U?U.offsets=typeof U.offsets=="undefined"?!0:U.offsets:U={offsets:!0,tokenize:!0},F||(F="");let Q={text:[],offsets:[],exclude:{text:[]}};U.offsets&&(Q.offsets=[]);let B={text:[]},R=[],V=/(\S+:'(?:[^'\\]|\\.)*')|(\S+:"(?:[^"\\]|\\.)*")|(-?"(?:[^"\\]|\\.)*")|(-?'(?:[^'\\]|\\.)*')|\S+|\S+:\S+/g,d,l=0;for(;(d=V.exec(F))!==null&&!(++l>=100);){let J=d[0],W=J.indexOf(":");if(W!==-1){let E=J.slice(0,W),Z=J.slice(W+1);Z=(Z+"").replace(/\\(.?)/g,function(e,r){switch(r){case"\\":return"\\";case"0":return"\0";case"":return"";default:return r}}),R.push({keyword:E,value:Z,offsetStart:d.index,offsetEnd:d.index+J.length})}else{let E=!1;J[0]==="-"&&(E=!0,J=J.slice(1)),J=(J+"").replace(/\\(.?)/g,function(Z,e){switch(e){case"\\":return"\\";case"0":return"\0";case"":return"";default:return e}}),E?B.text.push(J):R.push({text:J,offsetStart:d.index,offsetEnd:d.index+J.length})}}R.reverse();let n;for(;n=R.pop();)if(n.text)Q.text.push(n.text),U.offsets&&Q.offsets.push(n);else if(n.keyword){let J=n.keyword;U.keywords=U.keywords||[];let W=!1,E=!1;if(!/^-/.test(J))W=U.keywords.indexOf(J)!==-1;else if(J[0]==="-"){let e=J.slice(1);W=U.keywords.indexOf(e)!==-1,W&&(J=e,E=!0)}U.ranges=U.ranges||[];let Z=U.ranges.indexOf(J)!==-1;if(W){U.offsets&&Q.offsets.push({keyword:J,value:n.value,offsetStart:E?n.offsetStart+1:n.offsetStart,offsetEnd:n.offsetEnd});let e=n.value;if(e.length){let r=e.split(",");E?B[J]?B[J]instanceof Array?r.length>1?B[J]=B[J].concat(r):B[J].push(e):(B[J]=[B[J]],B[J].push(e)):r.length>1?B[J]=r:U.alwaysArray?B[J]=[e]:B[J]=e:Q[J]?Q[J]instanceof Array?r.length>1?Q[J]=Q[J].concat(r):Q[J].push(e):(Q[J]=[Q[J]],Q[J].push(e)):r.length>1?Q[J]=r:U.alwaysArray?Q[J]=[e]:Q[J]=e}}else if(Z){U.offsets&&Q.offsets.push(n);let e=n.value,r=e.split("-");Q[J]={},r.length===2?(Q[J].from=r[0],Q[J].to=r[1]):Q[J].from=e}else{let e=n.keyword+":"+n.value;Q.text.push(e),U.offsets&&Q.offsets.push({text:e,offsetStart:n.offsetStart,offsetEnd:n.offsetEnd})}}return Q.exclude=B,Q}var JQ=class{constructor(U=""){this.segments=[];this.exclusions=[];O.ignoreDiacritics&&(U=$F(U));let Q=rJ(U.toLowerCase(),{tokenize:!0});this.exclusions=Q.exclude.text.map(this.formatToken).filter(B=>!!B.value),this.segments=Q.text.reduce((B,R)=>{let V=this.formatToken(R);return V.value&&B.push(V),B},[])}isEmpty(){return this.segments.length===0}segmentsToStr(){return this.segments.map(({value:U})=>U).join(" ")}getExactTerms(){return this.segments.filter(({exact:U})=>U).map(({value:U})=>U)}formatToken(U){let Q=Hl(U);return{value:Q,exact:Q!==U}}};var NU=function(){return NU=Object.assign||function(U){for(var Q,B=1,R=arguments.length;B<R;B++){Q=arguments[B];for(var V in Q)Object.prototype.hasOwnProperty.call(Q,V)&&(U[V]=Q[V])}return U},NU.apply(this,arguments)};function ZE(F,U,Q,B){function R(V){return V instanceof Q?V:new Q(function(d){d(V)})}return new(Q||(Q=Promise))(function(V,d){function l(W){try{J(B.next(W))}catch(E){d(E)}}function n(W){try{J(B.throw(W))}catch(E){d(E)}}function J(W){W.done?V(W.value):R(W.value).then(l,n)}J((B=B.apply(F,U||[])).next())})}function NE(F,U){var Q={label:0,sent:function(){if(V[0]&1)throw V[1];return V[1]},trys:[],ops:[]},B,R,V,d;return d={next:l(0),throw:l(1),return:l(2)},typeof Symbol=="function"&&(d[Symbol.iterator]=function(){return this}),d;function l(J){return function(W){return n([J,W])}}function n(J){if(B)throw new TypeError("Generator is already executing.");for(;d&&(d=0,J[0]&&(Q=0)),Q;)try{if(B=1,R&&(V=J[0]&2?R.return:J[0]?R.throw||((V=R.return)&&V.call(R),0):R.next)&&!(V=V.call(R,J[1])).done)return V;switch(R=0,V&&(J=[J[0]&2,V.value]),J[0]){case 0:case 1:V=J;break;case 4:return Q.label++,{value:J[1],done:!1};case 5:Q.label++,R=J[1],J=[0];continue;case 7:J=Q.ops.pop(),Q.trys.pop();continue;default:if(V=Q.trys,!(V=V.length>0&&V[V.length-1])&&(J[0]===6||J[0]===2)){Q=0;continue}if(J[0]===3&&(!V||J[1]>V[0]&&J[1]<V[3])){Q.label=J[1];break}if(J[0]===6&&Q.label<V[1]){Q.label=V[1],V=J;break}if(V&&Q.label<V[2]){Q.label=V[2],Q.ops.push(J);break}V[2]&&Q.ops.pop(),Q.trys.pop();continue}J=U.call(F,Q)}catch(W){J=[6,W],R=0}finally{B=V=0}if(J[0]&5)throw J[1];return{value:J[0]?J[1]:void 0,done:!0}}}function q(F){var U=typeof Symbol=="function"&&Symbol.iterator,Q=U&&F[U],B=0;if(Q)return Q.call(F);if(F&&typeof F.length=="number")return{next:function(){return F&&B>=F.length&&(F=void 0),{value:F&&F[B++],done:!F}}};throw new TypeError(U?"Object is not iterable.":"Symbol.iterator is not defined.")}function kU(F,U){var Q=typeof Symbol=="function"&&F[Symbol.iterator];if(!Q)return F;var B=Q.call(F),R,V=[],d;try{for(;(U===void 0||U-- >0)&&!(R=B.next()).done;)V.push(R.value)}catch(l){d={error:l}}finally{try{R&&!R.done&&(Q=B.return)&&Q.call(B)}finally{if(d)throw d.error}}return V}var EE="ENTRIES",CJ="KEYS",DJ="VALUES",DU="",Bd=function(){function F(U,Q){var B=U._tree,R=Array.from(B.keys());this.set=U,this._type=Q,this._path=R.length>0?[{node:B,keys:R}]:[]}return F.prototype.next=function(){var U=this.dive();return this.backtrack(),U},F.prototype.dive=function(){if(this._path.length===0)return{done:!0,value:void 0};var U=zQ(this._path),Q=U.node,B=U.keys;if(zQ(B)===DU)return{done:!1,value:this.result()};var R=Q.get(zQ(B));return this._path.push({node:R,keys:Array.from(R.keys())}),this.dive()},F.prototype.backtrack=function(){if(this._path.length!==0){var U=zQ(this._path).keys;U.pop(),!(U.length>0)&&(this._path.pop(),this.backtrack())}},F.prototype.key=function(){return this.set._prefix+this._path.map(function(U){var Q=U.keys;return zQ(Q)}).filter(function(U){return U!==DU}).join("")},F.prototype.value=function(){return zQ(this._path).node.get(DU)},F.prototype.result=function(){switch(this._type){case DJ:return this.value();case CJ:return this.key();default:return[this.key(),this.value()]}},F.prototype[Symbol.iterator]=function(){return this},F}(),zQ=function(F){return F[F.length-1]},tE=function(F,U,Q){var B=new Map;if(U===void 0)return B;for(var R=U.length+1,V=R+Q,d=new Uint8Array(V*R).fill(Q+1),l=0;l<R;++l)d[l]=l;for(var n=1;n<V;++n)d[n*R]=n;return pJ(F,U,Q,B,d,1,R,""),B},pJ=function(F,U,Q,B,R,V,d,l){var n,J,W=V*d;try{U:for(var E=q(F.keys()),Z=E.next();!Z.done;Z=E.next()){var e=Z.value;if(e===DU){var r=R[W-1];r<=Q&&B.set(l,[F.get(e),r])}else{for(var c=V,h=0;h<e.length;++h,++c){for(var N=e[h],k=d*c,t=k-d,S=R[k],a=Math.max(0,c-Q-1),T=Math.min(d-1,c+Q),C=a;C<T;++C){var D=N!==U[C],p=R[t+C]+ +D,o=R[t+C+1]+1,s=R[k+C]+1,v=R[k+C+1]=Math.min(p,o,s);v<S&&(S=v)}if(S>Q)continue U}pJ(F.get(e),U,Q,B,R,c,d,l+e)}}}catch(y){n={error:y}}finally{try{Z&&!Z.done&&(J=E.return)&&J.call(E)}finally{if(n)throw n.error}}},Rd=function(){function F(U,Q){U===void 0&&(U=new Map),Q===void 0&&(Q=""),this._size=void 0,this._tree=U,this._prefix=Q}return F.prototype.atPrefix=function(U){var Q,B;if(!U.startsWith(this._prefix))throw new Error("Mismatched prefix");var R=kU(qR(this._tree,U.slice(this._prefix.length)),2),V=R[0],d=R[1];if(V===void 0){var l=kU(ld(d),2),n=l[0],J=l[1];try{for(var W=q(n.keys()),E=W.next();!E.done;E=W.next()){var Z=E.value;if(Z!==DU&&Z.startsWith(J)){var e=new Map;return e.set(Z.slice(J.length),n.get(Z)),new F(e,U)}}}catch(r){Q={error:r}}finally{try{E&&!E.done&&(B=W.return)&&B.call(W)}finally{if(Q)throw Q.error}}}return new F(V,U)},F.prototype.clear=function(){this._size=void 0,this._tree.clear()},F.prototype.delete=function(U){return this._size=void 0,SE(this._tree,U)},F.prototype.entries=function(){return new Bd(this,EE)},F.prototype.forEach=function(U){var Q,B;try{for(var R=q(this),V=R.next();!V.done;V=R.next()){var d=kU(V.value,2),l=d[0],n=d[1];U(l,n,this)}}catch(J){Q={error:J}}finally{try{V&&!V.done&&(B=R.return)&&B.call(R)}finally{if(Q)throw Q.error}}},F.prototype.fuzzyGet=function(U,Q){return tE(this._tree,U,Q)},F.prototype.get=function(U){var Q=Vd(this._tree,U);return Q!==void 0?Q.get(DU):void 0},F.prototype.has=function(U){var Q=Vd(this._tree,U);return Q!==void 0&&Q.has(DU)},F.prototype.keys=function(){return new Bd(this,CJ)},F.prototype.set=function(U,Q){if(typeof U!="string")throw new Error("key must be a string");this._size=void 0;var B=dd(this._tree,U);return B.set(DU,Q),this},Object.defineProperty(F.prototype,"size",{get:function(){if(this._size)return this._size;this._size=0;for(var U=this.entries();!U.next().done;)this._size+=1;return this._size},enumerable:!1,configurable:!0}),F.prototype.update=function(U,Q){if(typeof U!="string")throw new Error("key must be a string");this._size=void 0;var B=dd(this._tree,U);return B.set(DU,Q(B.get(DU))),this},F.prototype.fetch=function(U,Q){if(typeof U!="string")throw new Error("key must be a string");this._size=void 0;var B=dd(this._tree,U),R=B.get(DU);return R===void 0&&B.set(DU,R=Q()),R},F.prototype.values=function(){return new Bd(this,DJ)},F.prototype[Symbol.iterator]=function(){return this.entries()},F.from=function(U){var Q,B,R=new F;try{for(var V=q(U),d=V.next();!d.done;d=V.next()){var l=kU(d.value,2),n=l[0],J=l[1];R.set(n,J)}}catch(W){Q={error:W}}finally{try{d&&!d.done&&(B=V.return)&&B.call(V)}finally{if(Q)throw Q.error}}return R},F.fromObject=function(U){return F.from(Object.entries(U))},F}(),qR=function(F,U,Q){var B,R;if(Q===void 0&&(Q=[]),U.length===0||F==null)return[F,Q];try{for(var V=q(F.keys()),d=V.next();!d.done;d=V.next()){var l=d.value;if(l!==DU&&U.startsWith(l))return Q.push([F,l]),qR(F.get(l),U.slice(l.length),Q)}}catch(n){B={error:n}}finally{try{d&&!d.done&&(R=V.return)&&R.call(V)}finally{if(B)throw B.error}}return Q.push([F,U]),qR(void 0,"",Q)},Vd=function(F,U){var Q,B;if(U.length===0||F==null)return F;try{for(var R=q(F.keys()),V=R.next();!V.done;V=R.next()){var d=V.value;if(d!==DU&&U.startsWith(d))return Vd(F.get(d),U.slice(d.length))}}catch(l){Q={error:l}}finally{try{V&&!V.done&&(B=R.return)&&B.call(R)}finally{if(Q)throw Q.error}}},dd=function(F,U){var Q,B,R=U.length;U:for(var V=0;F&&V<R;){try{for(var d=(Q=void 0,q(F.keys())),l=d.next();!l.done;l=d.next()){var n=l.value;if(n!==DU&&U[V]===n[0]){for(var J=Math.min(R-V,n.length),W=1;W<J&&U[V+W]===n[W];)++W;var E=F.get(n);if(W===n.length)F=E;else{var Z=new Map;Z.set(n.slice(W),E),F.set(U.slice(V,V+W),Z),F.delete(n),F=Z}V+=W;continue U}}}catch(r){Q={error:r}}finally{try{l&&!l.done&&(B=d.return)&&B.call(d)}finally{if(Q)throw Q.error}}var e=new Map;return F.set(U.slice(V),e),e}return F},SE=function(F,U){var Q=kU(qR(F,U),2),B=Q[0],R=Q[1];if(B!==void 0){if(B.delete(DU),B.size===0)mJ(R);else if(B.size===1){var V=kU(B.entries().next().value,2),d=V[0],l=V[1];MJ(R,d,l)}}},mJ=function(F){if(F.length!==0){var U=kU(ld(F),2),Q=U[0],B=U[1];if(Q.delete(B),Q.size===0)mJ(F.slice(0,-1));else if(Q.size===1){var R=kU(Q.entries().next().value,2),V=R[0],d=R[1];V!==DU&&MJ(F.slice(0,-1),V,d)}}},MJ=function(F,U,Q){if(F.length!==0){var B=kU(ld(F),2),R=B[0],V=B[1];R.set(V+U,Q),R.delete(V)}},ld=function(F){return F[F.length-1]},OB,nd="or",oJ="and",eE="and_not",Jd=function(){function F(U){if((U==null?void 0:U.fields)==null)throw new Error('MiniSearch: option "fields" must be provided');var Q=U.autoVacuum==null||U.autoVacuum===!0?td:U.autoVacuum;this._options=NU(NU(NU({},Zd),U),{autoVacuum:Q,searchOptions:NU(NU({},iJ),U.searchOptions||{}),autoSuggestOptions:NU(NU({},cE),U.autoSuggestOptions||{})}),this._index=new Rd,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=Ed,this.addFields(this._options.fields)}return F.prototype.add=function(U){var Q,B,R,V,d,l,n=this._options,J=n.extractField,W=n.tokenize,E=n.processTerm,Z=n.fields,e=n.idField,r=J(U,e);if(r==null)throw new Error('MiniSearch: document does not have ID field "'.concat(e,'"'));if(this._idToShortId.has(r))throw new Error("MiniSearch: duplicate ID ".concat(r));var c=this.addDocumentId(r);this.saveStoredFields(c,U);try{for(var h=q(Z),N=h.next();!N.done;N=h.next()){var k=N.value,t=J(U,k);if(t!=null){var S=W(t.toString(),k),a=this._fieldIds[k],T=new Set(S).size;this.addFieldLength(c,a,this._documentCount-1,T);try{for(var C=(R=void 0,q(S)),D=C.next();!D.done;D=C.next()){var p=D.value,o=E(p,k);if(Array.isArray(o))try{for(var s=(d=void 0,q(o)),v=s.next();!v.done;v=s.next()){var y=v.value;this.addTerm(a,c,y)}}catch(i){d={error:i}}finally{try{v&&!v.done&&(l=s.return)&&l.call(s)}finally{if(d)throw d.error}}else o&&this.addTerm(a,c,o)}}catch(i){R={error:i}}finally{try{D&&!D.done&&(V=C.return)&&V.call(C)}finally{if(R)throw R.error}}}}}catch(i){Q={error:i}}finally{try{N&&!N.done&&(B=h.return)&&B.call(h)}finally{if(Q)throw Q.error}}},F.prototype.addAll=function(U){var Q,B;try{for(var R=q(U),V=R.next();!V.done;V=R.next()){var d=V.value;this.add(d)}}catch(l){Q={error:l}}finally{try{V&&!V.done&&(B=R.return)&&B.call(R)}finally{if(Q)throw Q.error}}},F.prototype.addAllAsync=function(U,Q){var B=this;Q===void 0&&(Q={});var R=Q.chunkSize,V=R===void 0?10:R,d={chunk:[],promise:Promise.resolve()},l=U.reduce(function(W,E,Z){var e=W.chunk,r=W.promise;return e.push(E),(Z+1)%V==0?{chunk:[],promise:r.then(function(){return new Promise(function(c){return setTimeout(c,0)})}).then(function(){return B.addAll(e)})}:{chunk:e,promise:r}},d),n=l.chunk,J=l.promise;return J.then(function(){return B.addAll(n)})},F.prototype.remove=function(U){var Q,B,R,V,d,l,n=this._options,J=n.tokenize,W=n.processTerm,E=n.extractField,Z=n.fields,e=n.idField,r=E(U,e);if(r==null)throw new Error('MiniSearch: document does not have ID field "'.concat(e,'"'));var c=this._idToShortId.get(r);if(c==null)throw new Error("MiniSearch: cannot remove document with ID ".concat(r,": it is not in the index"));try{for(var h=q(Z),N=h.next();!N.done;N=h.next()){var k=N.value,t=E(U,k);if(t!=null){var S=J(t.toString(),k),a=this._fieldIds[k],T=new Set(S).size;this.removeFieldLength(c,a,this._documentCount,T);try{for(var C=(R=void 0,q(S)),D=C.next();!D.done;D=C.next()){var p=D.value,o=W(p,k);if(Array.isArray(o))try{for(var s=(d=void 0,q(o)),v=s.next();!v.done;v=s.next()){var y=v.value;this.removeTerm(a,c,y)}}catch(i){d={error:i}}finally{try{v&&!v.done&&(l=s.return)&&l.call(s)}finally{if(d)throw d.error}}else o&&this.removeTerm(a,c,o)}}catch(i){R={error:i}}finally{try{D&&!D.done&&(V=C.return)&&V.call(C)}finally{if(R)throw R.error}}}}}catch(i){Q={error:i}}finally{try{N&&!N.done&&(B=h.return)&&B.call(h)}finally{if(Q)throw Q.error}}this._storedFields.delete(c),this._documentIds.delete(c),this._idToShortId.delete(r),this._fieldLength.delete(c),this._documentCount-=1},F.prototype.removeAll=function(U){var Q,B;if(U)try{for(var R=q(U),V=R.next();!V.done;V=R.next()){var d=V.value;this.remove(d)}}catch(l){Q={error:l}}finally{try{V&&!V.done&&(B=R.return)&&B.call(R)}finally{if(Q)throw Q.error}}else{if(arguments.length>0)throw new Error("Expected documents to be present. Omit the argument to remove all documents.");this._index=new Rd,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldLength=new Map,this._avgFieldLength=[],this._storedFields=new Map,this._nextId=0}},F.prototype.discard=function(U){var Q=this,B=this._idToShortId.get(U);if(B==null)throw new Error("MiniSearch: cannot discard document with ID ".concat(U,": it is not in the index"));this._idToShortId.delete(U),this._documentIds.delete(B),this._storedFields.delete(B),(this._fieldLength.get(B)||[]).forEach(function(R,V){Q.removeFieldLength(B,V,Q._documentCount,R)}),this._fieldLength.delete(B),this._documentCount-=1,this._dirtCount+=1,this.maybeAutoVacuum()},F.prototype.maybeAutoVacuum=function(){if(this._options.autoVacuum!==!1){var U=this._options.autoVacuum,Q=U.minDirtFactor,B=U.minDirtCount,R=U.batchSize,V=U.batchWait;this.conditionalVacuum({batchSize:R,batchWait:V},{minDirtCount:B,minDirtFactor:Q})}},F.prototype.discardAll=function(U){var Q,B,R=this._options.autoVacuum;try{this._options.autoVacuum=!1;try{for(var V=q(U),d=V.next();!d.done;d=V.next()){var l=d.value;this.discard(l)}}catch(n){Q={error:n}}finally{try{d&&!d.done&&(B=V.return)&&B.call(V)}finally{if(Q)throw Q.error}}}finally{this._options.autoVacuum=R}this.maybeAutoVacuum()},F.prototype.replace=function(U){var Q=this._options,B=Q.idField,R=Q.extractField,V=R(U,B);this.discard(V),this.add(U)},F.prototype.vacuum=function(U){return U===void 0&&(U={}),this.conditionalVacuum(U)},F.prototype.conditionalVacuum=function(U,Q){var B=this;return this._currentVacuum?(this._enqueuedVacuumConditions=this._enqueuedVacuumConditions&&Q,this._enqueuedVacuum!=null?this._enqueuedVacuum:(this._enqueuedVacuum=this._currentVacuum.then(function(){var R=B._enqueuedVacuumConditions;return B._enqueuedVacuumConditions=Ed,B.performVacuuming(U,R)}),this._enqueuedVacuum)):this.vacuumConditionsMet(Q)===!1?Promise.resolve():(this._currentVacuum=this.performVacuuming(U),this._currentVacuum)},F.prototype.performVacuuming=function(U,Q){return ZE(this,void 0,void 0,function(){var B,R,V,d,l,n,J,W,E,Z,e,r,c,h,N,k,t,S,a,T,C,D,p,o,s;return NE(this,function(v){switch(v.label){case 0:if(B=this._dirtCount,!this.vacuumConditionsMet(Q))return[3,10];R=U.batchSize||Nd.batchSize,V=U.batchWait||Nd.batchWait,d=1,v.label=1;case 1:v.trys.push([1,7,8,9]),l=q(this._index),n=l.next(),v.label=2;case 2:if(n.done)return[3,6];J=kU(n.value,2),W=J[0],E=J[1];try{for(Z=(D=void 0,q(E)),e=Z.next();!e.done;e=Z.next()){r=kU(e.value,2),c=r[0],h=r[1];try{for(N=(o=void 0,q(h)),k=N.next();!k.done;k=N.next())t=kU(k.value,1),S=t[0],!this._documentIds.has(S)&&(h.size<=1?E.delete(c):h.delete(S))}catch(y){o={error:y}}finally{try{k&&!k.done&&(s=N.return)&&s.call(N)}finally{if(o)throw o.error}}}}catch(y){D={error:y}}finally{try{e&&!e.done&&(p=Z.return)&&p.call(Z)}finally{if(D)throw D.error}}return this._index.get(W).size===0&&this._index.delete(W),d%R!=0?[3,4]:[4,new Promise(function(y){return setTimeout(y,V)})];case 3:v.sent(),v.label=4;case 4:d+=1,v.label=5;case 5:return n=l.next(),[3,2];case 6:return[3,9];case 7:return a=v.sent(),T={error:a},[3,9];case 8:try{n&&!n.done&&(C=l.return)&&C.call(l)}finally{if(T)throw T.error}return[7];case 9:this._dirtCount-=B,v.label=10;case 10:return[4,null];case 11:return v.sent(),this._currentVacuum=this._enqueuedVacuum,this._enqueuedVacuum=null,[2]}})})},F.prototype.vacuumConditionsMet=function(U){if(U==null)return!0;var Q=U.minDirtCount,B=U.minDirtFactor;return Q=Q||td.minDirtCount,B=B||td.minDirtFactor,this.dirtCount>=Q&&this.dirtFactor>=B},Object.defineProperty(F.prototype,"isVacuuming",{get:function(){return this._currentVacuum!=null},enumerable:!1,configurable:!0}),Object.defineProperty(F.prototype,"dirtCount",{get:function(){return this._dirtCount},enumerable:!1,configurable:!0}),Object.defineProperty(F.prototype,"dirtFactor",{get:function(){return this._dirtCount/(1+this._documentCount+this._dirtCount)},enumerable:!1,configurable:!0}),F.prototype.has=function(U){return this._idToShortId.has(U)},F.prototype.search=function(U,Q){var B,R;Q===void 0&&(Q={});var V=this.executeQuery(U,Q),d=[];try{for(var l=q(V),n=l.next();!n.done;n=l.next()){var J=kU(n.value,2),W=J[0],E=J[1],Z=E.score,e=E.terms,r=E.match,c=e.length,h={id:this._documentIds.get(W),score:Z*c,terms:Object.keys(r),match:r};Object.assign(h,this._storedFields.get(W)),(Q.filter==null||Q.filter(h))&&d.push(h)}}catch(N){B={error:N}}finally{try{n&&!n.done&&(R=l.return)&&R.call(l)}finally{if(B)throw B.error}}return d.sort(YJ),d},F.prototype.autoSuggest=function(U,Q){var B,R,V,d;Q===void 0&&(Q={}),Q=NU(NU({},this._options.autoSuggestOptions),Q);var l=new Map;try{for(var n=q(this.search(U,Q)),J=n.next();!J.done;J=n.next()){var W=J.value,E=W.score,Z=W.terms,e=Z.join(" "),r=l.get(e);r!=null?(r.score+=E,r.count+=1):l.set(e,{score:E,terms:Z,count:1})}}catch(a){B={error:a}}finally{try{J&&!J.done&&(R=n.return)&&R.call(n)}finally{if(B)throw B.error}}var c=[];try{for(var h=q(l),N=h.next();!N.done;N=h.next()){var k=kU(N.value,2),r=k[0],t=k[1],E=t.score,Z=t.terms,S=t.count;c.push({suggestion:r,terms:Z,score:E/S})}}catch(a){V={error:a}}finally{try{N&&!N.done&&(d=h.return)&&d.call(h)}finally{if(V)throw V.error}}return c.sort(YJ),c},Object.defineProperty(F.prototype,"documentCount",{get:function(){return this._documentCount},enumerable:!1,configurable:!0}),Object.defineProperty(F.prototype,"termCount",{get:function(){return this._index.size},enumerable:!1,configurable:!0}),F.loadJSON=function(U,Q){if(Q==null)throw new Error("MiniSearch: loadJSON should be given the same options used when serializing the index");return this.loadJS(JSON.parse(U),Q)},F.getDefault=function(U){if(Zd.hasOwnProperty(U))return Wd(Zd,U);throw new Error('MiniSearch: unknown option "'.concat(U,'"'))},F.loadJS=function(U,Q){var B,R,V,d,l,n,J=U.index,W=U.documentCount,E=U.nextId,Z=U.documentIds,e=U.fieldIds,r=U.fieldLength,c=U.averageFieldLength,h=U.storedFields,N=U.dirtCount,k=U.serializationVersion;if(k!==1&&k!==2)throw new Error("MiniSearch: cannot deserialize an index created with an incompatible version");var t=new F(Q);t._documentCount=W,t._nextId=E,t._documentIds=AR(Z),t._idToShortId=new Map,t._fieldIds=e,t._fieldLength=AR(r),t._avgFieldLength=c,t._storedFields=AR(h),t._dirtCount=N||0,t._index=new Rd;try{for(var S=q(t._documentIds),a=S.next();!a.done;a=S.next()){var T=kU(a.value,2),C=T[0],D=T[1];t._idToShortId.set(D,C)}}catch(m){B={error:m}}finally{try{a&&!a.done&&(R=S.return)&&R.call(S)}finally{if(B)throw B.error}}try{for(var p=q(J),o=p.next();!o.done;o=p.next()){var s=kU(o.value,2),v=s[0],y=s[1],i=new Map;try{for(var w=(l=void 0,q(Object.keys(y))),g=w.next();!g.done;g=w.next()){var L=g.value,M=y[L];k===1&&(M=M.ds),i.set(parseInt(L,10),AR(M))}}catch(m){l={error:m}}finally{try{g&&!g.done&&(n=w.return)&&n.call(w)}finally{if(l)throw l.error}}t._index.set(v,i)}}catch(m){V={error:m}}finally{try{o&&!o.done&&(d=p.return)&&d.call(p)}finally{if(V)throw V.error}}return t},F.prototype.executeQuery=function(U,Q){var B=this;if(Q===void 0&&(Q={}),typeof U!="string"){var R=NU(NU(NU({},Q),U),{queries:void 0}),V=U.queries.map(function(h){return B.executeQuery(h,R)});return this.combineResults(V,U.combineWith)}var d=this._options,l=d.tokenize,n=d.processTerm,J=d.searchOptions,W=NU(NU({tokenize:l,processTerm:n},J),Q),E=W.tokenize,Z=W.processTerm,e=E(U).flatMap(function(h){return Z(h)}).filter(function(h){return!!h}),r=e.map(hE(W)),c=r.map(function(h){return B.executeQuerySpec(h,W)});return this.combineResults(c,W.combineWith)},F.prototype.executeQuerySpec=function(U,Q){var B,R,V,d,l=NU(NU({},this._options.searchOptions),Q),n=(l.fields||this._options.fields).reduce(function(L,M){var m;return NU(NU({},L),(m={},m[M]=Wd(L,M)||1,m))},l.boost||{}),J=l.boostDocument,W=l.weights,E=l.maxFuzzy,Z=l.bm25,e=NU(NU({},iJ.weights),W),r=e.fuzzy,c=e.prefix,h=this._index.get(U.term),N=this.termResults(U.term,U.term,1,h,n,J,Z),k,t;if(U.prefix&&(k=this._index.atPrefix(U.term)),U.fuzzy){var S=U.fuzzy===!0?.2:U.fuzzy,a=S<1?Math.min(E,Math.round(U.term.length*S)):S;a&&(t=this._index.fuzzyGet(U.term,a))}if(k)try{for(var T=q(k),C=T.next();!C.done;C=T.next()){var D=kU(C.value,2),p=D[0],o=D[1],s=p.length-U.term.length;if(!!s){t==null||t.delete(p);var v=c*p.length/(p.length+.3*s);this.termResults(U.term,p,v,o,n,J,Z,N)}}}catch(L){B={error:L}}finally{try{C&&!C.done&&(R=T.return)&&R.call(T)}finally{if(B)throw B.error}}if(t)try{for(var y=q(t.keys()),i=y.next();!i.done;i=y.next()){var p=i.value,w=kU(t.get(p),2),g=w[0],s=w[1];if(!!s){var v=r*p.length/(p.length+s);this.termResults(U.term,p,v,g,n,J,Z,N)}}}catch(L){V={error:L}}finally{try{i&&!i.done&&(d=y.return)&&d.call(y)}finally{if(V)throw V.error}}return N},F.prototype.combineResults=function(U,Q){if(Q===void 0&&(Q=nd),U.length===0)return new Map;var B=Q.toLowerCase();return U.reduce(kE[B])||new Map},F.prototype.toJSON=function(){var U,Q,B,R,V=[];try{for(var d=q(this._index),l=d.next();!l.done;l=d.next()){var n=kU(l.value,2),J=n[0],W=n[1],E={};try{for(var Z=(B=void 0,q(W)),e=Z.next();!e.done;e=Z.next()){var r=kU(e.value,2),c=r[0],h=r[1];E[c]=Object.fromEntries(h)}}catch(N){B={error:N}}finally{try{e&&!e.done&&(R=Z.return)&&R.call(Z)}finally{if(B)throw B.error}}V.push([J,E])}}catch(N){U={error:N}}finally{try{l&&!l.done&&(Q=d.return)&&Q.call(d)}finally{if(U)throw U.error}}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:V,serializationVersion:2}},F.prototype.termResults=function(U,Q,B,R,V,d,l,n){var J,W,E,Z,e;if(n===void 0&&(n=new Map),R==null)return n;try{for(var r=q(Object.keys(V)),c=r.next();!c.done;c=r.next()){var h=c.value,N=V[h],k=this._fieldIds[h],t=R.get(k);if(t!=null){var S=t.size,a=this._avgFieldLength[k];try{for(var T=(E=void 0,q(t.keys())),C=T.next();!C.done;C=T.next()){var D=C.value;if(!this._documentIds.has(D)){this.removeTerm(k,D,Q),S-=1;continue}var p=d?d(this._documentIds.get(D),Q):1;if(!!p){var o=t.get(D),s=this._fieldLength.get(D)[k],v=TE(o,S,this._documentCount,s,a,l),y=B*N*p*v,i=n.get(D);if(i){i.score+=y,rE(i.terms,U);var w=Wd(i.match,Q);w?w.push(h):i.match[Q]=[h]}else n.set(D,{score:y,terms:[U],match:(e={},e[Q]=[h],e)})}}}catch(g){E={error:g}}finally{try{C&&!C.done&&(Z=T.return)&&Z.call(T)}finally{if(E)throw E.error}}}}}catch(g){J={error:g}}finally{try{c&&!c.done&&(W=r.return)&&W.call(r)}finally{if(J)throw J.error}}return n},F.prototype.addTerm=function(U,Q,B){var R=this._index.fetch(B,yJ),V=R.get(U);if(V==null)V=new Map,V.set(Q,1),R.set(U,V);else{var d=V.get(Q);V.set(Q,(d||0)+1)}},F.prototype.removeTerm=function(U,Q,B){if(!this._index.has(B)){this.warnDocumentChanged(Q,U,B);return}var R=this._index.fetch(B,yJ),V=R.get(U);V==null||V.get(Q)==null?this.warnDocumentChanged(Q,U,B):V.get(Q)<=1?V.size<=1?R.delete(U):V.delete(Q):V.set(Q,V.get(Q)-1),this._index.get(B).size===0&&this._index.delete(B)},F.prototype.warnDocumentChanged=function(U,Q,B){var R,V;try{for(var d=q(Object.keys(this._fieldIds)),l=d.next();!l.done;l=d.next()){var n=l.value;if(this._fieldIds[n]===Q){this._options.logger("warn","MiniSearch: document with ID ".concat(this._documentIds.get(U),' has changed before removal: term "').concat(B,'" was not present in field "').concat(n,'". Removing a document after it has changed can corrupt the index!'),"version_conflict");return}}}catch(J){R={error:J}}finally{try{l&&!l.done&&(V=d.return)&&V.call(d)}finally{if(R)throw R.error}}},F.prototype.addDocumentId=function(U){var Q=this._nextId;return this._idToShortId.set(U,Q),this._documentIds.set(Q,U),this._documentCount+=1,this._nextId+=1,Q},F.prototype.addFields=function(U){for(var Q=0;Q<U.length;Q++)this._fieldIds[U[Q]]=Q},F.prototype.addFieldLength=function(U,Q,B,R){var V=this._fieldLength.get(U);V==null&&this._fieldLength.set(U,V=[]),V[Q]=R;var d=this._avgFieldLength[Q]||0,l=d*B+R;this._avgFieldLength[Q]=l/(B+1)},F.prototype.removeFieldLength=function(U,Q,B,R){if(B===1){this._avgFieldLength[Q]=0;return}var V=this._avgFieldLength[Q]*B-R;this._avgFieldLength[Q]=V/(B-1)},F.prototype.saveStoredFields=function(U,Q){var B,R,V=this._options,d=V.storeFields,l=V.extractField;if(!(d==null||d.length===0)){var n=this._storedFields.get(U);n==null&&this._storedFields.set(U,n={});try{for(var J=q(d),W=J.next();!W.done;W=J.next()){var E=W.value,Z=l(Q,E);Z!==void 0&&(n[E]=Z)}}catch(e){B={error:e}}finally{try{W&&!W.done&&(R=J.return)&&R.call(J)}finally{if(B)throw B.error}}}},F}(),Wd=function(F,U){return Object.prototype.hasOwnProperty.call(F,U)?F[U]:void 0},kE=(OB={},OB[nd]=function(F,U){var Q,B;try{for(var R=q(U.keys()),V=R.next();!V.done;V=R.next()){var d=V.value,l=F.get(d);if(l==null)F.set(d,U.get(d));else{var n=U.get(d),J=n.score,W=n.terms,E=n.match;l.score=l.score+J,l.match=Object.assign(l.match,E),sJ(l.terms,W)}}}catch(Z){Q={error:Z}}finally{try{V&&!V.done&&(B=R.return)&&B.call(R)}finally{if(Q)throw Q.error}}return F},OB[oJ]=function(F,U){var Q,B,R=new Map;try{for(var V=q(U.keys()),d=V.next();!d.done;d=V.next()){var l=d.value,n=F.get(l);if(n!=null){var J=U.get(l),W=J.score,E=J.terms,Z=J.match;sJ(n.terms,E),R.set(l,{score:n.score+W,terms:n.terms,match:Object.assign(n.match,Z)})}}}catch(e){Q={error:e}}finally{try{d&&!d.done&&(B=V.return)&&B.call(V)}finally{if(Q)throw Q.error}}return R},OB[eE]=function(F,U){var Q,B;try{for(var R=q(U.keys()),V=R.next();!V.done;V=R.next()){var d=V.value;F.delete(d)}}catch(l){Q={error:l}}finally{try{V&&!V.done&&(B=R.return)&&B.call(R)}finally{if(Q)throw Q.error}}return F},OB),aE={k:1.2,b:.7,d:.5},TE=function(F,U,Q,B,R,V){var d=V.k,l=V.b,n=V.d,J=Math.log(1+(Q-U+.5)/(U+.5));return J*(n+F*(d+1)/(F+d*(1-l+l*B/R)))},hE=function(F){return function(U,Q,B){var R=typeof F.fuzzy=="function"?F.fuzzy(U,Q,B):F.fuzzy||!1,V=typeof F.prefix=="function"?F.prefix(U,Q,B):F.prefix===!0;return{term:U,fuzzy:R,prefix:V}}},Zd={idField:"id",extractField:function(F,U){return F[U]},tokenize:function(F,U){return F.split(CE)},processTerm:function(F,U){return F.toLowerCase()},fields:void 0,searchOptions:void 0,storeFields:[],logger:function(F,U,Q){return console!=null&&console.warn!=null&&console[F](U)},autoVacuum:!0},iJ={combineWith:nd,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:aE},cE={combineWith:oJ,prefix:function(F,U,Q){return U===Q.length-1}},Nd={batchSize:1e3,batchWait:10},Ed={minDirtFactor:.1,minDirtCount:20},td=NU(NU({},Nd),Ed),rE=function(F,U){F.includes(U)||F.push(U)},sJ=function(F,U){var Q,B;try{for(var R=q(U),V=R.next();!V.done;V=R.next()){var d=V.value;F.includes(d)||F.push(d)}}catch(l){Q={error:l}}finally{try{V&&!V.done&&(B=R.return)&&B.call(R)}finally{if(Q)throw Q.error}}},YJ=function(F,U){var Q=F.score,B=U.score;return B-Q},yJ=function(){return new Map},AR=function(F){var U,Q,B=new Map;try{for(var R=q(Object.keys(F)),V=R.next();!V.done;V=R.next()){var d=V.value;B.set(parseInt(d,10),F[d])}}catch(l){U={error:l}}finally{try{V&&!V.done&&(Q=R.return)&&Q.call(R)}finally{if(U)throw U.error}}return B},CE=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u;var $R=XU(require("obsidian"));var DE=F=>{let U=F.split(Gl),Q=aR();return Q?U.flatMap(B=>il.test(B)?Q.cut(B):[B]):U},UV=class{constructor(){this.indexedDocuments=new Map;this.previousResults=[];this.minisearch=new Jd(UV.options)}async loadCache(){let U=await hU.getMinisearchCache();U&&(this.minisearch=Jd.loadJS(U.data,UV.options),this.indexedDocuments=new Map(U.paths.map(Q=>[Q.path,Q.mtime])))}getDiff(U){let Q=new Map(U.map(V=>[V.path,V.mtime])),B=U.filter(V=>!this.indexedDocuments.has(V.path)||this.indexedDocuments.get(V.path)!==V.mtime),R=[...this.indexedDocuments].filter(([V,d])=>!Q.has(V)||Q.get(V)!==d).map(V=>({path:V[0],mtime:V[1]}));return{toAdd:B,toRemove:R}}async addFromPaths(U){let Q=await Promise.all(U.map(async R=>await hU.getDocument(R)));this.removeFromPaths(Q.filter(R=>this.indexedDocuments.has(R.path)).map(R=>R.path));let B=jl(Q,500);for(let R of B){R.forEach(d=>this.indexedDocuments.set(d.path,d.mtime));let V=R.filter(d=>this.minisearch.has(d.path));this.removeFromPaths(V.map(d=>d.path)),await this.minisearch.addAllAsync(R)}}removeFromPaths(U){U.forEach(B=>this.indexedDocuments.delete(B));let Q=U.filter(B=>this.minisearch.has(B));this.minisearch.discardAll(Q)}async search(U,Q){if(U.isEmpty())return this.previousResults=[],[];let B=this.minisearch.search(U.segmentsToStr(),{prefix:n=>n.length>=Q.prefixLength,fuzzy:.2,combineWith:"AND",boost:{basename:O.weightBasename,aliases:O.weightBasename,headings1:O.weightH1,headings2:O.weightH2,headings3:O.weightH3}});if(!B.length)return this.previousResults;if(Q.singleFilePath)return B.filter(n=>n.id===Q.singleFilePath);O.hideExcluded?B=B.filter(n=>!(app.metadataCache.isUserIgnored&&app.metadataCache.isUserIgnored(n.id))):B.forEach(n=>{app.metadataCache.isUserIgnored&&app.metadataCache.isUserIgnored(n.id)&&(n.score/=10)});let R=U.segments.filter(n=>n.value.startsWith("#")).map(n=>n.value);for(let n of R)for(let J of B)(J.tags??[]).includes(n)&&(J.score*=100);B=B.slice(0,50);let V=await Promise.all(B.map(async n=>await hU.getDocument(n.id))),d=U.getExactTerms();d.length&&(B=B.filter(n=>{let J=V.find(Z=>Z.path===n.id),W=J?.path.toLowerCase()??"",E=d0(J?.content??"").toLowerCase();return d.every(Z=>E.includes(Z)||W.includes(Z))}));let l=U.exclusions;return l.length&&(B=B.filter(n=>{let J=d0(V.find(W=>W.path===n.id)?.content??"").toLowerCase();return l.every(W=>!J.includes(W.value))})),B=B.filter((n,J,W)=>W.findIndex(E=>E.id===n.id)===J),this.previousResults=B,B}getMatches(U,Q,B){let R=null,V=[],d=0;for(;(R=Q.exec(U))!==null&&!(++d>=100);){let n=R[0];n&&V.push({match:n,offset:R.index})}let l=U.toLowerCase().indexOf(B.segmentsToStr());return l>-1&&V.unshift({offset:l,match:B.segmentsToStr()}),V}async getSuggestions(U,Q){let B;O.simpleSearch?B=await this.search(U,{prefixLength:1,singleFilePath:Q?.singleFilePath}):B=await this.search(U,{prefixLength:3,singleFilePath:Q?.singleFilePath});let R=U.segments.filter(l=>l.value.startsWith("#")).map(l=>l.value),V=await Promise.all(B.map(async l=>await hU.getDocument(l.id)));return B.map(l=>{let n=V.find(Z=>Z.path===l.id);n||(console.warn(`Omnisearch - Note "${l.id}" not in the live cache`),n={content:"",basename:l.id,path:l.id}),U.segments.forEach(Z=>{Z.value=Z.value.replace(/^#/,"")});let J=[...Object.keys(l.match),...U.segments.filter(Z=>Z.exact).map(Z=>Z.value),...R].filter(Z=>Z.length>1),W=this.getMatches(n.content,vF(J),U);return z({score:l.score,foundWords:J,matches:W},n)})}async writeToCache(){$R.Platform.isIosApp||await hU.writeMinisearchCache(this.minisearch,this.indexedDocuments)}},Sd=UV;Sd.options={tokenize:DE,processTerm:U=>(O.ignoreDiacritics?$F(U):U).toLowerCase(),idField:"path",fields:["basename","aliases","content","headings1","headings2","headings3"],storeFields:["tags"],logger(U,Q,B){B==="version_conflict"&&new $R.Notice("Omnisearch - Your index cache may be incorrect or corrupted. If this message keeps appearing, go to Settings to clear the cache.",5e3)}};var cU=new Sd;var ed=new Set;function vJ(F){ed.add(F)}async function GJ(){let F=[...ed].map(U=>U.path);F.length&&(cU.removeFromPaths(F),cU.addFromPaths(F),ed.clear())}function bJ(F,U,Q){let B=F.slice();return B[27]=U[Q],B[29]=Q,B}function pE(F){let U,Q,B;return{c(){U=j("button"),U.textContent="Create note"},m(R,V){UU(R,U,V),Q||(B=xU(U,"click",F[6]),Q=!0)},p:tU,d(R){R&&A(U),Q=!1,B()}}}function mE(F){let U,Q=O.showCreateButton&&pE(F);return{c(){Q&&Q.c(),U=LQ()},m(B,R){Q&&Q.m(B,R),UU(B,U,R)},p(B,R){O.showCreateButton&&Q.p(B,R)},d(B){Q&&Q.d(B),B&&A(U)}}}function XJ(F){let U,Q,B;return{c(){U=j("div"),Q=PU("\u23F3 Work in progress: "),B=PU(F[3]),UF(U,"text-align","center"),UF(U,"color","var(--text-accent)"),UF(U,"margin-top","10px")},m(R,V){UU(R,U,V),H(U,Q),H(U,B)},p(R,V){V&8&&jQ(B,R[3])},d(R){R&&A(U)}}}function OJ(F){let U,Q;function B(...R){return F[11](F[29],...R)}return U=new cJ({props:{selected:F[29]===F[0],note:F[27]}}),U.$on("mousemove",B),U.$on("click",F[5]),{c(){OU(U.$$.fragment)},m(R,V){YU(U,R,V),Q=!0},p(R,V){F=R;let d={};V&1&&(d.selected=F[29]===F[0]),V&4&&(d.note=F[27]),U.$set(d)},i(R){Q||(BU(U.$$.fragment,R),Q=!0)},o(R){RU(U.$$.fragment,R),Q=!1},d(R){pU(U,R)}}}function ME(F){let U;return{c(){U=PU("Searching...")},m(Q,B){UU(Q,U,B)},d(Q){Q&&A(U)}}}function oE(F){let U;return{c(){U=PU("We found 0 result for your search here.")},m(Q,B){UU(Q,U,B)},d(Q){Q&&A(U)}}}function iE(F){let U,Q,B,R=F[2],V=[];for(let W=0;W<R.length;W+=1)V[W]=OJ(bJ(F,R,W));let d=W=>RU(V[W],1,1,()=>{V[W]=null});function l(W,E){if(!W[2].length&&W[1]&&!W[4])return oE;if(W[4])return ME}let n=l(F,-1),J=n&&n(F);return{c(){for(let W=0;W<V.length;W+=1)V[W].c();U=FU(),Q=j("div"),J&&J.c(),UF(Q,"text-align","center")},m(W,E){for(let Z=0;Z<V.length;Z+=1)V[Z].m(W,E);UU(W,U,E),UU(W,Q,E),J&&J.m(Q,null),B=!0},p(W,E){if(E&37){R=W[2];let Z;for(Z=0;Z<R.length;Z+=1){let e=bJ(W,R,Z);V[Z]?(V[Z].p(e,E),BU(V[Z],1)):(V[Z]=OJ(e),V[Z].c(),BU(V[Z],1),V[Z].m(U.parentNode,U))}for(LF(),Z=R.length;Z<V.length;Z+=1)d(Z);jF()}n!==(n=l(W,E))&&(J&&J.d(1),J=n&&n(W),J&&(J.c(),J.m(Q,null)))},i(W){if(!B){for(let E=0;E<R.length;E+=1)BU(V[E]);B=!0}},o(W){V=V.filter(Boolean);for(let E=0;E<V.length;E+=1)RU(V[E]);B=!1},d(W){xB(V,W),W&&A(U),W&&A(Q),J&&J.d()}}}function sE(F){let U,Q,B,R,V,d,l,n,J,W,E,Z,e,r,c,h,N,k,t,S,a,T,C,D,p,o,s,v,y,i,w,g,L;U=new KR({props:{initialValue:F[1],placeholder:"Omnisearch - Vault",$$slots:{default:[mE]},$$scope:{ctx:F}}}),U.$on("input",F[10]);let M=F[3]&&XJ(F);return R=new gR({props:{$$slots:{default:[iE]},$$scope:{ctx:F}}}),{c(){OU(U.$$.fragment),Q=FU(),M&&M.c(),B=FU(),OU(R.$$.fragment),V=FU(),d=j("div"),l=j("div"),l.innerHTML='<span class="prompt-instruction-command">\u2191\u2193</span><span>to navigate</span>',n=FU(),J=j("div"),J.innerHTML=`<span class="prompt-instruction-command">alt \u2191\u2193</span> 
    <span>to cycle history</span>`,W=FU(),E=j("div"),E.innerHTML='<span class="prompt-instruction-command">\u21B5</span><span>to open</span>',Z=FU(),e=j("div"),e.innerHTML=`<span class="prompt-instruction-command">\u21B9</span> 
    <span>to switch to In-File Search</span>`,r=FU(),c=j("br"),h=FU(),N=j("div"),k=j("span"),k.textContent=`${xl()} \u21B5`,t=FU(),S=j("span"),S.textContent="to open in a new pane",a=FU(),T=j("div"),T.innerHTML=`<span class="prompt-instruction-command">shift \u21B5</span> 
    <span>to create</span>`,C=FU(),D=j("div"),D.innerHTML=`<span class="prompt-instruction-command">ctrl shift \u21B5</span> 
    <span>to create in a new pane</span>`,p=FU(),o=j("br"),s=FU(),v=j("div"),v.innerHTML=`<span class="prompt-instruction-command">alt \u21B5</span> 
    <span>to insert a link</span>`,y=FU(),i=j("div"),i.innerHTML=`<span class="prompt-instruction-command">ctrl+h</span> 
    <span>to toggle excerpts</span>`,w=FU(),g=j("div"),g.innerHTML='<span class="prompt-instruction-command">esc</span><span>to close</span>',P(l,"class","prompt-instruction"),P(J,"class","prompt-instruction"),P(E,"class","prompt-instruction"),P(e,"class","prompt-instruction"),P(k,"class","prompt-instruction-command"),P(N,"class","prompt-instruction"),P(T,"class","prompt-instruction"),P(D,"class","prompt-instruction"),P(v,"class","prompt-instruction"),P(i,"class","prompt-instruction"),P(g,"class","prompt-instruction"),P(d,"class","prompt-instructions")},m(m,Y){YU(U,m,Y),UU(m,Q,Y),M&&M.m(m,Y),UU(m,B,Y),YU(R,m,Y),UU(m,V,Y),UU(m,d,Y),H(d,l),H(d,n),H(d,J),H(d,W),H(d,E),H(d,Z),H(d,e),H(d,r),H(d,c),H(d,h),H(d,N),H(N,k),H(N,t),H(N,S),H(d,a),H(d,T),H(d,C),H(d,D),H(d,p),H(d,o),H(d,s),H(d,v),H(d,y),H(d,i),H(d,w),H(d,g),L=!0},p(m,[Y]){let I={};Y&2&&(I.initialValue=m[1]),Y&1073741824&&(I.$$scope={dirty:Y,ctx:m}),U.$set(I),m[3]?M?M.p(m,Y):(M=XJ(m),M.c(),M.m(B.parentNode,B)):M&&(M.d(1),M=null);let X={};Y&1073741847&&(X.$$scope={dirty:Y,ctx:m}),R.$set(X)},i(m){L||(BU(U.$$.fragment,m),BU(R.$$.fragment,m),L=!0)},o(m){RU(U.$$.fragment,m),RU(R.$$.fragment,m),L=!1},d(m){pU(U,m),m&&A(Q),M&&M.d(m),m&&A(B),pU(R,m),m&&A(V),m&&A(d)}}}function YE(F,U,Q){let B,R;uB(F,YF,i=>Q(9,R=i));let{modal:V}=U,{previousQuery:d}=U,l=0,n=0,J,W=[],E,Z="",e=!0;KQ(async()=>{$.enable("vault"),$.on("vault","enter",k),$.on("vault","create-note",C),$.on("vault","open-in-new-pane",t),$.on("vault","insert-link",D),$.on("vault","tab",p),$.on("vault","arrow-up",()=>o(-1)),$.on("vault","arrow-down",()=>o(1)),$.on("vault","prev-search-history",r),$.on("vault","next-search-history",c),await GJ(),O.showPreviousQueryResults&&Q(7,d=(await hU.getSearchHistory())[0])}),gQ(()=>{$.disable("vault")});async function r(){let i=(await hU.getSearchHistory()).filter(w=>w);++n>=i.length&&(n=0),Q(7,d=i[n])}async function c(){let i=(await hU.getSearchHistory()).filter(w=>w);--n<0&&(n=i.length?i.length-1:0),Q(7,d=i[n])}async function h(){E=new JQ(J),Q(2,W=(await cU.getSuggestions(E)).sort((i,w)=>w.score-i.score)),Q(0,l=0),await s()}function N(i){!B||(i?.ctrlKey?t():k(),V.close())}function k(){!B||(a(B),V.close())}function t(){!B||(a(B,!0),V.close())}function S(){J&&hU.addToSearchHistory(J)}function a(i,w=!1){S(),PR(i,w)}async function T(i){await C()}async function C(i){if(J){try{await NJ(J,i?.newLeaf)}catch(w){new uF.Notice(w.message);return}V.close()}}function D(){if(!B)return;let i=app.vault.getMarkdownFiles().find(m=>m.path===B.path),w=app.workspace.getActiveFile(),g=app.workspace.getActiveViewOfType(uF.MarkdownView);if(!g?.editor){new uF.Notice("Omnisearch - Error - No active editor",3e3);return}let L;i&&w?L=app.fileManager.generateMarkdownLink(i,w.path):L=`[[${B.basename}.${wl(B.path)}]]`;let M=g.editor.getCursor();g.editor.replaceRange(L,M,M),M.ch+=L.length,g.editor.setCursor(M),V.close()}function p(){if(!(B&&(aB(B?.path)||!B?.matches.length)))if(S(),V.close(),B){let i=app.vault.getAbstractFileByPath(B.path);i&&i instanceof uF.TFile&&new uQ(app,i,J).open()}else{let i=app.workspace.getActiveViewOfType(uF.MarkdownView);i&&new uQ(app,i.file,J).open()}}function o(i){Q(0,l=hR(l+i,W.length)),s()}async function s(){await lF(),B&&document.querySelector(`[data-result-id="${B.path}"]`)?.scrollIntoView({behavior:"auto",block:"nearest"})}let v=i=>Q(1,J=i.detail),y=(i,w)=>Q(0,l=i);return F.$$set=i=>{"modal"in i&&Q(8,V=i.modal),"previousQuery"in i&&Q(7,d=i.previousQuery)},F.$$.update=()=>{if(F.$$.dirty&130){U:Q(1,J=J??d)}if(F.$$.dirty&2){U:J?(Q(2,W=[]),Q(4,e=!0),h().then(()=>{Q(4,e=!1)})):(Q(4,e=!1),Q(2,W=[]))}if(F.$$.dirty&5){U:B=W[l]}if(F.$$.dirty&512){U:switch(R){case KU.LoadingCache:Q(3,Z="Loading cache...");break;case KU.ReadingFiles:Q(3,Z="Reading files...");break;case KU.IndexingFiles:Q(3,Z="Indexing files...");break;case KU.WritingCache:h(),Q(3,Z="Updating cache...");break;default:h(),Q(3,Z="");break}}},[l,J,W,Z,e,N,T,d,V,R,v,y]}var HJ=class extends CU{constructor(U){super();mU(this,U,YE,sE,rU,{modal:8,previousQuery:7})}},zJ=HJ;var wJ=XU(require("obsidian"));function yE(F){let U,Q=F[2].replace(F[3],yF)+"";return{c(){U=j("div"),P(U,"class","omnisearch-result__body")},m(B,R){UU(B,U,R),U.innerHTML=Q},p(B,R){R&12&&Q!==(Q=B[2].replace(B[3],yF)+"")&&(U.innerHTML=Q)},d(B){B&&A(U)}}}function vE(F){let U,Q;return U=new _R({props:{id:F[0].toString(),selected:F[1],$$slots:{default:[yE]},$$scope:{ctx:F}}}),U.$on("mousemove",F[6]),U.$on("click",F[7]),{c(){OU(U.$$.fragment)},m(B,R){YU(U,B,R),Q=!0},p(B,[R]){let V={};R&1&&(V.id=B[0].toString()),R&2&&(V.selected=B[1]),R&268&&(V.$$scope={dirty:R,ctx:B}),U.$set(V)},i(B){Q||(BU(U.$$.fragment,B),Q=!0)},o(B){RU(U.$$.fragment,B),Q=!1},d(B){pU(U,B)}}}function GE(F,U,Q){let B,R,{offset:V}=U,{note:d}=U,{index:l=0}=U,{selected:n=!1}=U;function J(E){FF.call(this,F,E)}function W(E){FF.call(this,F,E)}return F.$$set=E=>{"offset"in E&&Q(4,V=E.offset),"note"in E&&Q(5,d=E.note),"index"in E&&Q(0,l=E.index),"selected"in E&&Q(1,n=E.selected)},F.$$.update=()=>{if(F.$$.dirty&32){U:Q(3,B=vF(d.foundWords))}if(F.$$.dirty&48){U:Q(2,R=cR(d?.content??"",V))}},[l,n,R,B,V,d,J,W]}var uJ=class extends CU{constructor(U){super();mU(this,U,GE,vE,rU,{offset:4,note:5,index:0,selected:1})}},xJ=uJ;function LJ(F,U,Q){let B=F.slice();return B[16]=U[Q],B[18]=Q,B}function bE(F){let U;return{c(){U=j("div"),U.textContent="We found 0 result for your search here.",UF(U,"text-align","center")},m(Q,B){UU(Q,U,B)},p:tU,i:tU,o:tU,d(Q){Q&&A(U)}}}function XE(F){let U,Q,B=F[4],R=[];for(let d=0;d<B.length;d+=1)R[d]=jJ(LJ(F,B,d));let V=d=>RU(R[d],1,1,()=>{R[d]=null});return{c(){for(let d=0;d<R.length;d+=1)R[d].c();U=LQ()},m(d,l){for(let n=0;n<R.length;n+=1)R[n].m(d,l);UU(d,U,l),Q=!0},p(d,l){if(l&120){B=d[4];let n;for(n=0;n<B.length;n+=1){let J=LJ(d,B,n);R[n]?(R[n].p(J,l),BU(R[n],1)):(R[n]=jJ(J),R[n].c(),BU(R[n],1),R[n].m(U.parentNode,U))}for(LF(),n=B.length;n<R.length;n+=1)V(n);jF()}},i(d){if(!Q){for(let l=0;l<B.length;l+=1)BU(R[l]);Q=!0}},o(d){R=R.filter(Boolean);for(let l=0;l<R.length;l+=1)RU(R[l]);Q=!1},d(d){xB(R,d),d&&A(U)}}}function jJ(F){let U,Q;function B(...R){return F[11](F[18],...R)}return U=new xJ({props:{offset:F[16],note:F[3],index:F[18],selected:F[18]===F[5]}}),U.$on("mousemove",B),U.$on("click",F[6]),{c(){OU(U.$$.fragment)},m(R,V){YU(U,R,V),Q=!0},p(R,V){F=R;let d={};V&16&&(d.offset=F[16]),V&8&&(d.note=F[3]),V&32&&(d.selected=F[18]===F[5]),U.$set(d)},i(R){Q||(BU(U.$$.fragment,R),Q=!0)},o(R){RU(U.$$.fragment,R),Q=!1},d(R){pU(U,R)}}}function OE(F){let U,Q,B,R,V=[XE,bE],d=[];function l(n,J){return n[4].length&&n[3]?0:1}return U=l(F,-1),Q=d[U]=V[U](F),{c(){Q.c(),B=LQ()},m(n,J){d[U].m(n,J),UU(n,B,J),R=!0},p(n,J){let W=U;U=l(n,J),U===W?d[U].p(n,J):(LF(),RU(d[W],1,1,()=>{d[W]=null}),jF(),Q=d[U],Q?Q.p(n,J):(Q=d[U]=V[U](n),Q.c()),BU(Q,1),Q.m(B.parentNode,B))},i(n){R||(BU(Q),R=!0)},o(n){RU(Q),R=!1},d(n){d[U].d(n),n&&A(B)}}}function HE(F){let U;return{c(){U=j("span"),U.textContent="to close"},m(Q,B){UU(Q,U,B)},d(Q){Q&&A(U)}}}function zE(F){let U;return{c(){U=j("span"),U.textContent="to go back to Vault Search"},m(Q,B){UU(Q,U,B)},d(Q){Q&&A(U)}}}function uE(F){let U,Q,B,R,V,d,l,n,J,W,E,Z,e,r,c;U=new KR({props:{placeholder:"Omnisearch - File",initialValue:F[1]}}),U.$on("input",F[10]),B=new gR({props:{$$slots:{default:[OE]},$$scope:{ctx:F}}});function h(t,S){return t[0]?zE:HE}let N=h(F,-1),k=N(F);return{c(){OU(U.$$.fragment),Q=FU(),OU(B.$$.fragment),R=FU(),V=j("div"),d=j("div"),d.innerHTML='<span class="prompt-instruction-command">\u2191\u2193</span><span>to navigate</span>',l=FU(),n=j("div"),n.innerHTML='<span class="prompt-instruction-command">\u21B5</span><span>to open</span>',J=FU(),W=j("div"),W.innerHTML=`<span class="prompt-instruction-command">\u21B9</span> 
    <span>to switch to Vault Search</span>`,E=FU(),Z=j("div"),e=j("span"),e.textContent="esc",r=FU(),k.c(),P(d,"class","prompt-instruction"),P(n,"class","prompt-instruction"),P(W,"class","prompt-instruction"),P(e,"class","prompt-instruction-command"),P(Z,"class","prompt-instruction"),P(V,"class","prompt-instructions")},m(t,S){YU(U,t,S),UU(t,Q,S),YU(B,t,S),UU(t,R,S),UU(t,V,S),H(V,d),H(V,l),H(V,n),H(V,J),H(V,W),H(V,E),H(V,Z),H(Z,e),H(Z,r),k.m(Z,null),c=!0},p(t,[S]){let a={};S&2&&(a.initialValue=t[1]),U.$set(a);let T={};S&524344&&(T.$$scope={dirty:S,ctx:t}),B.$set(T),N!==(N=h(t,S))&&(k.d(1),k=N(t),k&&(k.c(),k.m(Z,null)))},i(t){c||(BU(U.$$.fragment,t),BU(B.$$.fragment,t),c=!0)},o(t){RU(U.$$.fragment,t),RU(B.$$.fragment,t),c=!1},d(t){pU(U,t),t&&A(Q),pU(B,t),t&&A(R),t&&A(V),k.d()}}}function xE(F,U,Q){let B=F.find(R=>R.offset>U);return B?F.filter(R=>R.offset>U&&R.offset<=B.offset+Q):[]}function wE(F,U,Q){let{modal:B}=U,{parent:R=null}=U,{singleFilePath:V=""}=U,{previousQuery:d}=U,l,n=[],J=0,W,E;KQ(()=>{$.enable("infile"),$.on("infile","enter",c),$.on("infile","arrow-up",()=>e(-1)),$.on("infile","arrow-down",()=>e(1)),$.on("infile","tab",h)}),gQ(()=>{$.disable("infile")});function Z(t){let S=[],a=-1,T=0;for(;;){let C=xE(t,a,tB);if(!C.length||(a=C.last().offset,S.push(C),++T>100))break}return S}function e(t){Q(5,J=hR(J+t,n.length)),r()}async function r(){await lF(),document.querySelector(`[data-result-id="${J}"]`)?.scrollIntoView({behavior:"auto",block:"nearest"})}async function c(t){if(W){B.close(),R&&R.close(),await PR(W,t?.ctrlKey);let S=app.workspace.getActiveViewOfType(wJ.MarkdownView);if(!S)return;let a=n[J]??0,T=S.editor.offsetToPos(a);T.ch=0,S.editor.setCursor(T),S.editor.scrollIntoView({from:{line:T.line-10,ch:0},to:{line:T.line+10,ch:0}})}}function h(){new WQ(app,d).open(),B.close()}let N=t=>Q(2,l=t.detail),k=(t,S)=>Q(5,J=t);return F.$$set=t=>{"modal"in t&&Q(7,B=t.modal),"parent"in t&&Q(0,R=t.parent),"singleFilePath"in t&&Q(8,V=t.singleFilePath),"previousQuery"in t&&Q(1,d=t.previousQuery)},F.$$.update=()=>{if(F.$$.dirty&2){U:Q(2,l=d??"")}if(F.$$.dirty&772){U:(async()=>{l&&(Q(9,E=new JQ(l)),Q(3,W=(await cU.getSuggestions(E,{singleFilePath:V}))[0]??null)),Q(5,J=0),await r()})()}if(F.$$.dirty&8){U:if(W){let t=Z(W.matches);Q(4,n=t.map(S=>Math.round((S.first().offset+S.last().offset)/2)))}}},[R,d,l,W,n,J,c,B,V,E,N,k]}var IJ=class extends CU{constructor(U){super();mU(this,U,wE,uE,rU,{modal:7,parent:0,singleFilePath:8,previousQuery:1})}},fJ=IJ;var kd=class extends KJ.Modal{constructor(U){super(U);this.modalEl.replaceChildren(),this.modalEl.addClass("omnisearch-modal","prompt"),this.modalEl.removeClass("modal"),this.modalEl.tabIndex=-1,this.scope.register([],"ArrowDown",Q=>{Q.preventDefault(),$.emit("arrow-down")}),this.scope.register([],"ArrowUp",Q=>{Q.preventDefault(),$.emit("arrow-up")});for(let Q of[{k:"J",dir:"down"},{k:"K",dir:"up"}])for(let B of["Ctrl","Mod"])this.scope.register([B],Q.k,R=>{this.app.vault.getConfig("vimMode")&&$.emit("arrow-"+Q.dir)});for(let Q of[{k:"N",dir:"down"},{k:"P",dir:"up"}])for(let B of["Ctrl","Mod"])this.scope.register([B],Q.k,R=>{this.app.vault.getConfig("vimMode")&&$.emit("arrow-"+Q.dir)});this.scope.register(["Mod"],"Enter",Q=>{Q.preventDefault(),$.emit("open-in-new-pane")}),this.scope.register(["Alt"],"Enter",Q=>{Q.preventDefault(),$.emit("insert-link")}),this.scope.register(["Shift"],"Enter",Q=>{Q.preventDefault(),$.emit("create-note")}),this.scope.register(["Ctrl","Shift"],"Enter",Q=>{Q.preventDefault(),$.emit("create-note",{newLeaf:!0})}),this.scope.register([],"Enter",Q=>{vl()||(Q.preventDefault(),$.emit("enter"))}),this.scope.register([],"Tab",Q=>{Q.preventDefault(),$.emit("tab")}),this.scope.register(["Alt"],"ArrowDown",Q=>{Q.preventDefault(),$.emit("next-search-history")}),this.scope.register(["Alt"],"ArrowUp",Q=>{Q.preventDefault(),$.emit("prev-search-history")}),this.scope.register(["Ctrl"],"H",Q=>{$.emit(kR.ToggleExcerpts)})}},WQ=class extends kd{constructor(U,Q){super(U);let B=new zJ({target:this.modalEl,props:{modal:this,previousQuery:Q}});this.onClose=()=>{B.$destroy()}}},uQ=class extends kd{constructor(U,Q,B="",R){super(U);let V=new fJ({target:this.modalEl,props:{modal:this,singleFilePath:Q.path,parent:R,previousQuery:B}});R&&R.containerEl.toggleVisibility(!1),this.onClose=()=>{R&&R.containerEl.toggleVisibility(!0),V.$destroy()}}};function LE(F){return F.map(U=>{let{score:Q,path:B,basename:R,foundWords:V,matches:d}=U;return{score:Q,path:B,basename:R,foundWords:V,matches:d.map(l=>({match:l.match,offset:l.offset}))}})}async function jE(F){let U=new JQ(F),Q=await cU.getSuggestions(U);return LE(Q)}var ad={search:jE};var Td=class extends DF.Plugin{async onload(){await Ml(this),await fE(),await MQ.clearOldDatabases(),gE(this),O.ribbonIcon&&this.addRibbonButton(),this.addSettingTab(new B0(this)),$.disable("vault"),$.disable("infile"),$.on("global",kR.ToggleExcerpts,()=>{AF.set(!O.showExcerpt)}),this.addCommand({id:"show-modal",name:"Vault search",callback:()=>{new WQ(app).open()}}),this.addCommand({id:"show-modal-infile",name:"In-file search",editorCallback:(U,Q)=>{new uQ(app,Q.file).open()}}),app.workspace.onLayoutReady(async()=>{this.registerEvent(this.app.vault.on("create",async U=>{eB(U.path)&&(await hU.addToLiveCache(U.path),cU.addFromPaths([U.path]))})),this.registerEvent(this.app.vault.on("delete",U=>{hU.removeFromLiveCache(U.path),cU.removeFromPaths([U.path])})),this.registerEvent(this.app.vault.on("modify",async U=>{eB(U.path)&&(await hU.addToLiveCache(U.path),vJ(U))})),this.registerEvent(this.app.vault.on("rename",async(U,Q)=>{eB(U.path)&&(hU.removeFromLiveCache(Q),hU.addToLiveCache(U.path),cU.removeFromPaths([Q]),await cU.addFromPaths([U.path]))})),await IE()}),KE(this)}async onunload(){delete globalThis.omnisearch,await fU.clearCache()}addRibbonButton(){this.ribbonButton=this.addRibbonIcon("search","Omnisearch",U=>{new WQ(app).open()})}removeRibbonButton(){this.ribbonButton&&this.ribbonButton.parentNode?.removeChild(this.ribbonButton)}};async function IE(){console.time("Omnisearch - Indexing total time"),YF.set(KU.ReadingFiles);let F=app.vault.getFiles().filter(Q=>eB(Q.path));console.log(`Omnisearch - ${F.length} files total`),DF.Platform.isIosApp||(console.time("Omnisearch - Loading index from cache"),YF.set(KU.LoadingCache),await cU.loadCache(),console.timeEnd("Omnisearch - Loading index from cache"));let U=cU.getDiff(F.map(Q=>({path:Q.path,mtime:Q.stat.mtime})));U.toAdd.length&&console.log("Omnisearch - Total number of files to add/update: "+U.toAdd.length),U.toRemove.length&&console.log("Omnisearch - Total number of files to remove: "+U.toRemove.length),U.toAdd.length>=1e3&&!DF.Platform.isIosApp&&new DF.Notice(`Omnisearch - ${U.toAdd.length} files need to be indexed. Obsidian may experience stutters and freezes during the process`,1e4),YF.set(KU.IndexingFiles),cU.removeFromPaths(U.toRemove.map(Q=>Q.path)),await cU.addFromPaths(U.toAdd.map(Q=>Q.path)),(U.toRemove.length||U.toAdd.length)&&(YF.set(KU.WritingCache),await cU.writeToCache()),console.timeEnd("Omnisearch - Indexing total time"),U.toAdd.length>=1e3&&new DF.Notice("Omnisearch - Your files have been indexed."),YF.set(KU.Done)}async function fE(){let F=[`${app.vault.configDir}/plugins/omnisearch/searchIndex.json`,`${app.vault.configDir}/plugins/omnisearch/notesCache.json`,`${app.vault.configDir}/plugins/omnisearch/notesCache.data`,`${app.vault.configDir}/plugins/omnisearch/searchIndex.data`,`${app.vault.configDir}/plugins/omnisearch/historyCache.json`,`${app.vault.configDir}/plugins/omnisearch/pdfCache.data`];for(let U of F)if(await app.vault.adapter.exists(U))try{await app.vault.adapter.remove(U)}catch{}}function KE(F){let U="1.8.0-beta.3";if(O.welcomeMessage!==U){let Q=new DocumentFragment;Q.createSpan({},B=>{B.innerHTML=`<strong>Omnisearch has been updated</strong>
You can now enable "Images Indexing" to use Optical Character Recognition on your scanned documents
\u{1F50E}\u{1F5BC}`}),new DF.Notice(Q,3e4)}O.welcomeMessage=U,F.saveData(O)}function gE(F){F.registerObsidianProtocolHandler("omnisearch",U=>{new WQ(app,U.query).open()}),globalThis.omnisearch=ad,app.plugins.plugins.omnisearch.api=ad}
