"use strict";var U=require("obsidian"),F=require("crypto"),Q=function(){return Q=Object.assign||function(U){for(var F,Q=1,B=arguments.length;Q<B;Q++)for(var R in F=arguments[Q])Object.prototype.hasOwnProperty.call(F,R)&&(U[R]=F[R]);return U},Q.apply(this,arguments)};function B(U){var F="function"==typeof Symbol&&Symbol.iterator,Q=F&&U[F],B=0;if(Q)return Q.call(U);if(U&&"number"==typeof U.length)return{next:function(){return U&&B>=U.length&&(U=void 0),{value:U&&U[B++],done:!U}}};throw new TypeError(F?"Object is not iterable.":"Symbol.iterator is not defined.")}function R(U,F){var Q="function"==typeof Symbol&&U[Symbol.iterator];if(!Q)return U;var B,R,V=Q.call(U),d=[];try{for(;(void 0===F||F-- >0)&&!(B=V.next()).done;)d.push(B.value)}catch(U){R={error:U}}finally{try{B&&!B.done&&(Q=V.return)&&Q.call(V)}finally{if(R)throw R.error}}return d}var V,d=function(){function U(U,F){var Q=U._tree,B=Array.from(Q.keys());this.set=U,this._type=F,this._path=B.length>0?[{node:Q,keys:B}]:[]}return U.prototype.next=function(){var U=this.dive();return this.backtrack(),U},U.prototype.dive=function(){if(0===this._path.length)return{done:!0,value:void 0};var U=J(this._path),F=U.node,Q=U.keys;if(""===J(Q))return{done:!1,value:this.result()};var B=F.get(J(Q));return this._path.push({node:B,keys:Array.from(B.keys())}),this.dive()},U.prototype.backtrack=function(){if(0!==this._path.length){var U=J(this._path).keys;U.pop(),U.length>0||(this._path.pop(),this.backtrack())}},U.prototype.key=function(){return this.set._prefix+this._path.map((function(U){var F=U.keys;return J(F)})).filter((function(U){return""!==U})).join("")},U.prototype.value=function(){return J(this._path).node.get("")},U.prototype.result=function(){switch(this._type){case"VALUES":return this.value();case"KEYS":return this.key();default:return[this.key(),this.value()]}},U.prototype[Symbol.iterator]=function(){return this},U}(),J=function(U){return U[U.length-1]},l=function(U,F,Q,R,V,d,J,W){var Z,n,N=d*J;try{U:for(var E=B(U.keys()),S=E.next();!S.done;S=E.next()){var k=S.value;if(""===k){var T=V[N-1];T<=Q&&R.set(W,[U.get(k),T])}else{for(var a=d,h=0;h<k.length;++h,++a){for(var t=k[h],C=J*a,D=C-J,e=V[C],c=Math.max(0,a-Q-1),M=Math.min(J-1,a+Q),p=c;p<M;++p){var m=t!==F[p],Y=V[D+p]+ +m,G=V[D+p+1]+1,r=V[C+p]+1,v=V[C+p+1]=Math.min(Y,G,r);v<e&&(e=v)}if(e>Q)continue U}l(U.get(k),F,Q,R,V,a,J,W+k)}}}catch(U){Z={error:U}}finally{try{S&&!S.done&&(n=E.return)&&n.call(E)}finally{if(Z)throw Z.error}}},W=function(){function U(U,F){void 0===U&&(U=new Map),void 0===F&&(F=""),this._size=void 0,this._tree=U,this._prefix=F}return U.prototype.atPrefix=function(F){var Q,V;if(!F.startsWith(this._prefix))throw new Error("Mismatched prefix");var d=R(Z(this._tree,F.slice(this._prefix.length)),2),J=d[0],l=d[1];if(void 0===J){var W=R(T(l),2),n=W[0],N=W[1];try{for(var E=B(n.keys()),S=E.next();!S.done;S=E.next()){var k=S.value;if(""!==k&&k.startsWith(N)){var a=new Map;return a.set(k.slice(N.length),n.get(k)),new U(a,F)}}}catch(U){Q={error:U}}finally{try{S&&!S.done&&(V=E.return)&&V.call(E)}finally{if(Q)throw Q.error}}}return new U(J,F)},U.prototype.clear=function(){this._size=void 0,this._tree.clear()},U.prototype.delete=function(U){return this._size=void 0,E(this._tree,U)},U.prototype.entries=function(){return new d(this,"ENTRIES")},U.prototype.forEach=function(U){var F,Q;try{for(var V=B(this),d=V.next();!d.done;d=V.next()){var J=R(d.value,2);U(J[0],J[1],this)}}catch(U){F={error:U}}finally{try{d&&!d.done&&(Q=V.return)&&Q.call(V)}finally{if(F)throw F.error}}},U.prototype.fuzzyGet=function(U,F){return function(U,F,Q){var B=new Map;if(void 0===F)return B;for(var R=F.length+1,V=R+Q,d=new Uint8Array(V*R).fill(Q+1),J=0;J<R;++J)d[J]=J;for(var W=1;W<V;++W)d[W*R]=W;return l(U,F,Q,B,d,1,R,""),B}(this._tree,U,F)},U.prototype.get=function(U){var F=n(this._tree,U);return void 0!==F?F.get(""):void 0},U.prototype.has=function(U){var F=n(this._tree,U);return void 0!==F&&F.has("")},U.prototype.keys=function(){return new d(this,"KEYS")},U.prototype.set=function(U,F){if("string"!=typeof U)throw new Error("key must be a string");return this._size=void 0,N(this._tree,U).set("",F),this},Object.defineProperty(U.prototype,"size",{get:function(){if(this._size)return this._size;this._size=0;for(var U=this.entries();!U.next().done;)this._size+=1;return this._size},enumerable:!1,configurable:!0}),U.prototype.update=function(U,F){if("string"!=typeof U)throw new Error("key must be a string");this._size=void 0;var Q=N(this._tree,U);return Q.set("",F(Q.get(""))),this},U.prototype.fetch=function(U,F){if("string"!=typeof U)throw new Error("key must be a string");this._size=void 0;var Q=N(this._tree,U),B=Q.get("");return void 0===B&&Q.set("",B=F()),B},U.prototype.values=function(){return new d(this,"VALUES")},U.prototype[Symbol.iterator]=function(){return this.entries()},U.from=function(F){var Q,V,d=new U;try{for(var J=B(F),l=J.next();!l.done;l=J.next()){var W=R(l.value,2),Z=W[0],n=W[1];d.set(Z,n)}}catch(U){Q={error:U}}finally{try{l&&!l.done&&(V=J.return)&&V.call(J)}finally{if(Q)throw Q.error}}return d},U.fromObject=function(F){return U.from(Object.entries(F))},U}(),Z=function(U,F,Q){var R,V;if(void 0===Q&&(Q=[]),0===F.length||null==U)return[U,Q];try{for(var d=B(U.keys()),J=d.next();!J.done;J=d.next()){var l=J.value;if(""!==l&&F.startsWith(l))return Q.push([U,l]),Z(U.get(l),F.slice(l.length),Q)}}catch(U){R={error:U}}finally{try{J&&!J.done&&(V=d.return)&&V.call(d)}finally{if(R)throw R.error}}return Q.push([U,F]),Z(void 0,"",Q)},n=function(U,F){var Q,R;if(0===F.length||null==U)return U;try{for(var V=B(U.keys()),d=V.next();!d.done;d=V.next()){var J=d.value;if(""!==J&&F.startsWith(J))return n(U.get(J),F.slice(J.length))}}catch(U){Q={error:U}}finally{try{d&&!d.done&&(R=V.return)&&R.call(V)}finally{if(Q)throw Q.error}}},N=function(U,F){var Q,R,V=F.length;U:for(var d=0;U&&d<V;){try{for(var J=(Q=void 0,B(U.keys())),l=J.next();!l.done;l=J.next()){var W=l.value;if(""!==W&&F[d]===W[0]){for(var Z=Math.min(V-d,W.length),n=1;n<Z&&F[d+n]===W[n];)++n;var N=U.get(W);if(n===W.length)U=N;else{var E=new Map;E.set(W.slice(n),N),U.set(F.slice(d,d+n),E),U.delete(W),U=E}d+=n;continue U}}}catch(U){Q={error:U}}finally{try{l&&!l.done&&(R=J.return)&&R.call(J)}finally{if(Q)throw Q.error}}var S=new Map;return U.set(F.slice(d),S),S}return U},E=function(U,F){var Q=R(Z(U,F),2),B=Q[0],V=Q[1];if(void 0!==B)if(B.delete(""),0===B.size)S(V);else if(1===B.size){var d=R(B.entries().next().value,2),J=d[0],l=d[1];k(V,J,l)}},S=function(U){if(0!==U.length){var F=R(T(U),2),Q=F[0],B=F[1];if(Q.delete(B),0===Q.size)S(U.slice(0,-1));else if(1===Q.size){var V=R(Q.entries().next().value,2),d=V[0],J=V[1];""!==d&&k(U.slice(0,-1),d,J)}}},k=function(U,F,Q){if(0!==U.length){var B=R(T(U),2),V=B[0],d=B[1];V.set(d+F,Q),V.delete(d)}},T=function(U){return U[U.length-1]},a=function(){function U(U){if(null==(null==U?void 0:U.fields))throw new Error('MiniSearch: option "fields" must be provided');this._options=Q(Q(Q({},e),U),{searchOptions:Q(Q({},c),U.searchOptions||{}),autoSuggestOptions:Q(Q({},M),U.autoSuggestOptions||{})}),this._index=new W,this._documentCount=0,this._documentIds=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this.addFields(this._options.fields)}return U.prototype.add=function(U){var F,Q,R,V,d=this._options,J=d.extractField,l=d.tokenize,W=d.processTerm,Z=d.fields,n=d.idField,N=J(U,n);if(null==N)throw new Error('MiniSearch: document does not have ID field "'.concat(n,'"'));var E=this.addDocumentId(N);this.saveStoredFields(E,U);try{for(var S=B(Z),k=S.next();!k.done;k=S.next()){var T=k.value,a=J(U,T);if(null!=a){var h=l(a.toString(),T),t=this._fieldIds[T],C=new Set(h).size;this.addFieldLength(E,t,this._documentCount-1,C);try{for(var D=(R=void 0,B(h)),e=D.next();!e.done;e=D.next()){var c=W(e.value,T);c&&this.addTerm(t,E,c)}}catch(U){R={error:U}}finally{try{e&&!e.done&&(V=D.return)&&V.call(D)}finally{if(R)throw R.error}}}}}catch(U){F={error:U}}finally{try{k&&!k.done&&(Q=S.return)&&Q.call(S)}finally{if(F)throw F.error}}},U.prototype.addAll=function(U){var F,Q;try{for(var R=B(U),V=R.next();!V.done;V=R.next()){var d=V.value;this.add(d)}}catch(U){F={error:U}}finally{try{V&&!V.done&&(Q=R.return)&&Q.call(R)}finally{if(F)throw F.error}}},U.prototype.addAllAsync=function(U,F){var Q=this;void 0===F&&(F={});var B=F.chunkSize,R=void 0===B?10:B,V={chunk:[],promise:Promise.resolve()},d=U.reduce((function(U,F,B){var V=U.chunk,d=U.promise;return V.push(F),(B+1)%R==0?{chunk:[],promise:d.then((function(){return new Promise((function(U){return setTimeout(U,0)}))})).then((function(){return Q.addAll(V)}))}:{chunk:V,promise:d}}),V),J=d.chunk;return d.promise.then((function(){return Q.addAll(J)}))},U.prototype.remove=function(U){var F,Q,V,d,J,l,W=this._options,Z=W.tokenize,n=W.processTerm,N=W.extractField,E=W.fields,S=W.idField,k=N(U,S);if(null==k)throw new Error('MiniSearch: document does not have ID field "'.concat(S,'"'));try{for(var T=B(this._documentIds),a=T.next();!a.done;a=T.next()){var h=R(a.value,2),t=h[0];if(k===h[1]){try{for(var C=(V=void 0,B(E)),D=C.next();!D.done;D=C.next()){var e=D.value,c=N(U,e);if(null!=c){var M=Z(c.toString(),e),p=this._fieldIds[e],m=new Set(M).size;this.removeFieldLength(t,p,this._documentCount,m);try{for(var Y=(J=void 0,B(M)),G=Y.next();!G.done;G=Y.next()){var r=n(G.value,e);r&&this.removeTerm(p,t,r)}}catch(U){J={error:U}}finally{try{G&&!G.done&&(l=Y.return)&&l.call(Y)}finally{if(J)throw J.error}}}}}catch(U){V={error:U}}finally{try{D&&!D.done&&(d=C.return)&&d.call(C)}finally{if(V)throw V.error}}return this._storedFields.delete(t),this._documentIds.delete(t),this._fieldLength.delete(t),void(this._documentCount-=1)}}}catch(U){F={error:U}}finally{try{a&&!a.done&&(Q=T.return)&&Q.call(T)}finally{if(F)throw F.error}}throw new Error("MiniSearch: cannot remove document with ID ".concat(k,": it is not in the index"))},U.prototype.removeAll=function(U){var F,Q;if(U)try{for(var R=B(U),V=R.next();!V.done;V=R.next()){var d=V.value;this.remove(d)}}catch(U){F={error:U}}finally{try{V&&!V.done&&(Q=R.return)&&Q.call(R)}finally{if(F)throw F.error}}else{if(arguments.length>0)throw new Error("Expected documents to be present. Omit the argument to remove all documents.");this._index=new W,this._documentCount=0,this._documentIds=new Map,this._fieldLength=new Map,this._avgFieldLength=[],this._storedFields=new Map,this._nextId=0}},U.prototype.search=function(U,F){var Q,V;void 0===F&&(F={});var d=this.executeQuery(U,F),J=[];try{for(var l=B(d),W=l.next();!W.done;W=l.next()){var Z=R(W.value,2),n=Z[0],N=Z[1],E=N.score,S=N.terms,k=N.match,T=S.length,a={id:this._documentIds.get(n),score:E*T,terms:Object.keys(k),match:k};Object.assign(a,this._storedFields.get(n)),(null==F.filter||F.filter(a))&&J.push(a)}}catch(U){Q={error:U}}finally{try{W&&!W.done&&(V=l.return)&&V.call(l)}finally{if(Q)throw Q.error}}return J.sort(Y),J},U.prototype.autoSuggest=function(U,F){var V,d,J,l;void 0===F&&(F={}),F=Q(Q({},this._options.autoSuggestOptions),F);var W=new Map;try{for(var Z=B(this.search(U,F)),n=Z.next();!n.done;n=Z.next()){var N=n.value,E=N.score,S=(D=N.terms).join(" ");null!=(t=W.get(S))?(t.score+=E,t.count+=1):W.set(S,{score:E,terms:D,count:1})}}catch(U){V={error:U}}finally{try{n&&!n.done&&(d=Z.return)&&d.call(Z)}finally{if(V)throw V.error}}var k=[];try{for(var T=B(W),a=T.next();!a.done;a=T.next()){var h=R(a.value,2),t=h[0],C=h[1],D=(E=C.score,C.terms),e=C.count;k.push({suggestion:t,terms:D,score:E/e})}}catch(U){J={error:U}}finally{try{a&&!a.done&&(l=T.return)&&l.call(T)}finally{if(J)throw J.error}}return k.sort(Y),k},Object.defineProperty(U.prototype,"documentCount",{get:function(){return this._documentCount},enumerable:!1,configurable:!0}),U.loadJSON=function(F,Q){if(null==Q)throw new Error("MiniSearch: loadJSON should be given the same options used when serializing the index");return U.loadJS(JSON.parse(F),Q)},U.getDefault=function(U){if(e.hasOwnProperty(U))return h(e,U);throw new Error('MiniSearch: unknown option "'.concat(U,'"'))},U.loadJS=function(F,Q){var V,d,J,l,Z=F.index,n=F.documentCount,N=F.nextId,E=F.documentIds,S=F.fieldIds,k=F.fieldLength,T=F.averageFieldLength,a=F.storedFields,h=F.serializationVersion;if(1!==h&&2!==h)throw new Error("MiniSearch: cannot deserialize an index created with an incompatible version");var t=new U(Q);t._documentCount=n,t._nextId=N,t._documentIds=r(E),t._fieldIds=S,t._fieldLength=r(k),t._avgFieldLength=T,t._storedFields=r(a),t._index=new W;try{for(var C=B(Z),D=C.next();!D.done;D=C.next()){var e=R(D.value,2),c=e[0],M=e[1],p=new Map;try{for(var m=(J=void 0,B(Object.keys(M))),Y=m.next();!Y.done;Y=m.next()){var G=Y.value,v=M[G];1===h&&(v=v.ds),p.set(parseInt(G,10),r(v))}}catch(U){J={error:U}}finally{try{Y&&!Y.done&&(l=m.return)&&l.call(m)}finally{if(J)throw J.error}}t._index.set(c,p)}}catch(U){V={error:U}}finally{try{D&&!D.done&&(d=C.return)&&d.call(C)}finally{if(V)throw V.error}}return t},U.prototype.executeQuery=function(U,F){var B=this;if(void 0===F&&(F={}),"string"!=typeof U){var R=Q(Q(Q({},F),U),{queries:void 0}),V=U.queries.map((function(U){return B.executeQuery(U,R)}));return this.combineResults(V,U.combineWith)}var d=this._options,J=d.tokenize,l=d.processTerm,W=d.searchOptions,Z=Q(Q({tokenize:J,processTerm:l},W),F),n=Z.tokenize,N=Z.processTerm,E=n(U).map((function(U){return N(U)})).filter((function(U){return!!U})).map(D(Z)).map((function(U){return B.executeQuerySpec(U,Z)}));return this.combineResults(E,Z.combineWith)},U.prototype.executeQuerySpec=function(U,F){var V,d,J,l,W,Z,n=Q(Q({},this._options.searchOptions),F),N=(n.fields||this._options.fields).reduce((function(U,F){var B;return Q(Q({},U),((B={})[F]=h(U,F)||1,B))}),n.boost||{}),E=n.boostDocument,S=n.weights,k=n.maxFuzzy,T=Q(Q({},c.weights),S),a=T.fuzzy,t=T.prefix,C=this._index.get(U.term),D=this.termResults(U.term,U.term,1,C,N,E);if(U.prefix&&(W=this._index.atPrefix(U.term)),U.fuzzy){var e=!0===U.fuzzy?.2:U.fuzzy,M=e<1?Math.min(k,Math.round(U.term.length*e)):e;M&&(Z=this._index.fuzzyGet(U.term,M))}if(W)try{for(var p=B(W),m=p.next();!m.done;m=p.next()){var Y=R(m.value,2),G=Y[0],r=Y[1];if(X=G.length-U.term.length){null==Z||Z.delete(G);var v=t*G.length/(G.length+.3*X);this.termResults(U.term,G,v,r,N,E,D)}}}catch(U){V={error:U}}finally{try{m&&!m.done&&(d=p.return)&&d.call(p)}finally{if(V)throw V.error}}if(Z)try{for(var b=B(Z.keys()),y=b.next();!y.done;y=b.next()){G=y.value;var X,H=R(Z.get(G),2),z=H[0];if(X=H[1]){v=a*G.length/(G.length+X);this.termResults(U.term,G,v,z,N,E,D)}}}catch(U){J={error:U}}finally{try{y&&!y.done&&(l=b.return)&&l.call(b)}finally{if(J)throw J.error}}return D},U.prototype.combineResults=function(U,F){if(void 0===F&&(F="or"),0===U.length)return new Map;var Q=F.toLowerCase();return U.reduce(t[Q])||new Map},U.prototype.toJSON=function(){var U,F,Q,V,d=[];try{for(var J=B(this._index),l=J.next();!l.done;l=J.next()){var W=R(l.value,2),Z=W[0],n=W[1],N={};try{for(var E=(Q=void 0,B(n)),S=E.next();!S.done;S=E.next()){var k=R(S.value,2),T=k[0],a=k[1];N[T]=Object.fromEntries(a)}}catch(U){Q={error:U}}finally{try{S&&!S.done&&(V=E.return)&&V.call(E)}finally{if(Q)throw Q.error}}d.push([Z,N])}}catch(F){U={error:F}}finally{try{l&&!l.done&&(F=J.return)&&F.call(J)}finally{if(U)throw U.error}}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),index:d,serializationVersion:2}},U.prototype.termResults=function(U,F,Q,R,V,d,J){var l,W,Z,n,N;if(void 0===J&&(J=new Map),null==R)return J;try{for(var E=B(Object.keys(V)),S=E.next();!S.done;S=E.next()){var k=S.value,T=V[k],a=this._fieldIds[k],t=R.get(a);if(null!=t){var D=t.size,e=this._avgFieldLength[a];try{for(var c=(Z=void 0,B(t.keys())),M=c.next();!M.done;M=c.next()){var m=M.value,Y=d?d(this._documentIds.get(m),F):1;if(Y){var G=t.get(m),r=this._fieldLength.get(m)[a],v=Q*T*Y*C(G,D,this._documentCount,r,e),b=J.get(m);if(b){b.score+=v,p(b.terms,U);var y=h(b.match,F);y?y.push(k):b.match[F]=[k]}else J.set(m,{score:v,terms:[U],match:(N={},N[F]=[k],N)})}}}catch(U){Z={error:U}}finally{try{M&&!M.done&&(n=c.return)&&n.call(c)}finally{if(Z)throw Z.error}}}}}catch(U){l={error:U}}finally{try{S&&!S.done&&(W=E.return)&&W.call(E)}finally{if(l)throw l.error}}return J},U.prototype.addTerm=function(U,F,Q){var B=this._index.fetch(Q,G),R=B.get(U);if(null==R)(R=new Map).set(F,1),B.set(U,R);else{var V=R.get(F);R.set(F,(V||0)+1)}},U.prototype.removeTerm=function(U,F,Q){if(this._index.has(Q)){var B=this._index.fetch(Q,G),R=B.get(U);null==R||null==R.get(F)?this.warnDocumentChanged(F,U,Q):R.get(F)<=1?R.size<=1?B.delete(U):R.delete(F):R.set(F,R.get(F)-1),0===this._index.get(Q).size&&this._index.delete(Q)}else this.warnDocumentChanged(F,U,Q)},U.prototype.warnDocumentChanged=function(U,F,Q){var R,V;if(null!=console&&null!=console.warn)try{for(var d=B(Object.keys(this._fieldIds)),J=d.next();!J.done;J=d.next()){var l=J.value;if(this._fieldIds[l]===F)return void console.warn("MiniSearch: document with ID ".concat(this._documentIds.get(U),' has changed before removal: term "').concat(Q,'" was not present in field "').concat(l,'". Removing a document after it has changed can corrupt the index!'))}}catch(U){R={error:U}}finally{try{J&&!J.done&&(V=d.return)&&V.call(d)}finally{if(R)throw R.error}}},U.prototype.addDocumentId=function(U){var F=this._nextId;return this._documentIds.set(F,U),this._documentCount+=1,this._nextId+=1,F},U.prototype.addFields=function(U){for(var F=0;F<U.length;F++)this._fieldIds[U[F]]=F},U.prototype.addFieldLength=function(U,F,Q,B){var R=this._fieldLength.get(U);null==R&&this._fieldLength.set(U,R=[]),R[F]=B;var V=(this._avgFieldLength[F]||0)*Q+B;this._avgFieldLength[F]=V/(Q+1)},U.prototype.removeFieldLength=function(U,F,Q,B){var R=this._avgFieldLength[F]*Q-B;this._avgFieldLength[F]=R/(Q-1)},U.prototype.saveStoredFields=function(U,F){var Q,R,V=this._options,d=V.storeFields,J=V.extractField;if(null!=d&&0!==d.length){var l=this._storedFields.get(U);null==l&&this._storedFields.set(U,l={});try{for(var W=B(d),Z=W.next();!Z.done;Z=W.next()){var n=Z.value,N=J(F,n);void 0!==N&&(l[n]=N)}}catch(U){Q={error:U}}finally{try{Z&&!Z.done&&(R=W.return)&&R.call(W)}finally{if(Q)throw Q.error}}}},U}(),h=function(U,F){return Object.prototype.hasOwnProperty.call(U,F)?U[F]:void 0},t=((V={}).or=function(U,F){var Q,R;try{for(var V=B(F.keys()),d=V.next();!d.done;d=V.next()){var J=d.value,l=U.get(J);if(null==l)U.set(J,F.get(J));else{var W=F.get(J),Z=W.score,n=W.terms,N=W.match;l.score=l.score+Z,l.match=Object.assign(l.match,N),m(l.terms,n)}}}catch(U){Q={error:U}}finally{try{d&&!d.done&&(R=V.return)&&R.call(V)}finally{if(Q)throw Q.error}}return U},V.and=function(U,F){var Q,R,V=new Map;try{for(var d=B(F.keys()),J=d.next();!J.done;J=d.next()){var l=J.value,W=U.get(l);if(null!=W){var Z=F.get(l),n=Z.score,N=Z.terms,E=Z.match;m(W.terms,N),V.set(l,{score:W.score+n,terms:W.terms,match:Object.assign(W.match,E)})}}}catch(U){Q={error:U}}finally{try{J&&!J.done&&(R=d.return)&&R.call(d)}finally{if(Q)throw Q.error}}return V},V.and_not=function(U,F){var Q,R;try{for(var V=B(F.keys()),d=V.next();!d.done;d=V.next()){var J=d.value;U.delete(J)}}catch(U){Q={error:U}}finally{try{d&&!d.done&&(R=V.return)&&R.call(V)}finally{if(Q)throw Q.error}}return U},V),C=function(U,F,Q,B,R){return Math.log(1+(Q-F+.5)/(F+.5))*(.5+2.2*U/(U+1.2*(1-.7+.7*B/R)))},D=function(U){return function(F,Q,B){return{term:F,fuzzy:"function"==typeof U.fuzzy?U.fuzzy(F,Q,B):U.fuzzy||!1,prefix:"function"==typeof U.prefix?U.prefix(F,Q,B):!0===U.prefix}}},e={idField:"id",extractField:function(U,F){return U[F]},tokenize:function(U,F){return U.split(v)},processTerm:function(U,F){return U.toLowerCase()},fields:void 0,searchOptions:void 0,storeFields:[]},c={combineWith:"or",prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375}},M={combineWith:"and",prefix:function(U,F,Q){return F===Q.length-1}},p=function(U,F){U.includes(F)||U.push(F)},m=function(U,F){var Q,R;try{for(var V=B(F),d=V.next();!d.done;d=V.next()){var J=d.value;U.includes(J)||U.push(J)}}catch(U){Q={error:U}}finally{try{d&&!d.done&&(R=V.return)&&R.call(V)}finally{if(Q)throw Q.error}}},Y=function(U,F){var Q=U.score;return F.score-Q},G=function(){return new Map},r=function(U){var F,Q,R=new Map;try{for(var V=B(Object.keys(U)),d=V.next();!d.done;d=V.next()){var J=d.value;R.set(parseInt(J,10),U[J])}}catch(U){F={error:U}}finally{try{d&&!d.done&&(Q=V.return)&&Q.call(V)}finally{if(F)throw F.error}}return R},v=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u;const b=/^"|"$|^'|'$/g,y=/[\u4e00-\u9fa5]/,X=new class{constructor(){this.handlers=new Map,this.disabled=[]}on(U,F,Q){if(U.includes("@")||F.includes("@"))throw new Error("Invalid context/event name - Cannot contain @");this.handlers.set(`${U}@${F}`,Q)}off(U,F){if(F)this.handlers.delete(`${U}@${F}`);else for(const[F]of this.handlers.entries())F.startsWith(`${U}@`)&&this.handlers.delete(F)}disable(U){this.enable(U),this.disabled.push(U)}enable(U){this.disabled=this.disabled.filter((F=>F!==U))}emit(U,...F){const Q=[...this.handlers.entries()].filter((([U,F])=>!this.disabled.includes(U.split("@")[0])));for(const[B,R]of Q)B.endsWith(`@${U}`)&&R(...F)}},H="toggle-excerpts";let z=!1;function O(U){z=U}const o=/[|\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u;function x(){}function i(U){return U()}function w(){return Object.create(null)}function L(U){U.forEach(i)}function s(U){return"function"==typeof U}function j(U,F){return U!=U?F==F:U!==F||U&&"object"==typeof U||"function"==typeof U}function I(U,F,Q){U.$$.on_destroy.push(function(U,...F){if(null==U)return x;const Q=U.subscribe(...F);return Q.unsubscribe?()=>Q.unsubscribe():Q}(F,Q))}function u(U,F,Q,B){if(U){const R=K(U,F,Q,B);return U[0](R)}}function K(U,F,Q,B){return U[1]&&B?function(U,F){for(const Q in F)U[Q]=F[Q];return U}(Q.ctx.slice(),U[1](B(F))):Q.ctx}function g(U,F,Q,B){if(U[2]&&B){const R=U[2](B(Q));if(void 0===F.dirty)return R;if("object"==typeof R){const U=[],Q=Math.max(F.dirty.length,R.length);for(let B=0;B<Q;B+=1)U[B]=F.dirty[B]|R[B];return U}return F.dirty|R}return F.dirty}function f(U,F,Q,B,R,V){if(R){const d=K(F,Q,B,V);U.p(d,R)}}function q(U){if(U.ctx.length>32){const F=[],Q=U.ctx.length/32;for(let U=0;U<Q;U++)F[U]=-1;return F}return-1}function P(U,F){U.appendChild(F)}function A(U,F,Q){U.insertBefore(F,Q||null)}function _(U){U.parentNode.removeChild(U)}function $(U,F){for(let Q=0;Q<U.length;Q+=1)U[Q]&&U[Q].d(F)}function UU(U){return document.createElement(U)}function FU(U){return document.createTextNode(U)}function QU(){return FU(" ")}function BU(){return FU("")}function RU(U,F,Q,B){return U.addEventListener(F,Q,B),()=>U.removeEventListener(F,Q,B)}function VU(U,F,Q){null==Q?U.removeAttribute(F):U.getAttribute(F)!==Q&&U.setAttribute(F,Q)}function dU(U,F){F=""+F,U.wholeText!==F&&(U.data=F)}function JU(U,F){U.value=null==F?"":F}function lU(U,F,Q,B){null===Q?U.style.removeProperty(F):U.style.setProperty(F,Q,B?"important":"")}function WU(U,F,Q){U.classList[Q?"add":"remove"](F)}let ZU;function nU(U){ZU=U}function NU(){if(!ZU)throw new Error("Function called outside component initialization");return ZU}function EU(U){NU().$$.on_mount.push(U)}function SU(U){NU().$$.on_destroy.push(U)}function kU(){const U=NU();return(F,Q,{cancelable:B=!1}={})=>{const R=U.$$.callbacks[F];if(R){const V=function(U,F,{bubbles:Q=!1,cancelable:B=!1}={}){const R=document.createEvent("CustomEvent");return R.initCustomEvent(U,Q,B,F),R}(F,Q,{cancelable:B});return R.slice().forEach((F=>{F.call(U,V)})),!V.defaultPrevented}return!0}}function TU(U,F){const Q=U.$$.callbacks[F.type];Q&&Q.slice().forEach((U=>U.call(this,F)))}const aU=[],hU=[],tU=[],CU=[],DU=Promise.resolve();let eU=!1;function cU(){eU||(eU=!0,DU.then(GU))}function MU(){return cU(),DU}function pU(U){tU.push(U)}const mU=new Set;let YU=0;function GU(){const U=ZU;do{for(;YU<aU.length;){const U=aU[YU];YU++,nU(U),rU(U.$$)}for(nU(null),aU.length=0,YU=0;hU.length;)hU.pop()();for(let U=0;U<tU.length;U+=1){const F=tU[U];mU.has(F)||(mU.add(F),F())}tU.length=0}while(aU.length);for(;CU.length;)CU.pop()();eU=!1,mU.clear(),nU(U)}function rU(U){if(null!==U.fragment){U.update(),L(U.before_update);const F=U.dirty;U.dirty=[-1],U.fragment&&U.fragment.p(U.ctx,F),U.after_update.forEach(pU)}}const vU=new Set;let bU;function yU(){bU={r:0,c:[],p:bU}}function XU(){bU.r||L(bU.c),bU=bU.p}function HU(U,F){U&&U.i&&(vU.delete(U),U.i(F))}function zU(U,F,Q,B){if(U&&U.o){if(vU.has(U))return;vU.add(U),bU.c.push((()=>{vU.delete(U),B&&(Q&&U.d(1),B())})),U.o(F)}else B&&B()}function OU(U){U&&U.c()}function oU(U,F,Q,B){const{fragment:R,after_update:V}=U.$$;R&&R.m(F,Q),B||pU((()=>{const F=U.$$.on_mount.map(i).filter(s);U.$$.on_destroy?U.$$.on_destroy.push(...F):L(F),U.$$.on_mount=[]})),V.forEach(pU)}function xU(U,F){const Q=U.$$;null!==Q.fragment&&(L(Q.on_destroy),Q.fragment&&Q.fragment.d(F),Q.on_destroy=Q.fragment=null,Q.ctx=[])}function iU(U,F,Q,B,R,V,d,J=[-1]){const l=ZU;nU(U);const W=U.$$={fragment:null,ctx:[],props:V,update:x,not_equal:R,bound:w(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(F.context||(l?l.$$.context:[])),callbacks:w(),dirty:J,skip_bound:!1,root:F.target||l.$$.root};d&&d(W.root);let Z=!1;if(W.ctx=Q?Q(U,F.props||{},((F,Q,...B)=>{const V=B.length?B[0]:Q;return W.ctx&&R(W.ctx[F],W.ctx[F]=V)&&(!W.skip_bound&&W.bound[F]&&W.bound[F](V),Z&&function(U,F){-1===U.$$.dirty[0]&&(aU.push(U),cU(),U.$$.dirty.fill(0)),U.$$.dirty[F/31|0]|=1<<F%31}(U,F)),Q})):[],W.update(),Z=!0,L(W.before_update),W.fragment=!!B&&B(W.ctx),F.target){if(F.hydrate){const U=function(U){return Array.from(U.childNodes)}(F.target);W.fragment&&W.fragment.l(U),U.forEach(_)}else W.fragment&&W.fragment.c();F.intro&&HU(U.$$.fragment),oU(U,F.target,F.anchor,F.customElement),GU()}nU(l)}class wU{$destroy(){xU(this,1),this.$destroy=x}$on(U,F){if(!s(F))return x;const Q=this.$$.callbacks[U]||(this.$$.callbacks[U]=[]);return Q.push(F),()=>{const U=Q.indexOf(F);-1!==U&&Q.splice(U,1)}}$set(U){var F;this.$$set&&(F=U,0!==Object.keys(F).length)&&(this.$$.skip_bound=!0,this.$$set(U),this.$$.skip_bound=!1)}}const LU=[];function sU(U,F=x){let Q;const B=new Set;function R(F){if(j(U,F)&&(U=F,Q)){const F=!LU.length;for(const F of B)F[1](),LU.push(F,U);if(F){for(let U=0;U<LU.length;U+=2)LU[U][0](LU[U+1]);LU.length=0}}}return{set:R,update:function(F){R(F(U))},subscribe:function(V,d=x){const J=[V,d];return B.add(J),1===B.size&&(Q=F(R)||x),V(U),()=>{B.delete(J),0===B.size&&(Q(),Q=null)}}}}const jU=sU(!1);class IU extends U.PluginSettingTab{constructor(U){super(app,U),this.plugin=U,jU.subscribe((async U=>{fU.showExcerpt=U,await qU(this.plugin)}))}display(){const{containerEl:F}=this;F.empty(),F.createEl("h2",{text:"Omnisearch"});F.createDiv().innerHTML="\n        <iframe src=\"https://github.com/sponsors/scambier/button\" title=\"Sponsor scambier\" height=\"35\" width=\"116\" style=\"border: 0;\"></iframe>\n        <a href='https://ko-fi.com/B0B6LQ2C' target='_blank'><img height='36' style='border:0px;height:36px;' src='https://cdn.ko-fi.com/cdn/kofi2.png?v=3' border='0' alt='Buy Me a Coffee at ko-fi.com' /></a> \n    ",new U.Setting(F).setName("Behavior").setHeading(),new U.Setting(F).setName('Respect Obsidian\'s "Excluded Files"').setDesc('Files that are in Obsidian\'s "Options > Files & Links > Excluded Files" list will be downranked in results.').addToggle((U=>U.setValue(fU.respectExcluded).onChange((async U=>{fU.respectExcluded=U,await qU(this.plugin)}))));const Q=new DocumentFragment;Q.createSpan({},(U=>{U.innerHTML='Normalize diacritics in search terms. Words like "brûlée" or "žluťoučký" will be indexed as "brulee" and "zlutoucky".<br/>\n        <strong style="color: var(--text-accent)">You probably shouldn\'t disable this. Needs a restart to fully take effect.</strong>\n        '})),new U.Setting(F).setName("Ignore diacritics").setDesc(Q).addToggle((U=>U.setValue(fU.ignoreDiacritics).onChange((async U=>{fU.ignoreDiacritics=U,await qU(this.plugin)}))));const B=new DocumentFragment;if(B.createSpan({},(U=>{U.innerHTML='In addition to standard <code>md</code> files, Omnisearch can also index other plain text files.<br/>\n      Add extensions separated by a space, without the dot. Example: "<code>txt org</code>".<br />\n      <strong style="color: var(--text-accent)">Needs a restart to fully take effect.</strong>'})),new U.Setting(F).setName("Additional files to index").setDesc(B).addText((U=>{U.setValue(fU.indexedFileTypes.join(" ")).setPlaceholder("Example: txt org").onChange((async U=>{fU.indexedFileTypes=U.split(" "),await qU(this.plugin)}))})),new U.Setting(F).setName("Retry queries that return zero result").setDesc("When a query returns zero result, Omnisearch will try again (but harder). Disabling this can improve search reactivity.").addToggle((U=>U.setValue(fU.retryWhenZeroResult).onChange((async U=>{fU.retryWhenZeroResult=U,await qU(this.plugin)})))),!U.Platform.isIosApp){const Q=new DocumentFragment;Q.createSpan({},(U=>{U.innerHTML='Omnisearch will include PDFs in search results.\n        <ul>\n          <li>⚠️ Depending on their size, PDFs can take anywhere from a few seconds to 2 minutes to be processed.</li>\n          <li>⚠️ Texts extracted from PDFs may contain errors such as missing spaces, or spaces in the middle of words.</li>\n          <li>⚠️ Some PDFs can\'t be processed correctly and will return an empty text.</li>\n          <li>This feature is currently a work-in-progress, please report issues that you might experience.</li>\n        </ul>\n        <strong style="color: var(--text-accent)">Needs a restart to fully take effect.</strong>'})),new U.Setting(F).setName("BETA - PDF Indexing").setDesc(Q).addToggle((U=>U.setValue(fU.PDFIndexing).onChange((async U=>{fU.PDFIndexing=U,await qU(this.plugin)}))))}new U.Setting(F).setName("User Interface").setHeading(),new U.Setting(F).setName("Show ribbon button").setDesc("Add a button on the sidebar to open the Vault search modal.").addToggle((U=>U.setValue(fU.ribbonIcon).onChange((async U=>{fU.ribbonIcon=U,await qU(this.plugin),U?this.plugin.addRibbonButton():this.plugin.removeRibbonButton()})))),new U.Setting(F).setName("Show excerpt").setDesc("Shows the part of the note that matches the search. Disable this to only show filenames in results.").addToggle((U=>U.setValue(fU.showExcerpt).onChange((async U=>{jU.set(U)})))),new U.Setting(F).setName("Show previous query results").setDesc("Re-executes the previous query when opening Omnisearch").addToggle((U=>U.setValue(fU.showPreviousQueryResults).onChange((async U=>{fU.showPreviousQueryResults=U,await qU(this.plugin)}))));const R=new DocumentFragment;R.createSpan({},(U=>{U.innerHTML="Shows a button next to the search input, to create a note.\n        Acts the same as the <code>shift ↵</code> shortcut, can be useful for mobile device users."})),new U.Setting(F).setName('Show "Create note" button').setDesc(R).addToggle((U=>U.setValue(fU.showCreateButton).onChange((async U=>{fU.showCreateButton=U,await qU(this.plugin)})))),new U.Setting(F).setName("Show indexing notices").setDesc("Shows a notice when indexing is done, usually at startup.").addToggle((U=>U.setValue(fU.showIndexingNotices).onChange((async U=>{fU.showIndexingNotices=U,await qU(this.plugin)})))),new U.Setting(F).setName("Hide full path in results list").setDesc("In the search results, only show the note name, without the full path.").addToggle((U=>U.setValue(fU.showShortName).onChange((async U=>{fU.showShortName=U,await qU(this.plugin)})))),new U.Setting(F).setName("Results weighting").setHeading(),new U.Setting(F).setName(`File name & declared aliases (default: ${gU.weightBasename})`).addSlider((U=>this.weightSlider(U,"weightBasename"))),new U.Setting(F).setName(`Headings level 1 (default: ${gU.weightH1})`).addSlider((U=>this.weightSlider(U,"weightH1"))),new U.Setting(F).setName(`Headings level 2 (default: ${gU.weightH2})`).addSlider((U=>this.weightSlider(U,"weightH2"))),new U.Setting(F).setName(`Headings level 3 (default: ${gU.weightH3})`).addSlider((U=>this.weightSlider(U,"weightH3")))}weightSlider(U,F){U.setLimits(1,3,.1).setValue(fU[F]).setDynamicTooltip().onChange((U=>{fU[F]=U,qU(this.plugin)}))}}const uU=U.Platform.isMobileApp?1:require("os").cpus().length;let KU=Math.max(1,Math.floor(.75*uU));KU==uU&&(KU=1);const gU={respectExcluded:!0,ignoreDiacritics:!0,indexedFileTypes:[],PDFIndexing:!1,backgroundProcesses:KU,showIndexingNotices:!1,showShortName:!1,ribbonIcon:!0,showExcerpt:!0,showCreateButton:!1,showPreviousQueryResults:!0,retryWhenZeroResult:!0,weightBasename:2,weightH1:1.5,weightH2:1.3,weightH3:1.1,welcomeMessage:""};let fU=Object.assign({},gU);async function qU(U){await U.saveData(fU)}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;var PU={exports:{}};function AU(U){return`<span class="suggestion-highlight omnisearch-highlight">${U}</span>`}function _U(U){return new Promise((F=>{setTimeout(F,U)}))}function $U(U){if(!U.length)return/^$/g;const F=U.map((U=>"\\b"+U.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&"))).join("|");return new RegExp(`(${F})`,"gi")}function UF(U,F){return U.headings?.filter((U=>U.level===F)).map((U=>U.heading))??[]}function FF(U,F){return(U+F)%F}function QF(F,Q){try{const U=Q??-1;if(U>-1){const Q=Math.max(0,U-100),B=Math.min(F.length,U+180);F=(Q>0?"…":"")+F.slice(Q,B).trim()+(B<F.length-1?"…":"")}return F.replaceAll("&","&amp;").replaceAll("<","&lt;").replaceAll(">","&gt;").replaceAll('"',"&quot;").replaceAll("'","&#039;")}catch(F){return new U.Notice("Omnisearch - Error while creating excerpt, see developer console"),console.error("Omnisearch - Error while creating excerpt"),console.error(F),""}}function BF(U){return U.replace(/(\*|_)+(.+?)(\*|_)+/g,((U,F,Q)=>Q))}function RF(F){return F?.frontmatter?U.parseFrontMatterAliases(F.frontmatter)??[]:[]}function VF(F){return F?U.getAllTags(F)??[]:[]}function dF(U){return U.normalize("NFD").replace(/\p{Diacritic}/gu,"")}function JF(U){return fU.PDFIndexing&&U.endsWith(".pdf")||lF(U)}function lF(U){return[...fU.indexedFileTypes,"md"].some((F=>U.endsWith(`.${F}`)))}"undefined"!=typeof self&&self,PU.exports=function(U){var F={};function Q(B){if(F[B])return F[B].exports;var R=F[B]={i:B,l:!1,exports:{}};return U[B].call(R.exports,R,R.exports,Q),R.l=!0,R.exports}return Q.m=U,Q.c=F,Q.d=function(U,F,B){Q.o(U,F)||Object.defineProperty(U,F,{enumerable:!0,get:B})},Q.r=function(U){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(U,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(U,"__esModule",{value:!0})},Q.t=function(U,F){if(1&F&&(U=Q(U)),8&F)return U;if(4&F&&"object"==typeof U&&U&&U.__esModule)return U;var B=Object.create(null);if(Q.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:U}),2&F&&"string"!=typeof U)for(var R in U)Q.d(B,R,function(F){return U[F]}.bind(null,R));return B},Q.n=function(U){var F=U&&U.__esModule?function(){return U.default}:function(){return U};return Q.d(F,"a",F),F},Q.o=function(U,F){return Object.prototype.hasOwnProperty.call(U,F)},Q.p="",Q(Q.s=0)}([function(U,F,Q){Q.r(F),Q.d(F,"md5",(function(){return k}));var B="0123456789abcdef".split(""),R=function(U){for(var F="",Q=0;Q<4;Q++)F+=B[U>>8*Q+4&15]+B[U>>8*Q&15];return F},V=function(U){for(var F=U.length,Q=0;Q<F;Q++)U[Q]=R(U[Q]);return U.join("")},d=function(U,F){return U+F&4294967295},J=function(U,F,Q,B,R,V,J){return function(U,F,Q){return d(U<<F|U>>>32-F,Q)}(F=function(U,F,Q,B){return d(d(F,U),d(Q,B))}(U,F,B,V),R,Q)},l=function(U,F,Q,B,R,V,d,l){return J(Q&B|~Q&R,F,Q,V,d,l)},W=function(U,F,Q,B,R,V,d,l){return J(Q&R|B&~R,F,Q,V,d,l)},Z=function(U,F,Q,B,R,V,d,l){return J(Q^B^R,F,Q,V,d,l)},n=function(U,F,Q,B,R,V,d,l){return J(B^(Q|~R),F,Q,V,d,l)},N=function(U,F,Q){void 0===Q&&(Q=d);var B=U[0],R=U[1],V=U[2],J=U[3],N=l.bind(null,Q);B=N(B,R,V,J,F[0],7,-680876936),J=N(J,B,R,V,F[1],12,-389564586),V=N(V,J,B,R,F[2],17,606105819),R=N(R,V,J,B,F[3],22,-1044525330),B=N(B,R,V,J,F[4],7,-176418897),J=N(J,B,R,V,F[5],12,1200080426),V=N(V,J,B,R,F[6],17,-1473231341),R=N(R,V,J,B,F[7],22,-45705983),B=N(B,R,V,J,F[8],7,1770035416),J=N(J,B,R,V,F[9],12,-1958414417),V=N(V,J,B,R,F[10],17,-42063),R=N(R,V,J,B,F[11],22,-1990404162),B=N(B,R,V,J,F[12],7,1804603682),J=N(J,B,R,V,F[13],12,-40341101),V=N(V,J,B,R,F[14],17,-1502002290),R=N(R,V,J,B,F[15],22,1236535329);var E=W.bind(null,Q);B=E(B,R,V,J,F[1],5,-165796510),J=E(J,B,R,V,F[6],9,-1069501632),V=E(V,J,B,R,F[11],14,643717713),R=E(R,V,J,B,F[0],20,-373897302),B=E(B,R,V,J,F[5],5,-701558691),J=E(J,B,R,V,F[10],9,38016083),V=E(V,J,B,R,F[15],14,-660478335),R=E(R,V,J,B,F[4],20,-405537848),B=E(B,R,V,J,F[9],5,568446438),J=E(J,B,R,V,F[14],9,-1019803690),V=E(V,J,B,R,F[3],14,-187363961),R=E(R,V,J,B,F[8],20,1163531501),B=E(B,R,V,J,F[13],5,-1444681467),J=E(J,B,R,V,F[2],9,-51403784),V=E(V,J,B,R,F[7],14,1735328473),R=E(R,V,J,B,F[12],20,-1926607734);var S=Z.bind(null,Q);B=S(B,R,V,J,F[5],4,-378558),J=S(J,B,R,V,F[8],11,-2022574463),V=S(V,J,B,R,F[11],16,1839030562),R=S(R,V,J,B,F[14],23,-35309556),B=S(B,R,V,J,F[1],4,-1530992060),J=S(J,B,R,V,F[4],11,1272893353),V=S(V,J,B,R,F[7],16,-155497632),R=S(R,V,J,B,F[10],23,-1094730640),B=S(B,R,V,J,F[13],4,681279174),J=S(J,B,R,V,F[0],11,-358537222),V=S(V,J,B,R,F[3],16,-722521979),R=S(R,V,J,B,F[6],23,76029189),B=S(B,R,V,J,F[9],4,-640364487),J=S(J,B,R,V,F[12],11,-421815835),V=S(V,J,B,R,F[15],16,530742520),R=S(R,V,J,B,F[2],23,-995338651);var k=n.bind(null,Q);B=k(B,R,V,J,F[0],6,-198630844),J=k(J,B,R,V,F[7],10,1126891415),V=k(V,J,B,R,F[14],15,-1416354905),R=k(R,V,J,B,F[5],21,-57434055),B=k(B,R,V,J,F[12],6,1700485571),J=k(J,B,R,V,F[3],10,-1894986606),V=k(V,J,B,R,F[10],15,-1051523),R=k(R,V,J,B,F[1],21,-2054922799),B=k(B,R,V,J,F[8],6,1873313359),J=k(J,B,R,V,F[15],10,-30611744),V=k(V,J,B,R,F[6],15,-1560198380),R=k(R,V,J,B,F[13],21,1309151649),B=k(B,R,V,J,F[4],6,-145523070),J=k(J,B,R,V,F[11],10,-1120210379),V=k(V,J,B,R,F[2],15,718787259),R=k(R,V,J,B,F[9],21,-343485551),U[0]=Q(B,U[0]),U[1]=Q(R,U[1]),U[2]=Q(V,U[2]),U[3]=Q(J,U[3])},E=function(U){for(var F=[],Q=0;Q<64;Q+=4)F[Q>>2]=U.charCodeAt(Q)+(U.charCodeAt(Q+1)<<8)+(U.charCodeAt(Q+2)<<16)+(U.charCodeAt(Q+3)<<24);return F},S=function(U,F){var Q,B=U.length,R=[1732584193,-271733879,-1732584194,271733878];for(Q=64;Q<=B;Q+=64)N(R,E(U.substring(Q-64,Q)),F);var V=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],d=(U=U.substring(Q-64)).length;for(Q=0;Q<d;Q++)V[Q>>2]|=U.charCodeAt(Q)<<(Q%4<<3);if(V[Q>>2]|=128<<(Q%4<<3),Q>55)for(N(R,V,F),Q=16;Q--;)V[Q]=0;return V[14]=8*B,N(R,V,F),R};function k(U){var F;return"5d41402abc4b2a76b9719d911017c592"!==V(S("hello"))&&(F=function(U,F){var Q=(65535&U)+(65535&F);return(U>>16)+(F>>16)+(Q>>16)<<16|65535&Q}),V(S(U,F))}}]);const WF="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,ZF=Object.keys,nF=Array.isArray;function NF(U,F){return"object"!=typeof F||ZF(F).forEach((function(Q){U[Q]=F[Q]})),U}"undefined"==typeof Promise||WF.Promise||(WF.Promise=Promise);const EF=Object.getPrototypeOf,SF={}.hasOwnProperty;function kF(U,F){return SF.call(U,F)}function TF(U,F){"function"==typeof F&&(F=F(EF(U))),("undefined"==typeof Reflect?ZF:Reflect.ownKeys)(F).forEach((Q=>{hF(U,Q,F[Q])}))}const aF=Object.defineProperty;function hF(U,F,Q,B){aF(U,F,NF(Q&&kF(Q,"get")&&"function"==typeof Q.get?{get:Q.get,set:Q.set,configurable:!0}:{value:Q,configurable:!0,writable:!0},B))}function tF(U){return{from:function(F){return U.prototype=Object.create(F.prototype),hF(U.prototype,"constructor",U),{extend:TF.bind(null,U.prototype)}}}}const CF=Object.getOwnPropertyDescriptor;function DF(U,F){let Q;return CF(U,F)||(Q=EF(U))&&DF(Q,F)}const eF=[].slice;function cF(U,F,Q){return eF.call(U,F,Q)}function MF(U,F){return F(U)}function pF(U){if(!U)throw new Error("Assertion Failed")}function mF(U){WF.setImmediate?setImmediate(U):setTimeout(U,0)}function YF(U,F){return U.reduce(((U,Q,B)=>{var R=F(Q,B);return R&&(U[R[0]]=R[1]),U}),{})}function GF(U,F){if(kF(U,F))return U[F];if(!F)return U;if("string"!=typeof F){for(var Q=[],B=0,R=F.length;B<R;++B){var V=GF(U,F[B]);Q.push(V)}return Q}var d=F.indexOf(".");if(-1!==d){var J=U[F.substr(0,d)];return void 0===J?void 0:GF(J,F.substr(d+1))}}function rF(U,F,Q){if(U&&void 0!==F&&(!("isFrozen"in Object)||!Object.isFrozen(U)))if("string"!=typeof F&&"length"in F){pF("string"!=typeof Q&&"length"in Q);for(var B=0,R=F.length;B<R;++B)rF(U,F[B],Q[B])}else{var V=F.indexOf(".");if(-1!==V){var d=F.substr(0,V),J=F.substr(V+1);if(""===J)void 0===Q?nF(U)&&!isNaN(parseInt(d))?U.splice(d,1):delete U[d]:U[d]=Q;else{var l=U[d];l&&kF(U,d)||(l=U[d]={}),rF(l,J,Q)}}else void 0===Q?nF(U)&&!isNaN(parseInt(F))?U.splice(F,1):delete U[F]:U[F]=Q}}function vF(U){var F={};for(var Q in U)kF(U,Q)&&(F[Q]=U[Q]);return F}const bF=[].concat;function yF(U){return bF.apply([],U)}const XF="Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey".split(",").concat(yF([8,16,32,64].map((U=>["Int","Uint","Float"].map((F=>F+U+"Array")))))).filter((U=>WF[U])),HF=XF.map((U=>WF[U]));YF(XF,(U=>[U,!0]));let zF=null;function OF(U){zF="undefined"!=typeof WeakMap&&new WeakMap;const F=oF(U);return zF=null,F}function oF(U){if(!U||"object"!=typeof U)return U;let F=zF&&zF.get(U);if(F)return F;if(nF(U)){F=[],zF&&zF.set(U,F);for(var Q=0,B=U.length;Q<B;++Q)F.push(oF(U[Q]))}else if(HF.indexOf(U.constructor)>=0)F=U;else{const Q=EF(U);for(var R in F=Q===Object.prototype?{}:Object.create(Q),zF&&zF.set(U,F),U)kF(U,R)&&(F[R]=oF(U[R]))}return F}const{toString:xF}={};function iF(U){return xF.call(U).slice(8,-1)}const wF="undefined"!=typeof Symbol?Symbol.iterator:"@@iterator",LF="symbol"==typeof wF?function(U){var F;return null!=U&&(F=U[wF])&&F.apply(U)}:function(){return null},sF={};function jF(U){var F,Q,B,R;if(1===arguments.length){if(nF(U))return U.slice();if(this===sF&&"string"==typeof U)return[U];if(R=LF(U)){for(Q=[];!(B=R.next()).done;)Q.push(B.value);return Q}if(null==U)return[U];if("number"==typeof(F=U.length)){for(Q=new Array(F);F--;)Q[F]=U[F];return Q}return[U]}for(F=arguments.length,Q=new Array(F);F--;)Q[F]=arguments[F];return Q}const IF="undefined"!=typeof Symbol?U=>"AsyncFunction"===U[Symbol.toStringTag]:()=>!1;var uF="undefined"!=typeof location&&/^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);function KF(U,F){uF=U,gF=F}var gF=()=>!0;const fF=!new Error("").stack;function qF(){if(fF)try{throw qF.arguments,new Error}catch(U){return U}return new Error}function PF(U,F){var Q=U.stack;return Q?(F=F||0,0===Q.indexOf(U.name)&&(F+=(U.name+U.message).split("\n").length),Q.split("\n").slice(F).filter(gF).map((U=>"\n"+U)).join("")):""}var AF=["Unknown","Constraint","Data","TransactionInactive","ReadOnly","Version","NotFound","InvalidState","InvalidAccess","Abort","Timeout","QuotaExceeded","Syntax","DataClone"],_F=["Modify","Bulk","OpenFailed","VersionChange","Schema","Upgrade","InvalidTable","MissingAPI","NoSuchDatabase","InvalidArgument","SubTransaction","Unsupported","Internal","DatabaseClosed","PrematureCommit","ForeignAwait"].concat(AF),$F={VersionChanged:"Database version changed by other database connection",DatabaseClosed:"Database has been closed",Abort:"Transaction aborted",TransactionInactive:"Transaction has already completed or failed",MissingAPI:"IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb"};function UQ(U,F){this._e=qF(),this.name=U,this.message=F}function FQ(U,F){return U+". Errors: "+Object.keys(F).map((U=>F[U].toString())).filter(((U,F,Q)=>Q.indexOf(U)===F)).join("\n")}function QQ(U,F,Q,B){this._e=qF(),this.failures=F,this.failedKeys=B,this.successCount=Q,this.message=FQ(U,F)}function BQ(U,F){this._e=qF(),this.name="BulkError",this.failures=Object.keys(F).map((U=>F[U])),this.failuresByPos=F,this.message=FQ(U,F)}tF(UQ).from(Error).extend({stack:{get:function(){return this._stack||(this._stack=this.name+": "+this.message+PF(this._e,2))}},toString:function(){return this.name+": "+this.message}}),tF(QQ).from(UQ),tF(BQ).from(UQ);var RQ=_F.reduce(((U,F)=>(U[F]=F+"Error",U)),{});const VQ=UQ;var dQ=_F.reduce(((U,F)=>{var Q=F+"Error";function B(U,B){this._e=qF(),this.name=Q,U?"string"==typeof U?(this.message=`${U}${B?"\n "+B:""}`,this.inner=B||null):"object"==typeof U&&(this.message=`${U.name} ${U.message}`,this.inner=U):(this.message=$F[F]||Q,this.inner=null)}return tF(B).from(VQ),U[F]=B,U}),{});dQ.Syntax=SyntaxError,dQ.Type=TypeError,dQ.Range=RangeError;var JQ=AF.reduce(((U,F)=>(U[F+"Error"]=dQ[F],U)),{});var lQ=_F.reduce(((U,F)=>(-1===["Syntax","Type","Range"].indexOf(F)&&(U[F+"Error"]=dQ[F]),U)),{});function WQ(){}function ZQ(U){return U}function nQ(U,F){return null==U||U===ZQ?F:function(Q){return F(U(Q))}}function NQ(U,F){return function(){U.apply(this,arguments),F.apply(this,arguments)}}function EQ(U,F){return U===WQ?F:function(){var Q=U.apply(this,arguments);void 0!==Q&&(arguments[0]=Q);var B=this.onsuccess,R=this.onerror;this.onsuccess=null,this.onerror=null;var V=F.apply(this,arguments);return B&&(this.onsuccess=this.onsuccess?NQ(B,this.onsuccess):B),R&&(this.onerror=this.onerror?NQ(R,this.onerror):R),void 0!==V?V:Q}}function SQ(U,F){return U===WQ?F:function(){U.apply(this,arguments);var Q=this.onsuccess,B=this.onerror;this.onsuccess=this.onerror=null,F.apply(this,arguments),Q&&(this.onsuccess=this.onsuccess?NQ(Q,this.onsuccess):Q),B&&(this.onerror=this.onerror?NQ(B,this.onerror):B)}}function kQ(U,F){return U===WQ?F:function(Q){var B=U.apply(this,arguments);NF(Q,B);var R=this.onsuccess,V=this.onerror;this.onsuccess=null,this.onerror=null;var d=F.apply(this,arguments);return R&&(this.onsuccess=this.onsuccess?NQ(R,this.onsuccess):R),V&&(this.onerror=this.onerror?NQ(V,this.onerror):V),void 0===B?void 0===d?void 0:d:NF(B,d)}}function TQ(U,F){return U===WQ?F:function(){return!1!==F.apply(this,arguments)&&U.apply(this,arguments)}}function aQ(U,F){return U===WQ?F:function(){var Q=U.apply(this,arguments);if(Q&&"function"==typeof Q.then){for(var B=this,R=arguments.length,V=new Array(R);R--;)V[R]=arguments[R];return Q.then((function(){return F.apply(B,V)}))}return F.apply(this,arguments)}}lQ.ModifyError=QQ,lQ.DexieError=UQ,lQ.BulkError=BQ;var hQ={};const[tQ,CQ,DQ]="undefined"==typeof Promise?[]:(()=>{let U=Promise.resolve();if("undefined"==typeof crypto||!crypto.subtle)return[U,EF(U),U];const F=crypto.subtle.digest("SHA-512",new Uint8Array([0]));return[F,EF(F),U]})(),eQ=CQ&&CQ.then,cQ=tQ&&tQ.constructor,MQ=!!DQ;var pQ=!1,mQ=DQ?()=>{DQ.then(qQ)}:WF.setImmediate?setImmediate.bind(null,qQ):WF.MutationObserver?()=>{var U=document.createElement("div");new MutationObserver((()=>{qQ(),U=null})).observe(U,{attributes:!0}),U.setAttribute("i","1")}:()=>{setTimeout(qQ,0)},YQ=function(U,F){OQ.push([U,F]),rQ&&(mQ(),rQ=!1)},GQ=!0,rQ=!0,vQ=[],bQ=[],yQ=null,XQ=ZQ,HQ={id:"global",global:!0,ref:0,unhandleds:[],onunhandled:tB,pgp:!1,env:{},finalize:function(){this.unhandleds.forEach((U=>{try{tB(U[0],U[1])}catch(U){}}))}},zQ=HQ,OQ=[],oQ=0,xQ=[];function iQ(U){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");this._listeners=[],this.onuncatched=WQ,this._lib=!1;var F=this._PSD=zQ;if(uF&&(this._stackHolder=qF(),this._prev=null,this._numPrev=0),"function"!=typeof U){if(U!==hQ)throw new TypeError("Not a function");return this._state=arguments[1],this._value=arguments[2],void(!1===this._state&&jQ(this,this._value))}this._state=null,this._value=null,++F.ref,sQ(this,U)}const wQ={get:function(){var U=zQ,F=VB;function Q(Q,B){var R=!U.global&&(U!==zQ||F!==VB);const V=R&&!WB();var d=new iQ(((F,d)=>{uQ(this,new LQ(aB(Q,U,R,V),aB(B,U,R,V),F,d,U))}));return uF&&fQ(d,this),d}return Q.prototype=hQ,Q},set:function(U){hF(this,"then",U&&U.prototype===hQ?wQ:{get:function(){return U},set:wQ.set})}};function LQ(U,F,Q,B,R){this.onFulfilled="function"==typeof U?U:null,this.onRejected="function"==typeof F?F:null,this.resolve=Q,this.reject=B,this.psd=R}function sQ(U,F){try{F((F=>{if(null===U._state){if(F===U)throw new TypeError("A promise cannot be resolved with itself.");var Q=U._lib&&PQ();F&&"function"==typeof F.then?sQ(U,((U,Q)=>{F instanceof iQ?F._then(U,Q):F.then(U,Q)})):(U._state=!0,U._value=F,IQ(U)),Q&&AQ()}}),jQ.bind(null,U))}catch(F){jQ(U,F)}}function jQ(U,F){if(bQ.push(F),null===U._state){var Q=U._lib&&PQ();F=XQ(F),U._state=!1,U._value=F,uF&&null!==F&&"object"==typeof F&&!F._promise&&function(U,F,Q){try{U.apply(null,Q)}catch(U){F&&F(U)}}((()=>{var Q=DF(F,"stack");F._promise=U,hF(F,"stack",{get:()=>pQ?Q&&(Q.get?Q.get.apply(F):Q.value):U.stack})})),function(U){vQ.some((F=>F._value===U._value))||vQ.push(U)}(U),IQ(U),Q&&AQ()}}function IQ(U){var F=U._listeners;U._listeners=[];for(var Q=0,B=F.length;Q<B;++Q)uQ(U,F[Q]);var R=U._PSD;--R.ref||R.finalize(),0===oQ&&(++oQ,YQ((()=>{0==--oQ&&_Q()}),[]))}function uQ(U,F){if(null!==U._state){var Q=U._state?F.onFulfilled:F.onRejected;if(null===Q)return(U._state?F.resolve:F.reject)(U._value);++F.psd.ref,++oQ,YQ(KQ,[Q,U,F])}else U._listeners.push(F)}function KQ(U,F,Q){try{yQ=F;var B,R=F._value;F._state?B=U(R):(bQ.length&&(bQ=[]),B=U(R),-1===bQ.indexOf(R)&&function(U){var F=vQ.length;for(;F;)if(vQ[--F]._value===U._value)return void vQ.splice(F,1)}(F)),Q.resolve(B)}catch(U){Q.reject(U)}finally{yQ=null,0==--oQ&&_Q(),--Q.psd.ref||Q.psd.finalize()}}function gQ(U,F,Q){if(F.length===Q)return F;var B="";if(!1===U._state){var R,V,d=U._value;null!=d?(R=d.name||"Error",V=d.message||d,B=PF(d,0)):(R=d,V=""),F.push(R+(V?": "+V:"")+B)}return uF&&((B=PF(U._stackHolder,2))&&-1===F.indexOf(B)&&F.push(B),U._prev&&gQ(U._prev,F,Q)),F}function fQ(U,F){var Q=F?F._numPrev+1:0;Q<100&&(U._prev=F,U._numPrev=Q)}function qQ(){PQ()&&AQ()}function PQ(){var U=GQ;return GQ=!1,rQ=!1,U}function AQ(){var U,F,Q;do{for(;OQ.length>0;)for(U=OQ,OQ=[],Q=U.length,F=0;F<Q;++F){var B=U[F];B[0].apply(null,B[1])}}while(OQ.length>0);GQ=!0,rQ=!0}function _Q(){var U=vQ;vQ=[],U.forEach((U=>{U._PSD.onunhandled.call(null,U._value,U)}));for(var F=xQ.slice(0),Q=F.length;Q;)F[--Q]()}function $Q(U){return new iQ(hQ,!1,U)}function UB(U,F){var Q=zQ;return function(){var B=PQ(),R=zQ;try{return EB(Q,!0),U.apply(this,arguments)}catch(U){F&&F(U)}finally{EB(R,!1),B&&AQ()}}}TF(iQ.prototype,{then:wQ,_then:function(U,F){uQ(this,new LQ(null,null,U,F,zQ))},catch:function(U){if(1===arguments.length)return this.then(null,U);var F=arguments[0],Q=arguments[1];return"function"==typeof F?this.then(null,(U=>U instanceof F?Q(U):$Q(U))):this.then(null,(U=>U&&U.name===F?Q(U):$Q(U)))},finally:function(U){return this.then((F=>(U(),F)),(F=>(U(),$Q(F))))},stack:{get:function(){if(this._stack)return this._stack;try{pQ=!0;var U=gQ(this,[],20).join("\nFrom previous: ");return null!==this._state&&(this._stack=U),U}finally{pQ=!1}}},timeout:function(U,F){return U<1/0?new iQ(((Q,B)=>{var R=setTimeout((()=>B(new dQ.Timeout(F))),U);this.then(Q,B).finally(clearTimeout.bind(null,R))})):this}}),"undefined"!=typeof Symbol&&Symbol.toStringTag&&hF(iQ.prototype,Symbol.toStringTag,"Dexie.Promise"),HQ.env=SB(),TF(iQ,{all:function(){var U=jF.apply(null,arguments).map(ZB);return new iQ((function(F,Q){0===U.length&&F([]);var B=U.length;U.forEach(((R,V)=>iQ.resolve(R).then((Q=>{U[V]=Q,--B||F(U)}),Q)))}))},resolve:U=>{if(U instanceof iQ)return U;if(U&&"function"==typeof U.then)return new iQ(((F,Q)=>{U.then(F,Q)}));var F=new iQ(hQ,!0,U);return fQ(F,yQ),F},reject:$Q,race:function(){var U=jF.apply(null,arguments).map(ZB);return new iQ(((F,Q)=>{U.map((U=>iQ.resolve(U).then(F,Q)))}))},PSD:{get:()=>zQ,set:U=>zQ=U},totalEchoes:{get:()=>VB},newPSD:JB,usePSD:kB,scheduler:{get:()=>YQ,set:U=>{YQ=U}},rejectionMapper:{get:()=>XQ,set:U=>{XQ=U}},follow:(U,F)=>new iQ(((Q,B)=>JB(((F,Q)=>{var B=zQ;B.unhandleds=[],B.onunhandled=Q,B.finalize=NQ((function(){!function(U){function F(){U(),xQ.splice(xQ.indexOf(F),1)}xQ.push(F),++oQ,YQ((()=>{0==--oQ&&_Q()}),[])}((()=>{0===this.unhandleds.length?F():Q(this.unhandleds[0])}))}),B.finalize),U()}),F,Q,B)))}),cQ&&(cQ.allSettled&&hF(iQ,"allSettled",(function(){const U=jF.apply(null,arguments).map(ZB);return new iQ((F=>{0===U.length&&F([]);let Q=U.length;const B=new Array(Q);U.forEach(((U,R)=>iQ.resolve(U).then((U=>B[R]={status:"fulfilled",value:U}),(U=>B[R]={status:"rejected",reason:U})).then((()=>--Q||F(B)))))}))})),cQ.any&&"undefined"!=typeof AggregateError&&hF(iQ,"any",(function(){const U=jF.apply(null,arguments).map(ZB);return new iQ(((F,Q)=>{0===U.length&&Q(new AggregateError([]));let B=U.length;const R=new Array(B);U.forEach(((U,V)=>iQ.resolve(U).then((U=>F(U)),(U=>{R[V]=U,--B||Q(new AggregateError(R))}))))}))})));const FB={awaits:0,echoes:0,id:0};var QB=0,BB=[],RB=0,VB=0,dB=0;function JB(U,F,Q,B){var R=zQ,V=Object.create(R);V.parent=R,V.ref=0,V.global=!1,V.id=++dB;var d=HQ.env;V.env=MQ?{Promise:iQ,PromiseProp:{value:iQ,configurable:!0,writable:!0},all:iQ.all,race:iQ.race,allSettled:iQ.allSettled,any:iQ.any,resolve:iQ.resolve,reject:iQ.reject,nthen:hB(d.nthen,V),gthen:hB(d.gthen,V)}:{},F&&NF(V,F),++R.ref,V.finalize=function(){--this.parent.ref||this.parent.finalize()};var J=kB(V,U,Q,B);return 0===V.ref&&V.finalize(),J}function lB(){return FB.id||(FB.id=++QB),++FB.awaits,FB.echoes+=100,FB.id}function WB(){return!!FB.awaits&&(0==--FB.awaits&&(FB.id=0),FB.echoes=100*FB.awaits,!0)}function ZB(U){return FB.echoes&&U&&U.constructor===cQ?(lB(),U.then((U=>(WB(),U)),(U=>(WB(),CB(U))))):U}function nB(U){++VB,FB.echoes&&0!=--FB.echoes||(FB.echoes=FB.id=0),BB.push(zQ),EB(U,!0)}function NB(){var U=BB[BB.length-1];BB.pop(),EB(U,!1)}function EB(U,F){var Q=zQ;if((F?!FB.echoes||RB++&&U===zQ:!RB||--RB&&U===zQ)||TB(F?nB.bind(null,U):NB),U!==zQ&&(zQ=U,Q===HQ&&(HQ.env=SB()),MQ)){var B=HQ.env.Promise,R=U.env;CQ.then=R.nthen,B.prototype.then=R.gthen,(Q.global||U.global)&&(Object.defineProperty(WF,"Promise",R.PromiseProp),B.all=R.all,B.race=R.race,B.resolve=R.resolve,B.reject=R.reject,R.allSettled&&(B.allSettled=R.allSettled),R.any&&(B.any=R.any))}}function SB(){var U=WF.Promise;return MQ?{Promise:U,PromiseProp:Object.getOwnPropertyDescriptor(WF,"Promise"),all:U.all,race:U.race,allSettled:U.allSettled,any:U.any,resolve:U.resolve,reject:U.reject,nthen:CQ.then,gthen:U.prototype.then}:{}}function kB(U,F,Q,B,R){var V=zQ;try{return EB(U,!0),F(Q,B,R)}finally{EB(V,!1)}}function TB(U){eQ.call(tQ,U)}function aB(U,F,Q,B){return"function"!=typeof U?U:function(){var R=zQ;Q&&lB(),EB(F,!0);try{return U.apply(this,arguments)}finally{EB(R,!1),B&&TB(WB)}}}function hB(U,F){return function(Q,B){return U.call(this,aB(Q,F),aB(B,F))}}-1===(""+eQ).indexOf("[native code]")&&(lB=WB=WQ);function tB(U,F){var Q;try{Q=F.onuncatched(U)}catch(U){}if(!1!==Q)try{var B,R={promise:F,reason:U};if(WF.document&&document.createEvent?((B=document.createEvent("Event")).initEvent("unhandledrejection",!0,!0),NF(B,R)):WF.CustomEvent&&NF(B=new CustomEvent("unhandledrejection",{detail:R}),R),B&&WF.dispatchEvent&&(dispatchEvent(B),!WF.PromiseRejectionEvent&&WF.onunhandledrejection))try{WF.onunhandledrejection(B)}catch(U){}uF&&B&&!B.defaultPrevented&&console.warn(`Unhandled rejection: ${U.stack||U}`)}catch(U){}}var CB=iQ.reject;function DB(U,F,Q,B){if(U.idbdb&&(U._state.openComplete||zQ.letThrough||U._vip)){var R=U._createTransaction(F,Q,U._dbSchema);try{R.create(),U._state.PR1398_maxLoop=3}catch(R){return R.name===RQ.InvalidState&&U.isOpen()&&--U._state.PR1398_maxLoop>0?(console.warn("Dexie: Need to reopen db"),U._close(),U.open().then((()=>DB(U,F,Q,B)))):CB(R)}return R._promise(F,((U,F)=>JB((()=>(zQ.trans=R,B(U,F,R)))))).then((U=>R._completion.then((()=>U))))}if(U._state.openComplete)return CB(new dQ.DatabaseClosed(U._state.dbOpenError));if(!U._state.isBeingOpened){if(!U._options.autoOpen)return CB(new dQ.DatabaseClosed);U.open().catch(WQ)}return U._state.dbReadyPromise.then((()=>DB(U,F,Q,B)))}const eB=String.fromCharCode(65535),cB="Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.",MB=[],pB="undefined"!=typeof navigator&&/(MSIE|Trident|Edge)/.test(navigator.userAgent),mB=pB,YB=pB,GB=U=>!/(dexie\.js|dexie\.min\.js)/.test(U);function rB(U,F){return U?F?function(){return U.apply(this,arguments)&&F.apply(this,arguments)}:U:F}const vB={type:3,lower:-1/0,lowerOpen:!1,upper:[[]],upperOpen:!1};function bB(U){return"string"!=typeof U||/\./.test(U)?U=>U:F=>(void 0===F[U]&&U in F&&delete(F=OF(F))[U],F)}class yB{_trans(U,F,Q){const B=this._tx||zQ.trans,R=this.name;function V(U,Q,B){if(!B.schema[R])throw new dQ.NotFound("Table "+R+" not part of transaction");return F(B.idbtrans,B)}const d=PQ();try{return B&&B.db===this.db?B===zQ.trans?B._promise(U,V,Q):JB((()=>B._promise(U,V,Q)),{trans:B,transless:zQ.transless||zQ}):DB(this.db,U,[this.name],V)}finally{d&&AQ()}}get(U,F){return U&&U.constructor===Object?this.where(U).first(F):this._trans("readonly",(F=>this.core.get({trans:F,key:U}).then((U=>this.hook.reading.fire(U))))).then(F)}where(U){if("string"==typeof U)return new this.db.WhereClause(this,U);if(nF(U))return new this.db.WhereClause(this,`[${U.join("+")}]`);const F=ZF(U);if(1===F.length)return this.where(F[0]).equals(U[F[0]]);const Q=this.schema.indexes.concat(this.schema.primKey).filter((U=>U.compound&&F.every((F=>U.keyPath.indexOf(F)>=0))&&U.keyPath.every((U=>F.indexOf(U)>=0))))[0];if(Q&&this.db._maxKey!==eB)return this.where(Q.name).equals(Q.keyPath.map((F=>U[F])));!Q&&uF&&console.warn(`The query ${JSON.stringify(U)} on ${this.name} would benefit of a compound index [${F.join("+")}]`);const{idxByName:B}=this.schema,R=this.db._deps.indexedDB;function V(U,F){try{return 0===R.cmp(U,F)}catch(U){return!1}}const[d,J]=F.reduce((([F,Q],R)=>{const d=B[R],J=U[R];return[F||d,F||!d?rB(Q,d&&d.multi?U=>{const F=GF(U,R);return nF(F)&&F.some((U=>V(J,U)))}:U=>V(J,GF(U,R))):Q]}),[null,null]);return d?this.where(d.name).equals(U[d.keyPath]).filter(J):Q?this.filter(J):this.where(F).equals("")}filter(U){return this.toCollection().and(U)}count(U){return this.toCollection().count(U)}offset(U){return this.toCollection().offset(U)}limit(U){return this.toCollection().limit(U)}each(U){return this.toCollection().each(U)}toArray(U){return this.toCollection().toArray(U)}toCollection(){return new this.db.Collection(new this.db.WhereClause(this))}orderBy(U){return new this.db.Collection(new this.db.WhereClause(this,nF(U)?`[${U.join("+")}]`:U))}reverse(){return this.toCollection().reverse()}mapToClass(U){this.schema.mappedClass=U;const F=F=>{if(!F)return F;const Q=Object.create(U.prototype);for(var B in F)if(kF(F,B))try{Q[B]=F[B]}catch(U){}return Q};return this.schema.readHook&&this.hook.reading.unsubscribe(this.schema.readHook),this.schema.readHook=F,this.hook("reading",F),U}defineClass(){return this.mapToClass((function(U){NF(this,U)}))}add(U,F){const{auto:Q,keyPath:B}=this.schema.primKey;let R=U;return B&&Q&&(R=bB(B)(U)),this._trans("readwrite",(U=>this.core.mutate({trans:U,type:"add",keys:null!=F?[F]:null,values:[R]}))).then((U=>U.numFailures?iQ.reject(U.failures[0]):U.lastResult)).then((F=>{if(B)try{rF(U,B,F)}catch(U){}return F}))}update(U,F){if("object"!=typeof U||nF(U))return this.where(":id").equals(U).modify(F);{const Q=GF(U,this.schema.primKey.keyPath);if(void 0===Q)return CB(new dQ.InvalidArgument("Given object does not contain its primary key"));try{"function"!=typeof F?ZF(F).forEach((Q=>{rF(U,Q,F[Q])})):F(U,{value:U,primKey:Q})}catch(U){}return this.where(":id").equals(Q).modify(F)}}put(U,F){const{auto:Q,keyPath:B}=this.schema.primKey;let R=U;return B&&Q&&(R=bB(B)(U)),this._trans("readwrite",(U=>this.core.mutate({trans:U,type:"put",values:[R],keys:null!=F?[F]:null}))).then((U=>U.numFailures?iQ.reject(U.failures[0]):U.lastResult)).then((F=>{if(B)try{rF(U,B,F)}catch(U){}return F}))}delete(U){return this._trans("readwrite",(F=>this.core.mutate({trans:F,type:"delete",keys:[U]}))).then((U=>U.numFailures?iQ.reject(U.failures[0]):void 0))}clear(){return this._trans("readwrite",(U=>this.core.mutate({trans:U,type:"deleteRange",range:vB}))).then((U=>U.numFailures?iQ.reject(U.failures[0]):void 0))}bulkGet(U){return this._trans("readonly",(F=>this.core.getMany({keys:U,trans:F}).then((U=>U.map((U=>this.hook.reading.fire(U)))))))}bulkAdd(U,F,Q){const B=Array.isArray(F)?F:void 0,R=(Q=Q||(B?void 0:F))?Q.allKeys:void 0;return this._trans("readwrite",(F=>{const{auto:Q,keyPath:V}=this.schema.primKey;if(V&&B)throw new dQ.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");if(B&&B.length!==U.length)throw new dQ.InvalidArgument("Arguments objects and keys must have the same length");const d=U.length;let J=V&&Q?U.map(bB(V)):U;return this.core.mutate({trans:F,type:"add",keys:B,values:J,wantResults:R}).then((({numFailures:U,results:F,lastResult:Q,failures:B})=>{if(0===U)return R?F:Q;throw new BQ(`${this.name}.bulkAdd(): ${U} of ${d} operations failed`,B)}))}))}bulkPut(U,F,Q){const B=Array.isArray(F)?F:void 0,R=(Q=Q||(B?void 0:F))?Q.allKeys:void 0;return this._trans("readwrite",(F=>{const{auto:Q,keyPath:V}=this.schema.primKey;if(V&&B)throw new dQ.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");if(B&&B.length!==U.length)throw new dQ.InvalidArgument("Arguments objects and keys must have the same length");const d=U.length;let J=V&&Q?U.map(bB(V)):U;return this.core.mutate({trans:F,type:"put",keys:B,values:J,wantResults:R}).then((({numFailures:U,results:F,lastResult:Q,failures:B})=>{if(0===U)return R?F:Q;throw new BQ(`${this.name}.bulkPut(): ${U} of ${d} operations failed`,B)}))}))}bulkDelete(U){const F=U.length;return this._trans("readwrite",(F=>this.core.mutate({trans:F,type:"delete",keys:U}))).then((({numFailures:U,lastResult:Q,failures:B})=>{if(0===U)return Q;throw new BQ(`${this.name}.bulkDelete(): ${U} of ${F} operations failed`,B)}))}}function XB(U){var F={},Q=function(Q,B){if(B){for(var R=arguments.length,V=new Array(R-1);--R;)V[R-1]=arguments[R];return F[Q].subscribe.apply(null,V),U}if("string"==typeof Q)return F[Q]};Q.addEventType=V;for(var B=1,R=arguments.length;B<R;++B)V(arguments[B]);return Q;function V(U,B,R){if("object"==typeof U)return d(U);B||(B=TQ),R||(R=WQ);var V={subscribers:[],fire:R,subscribe:function(U){-1===V.subscribers.indexOf(U)&&(V.subscribers.push(U),V.fire=B(V.fire,U))},unsubscribe:function(U){V.subscribers=V.subscribers.filter((function(F){return F!==U})),V.fire=V.subscribers.reduce(B,R)}};return F[U]=Q[U]=V,V}function d(U){ZF(U).forEach((function(F){var Q=U[F];if(nF(Q))V(F,U[F][0],U[F][1]);else{if("asap"!==Q)throw new dQ.InvalidArgument("Invalid event config");var B=V(F,ZQ,(function(){for(var U=arguments.length,F=new Array(U);U--;)F[U]=arguments[U];B.subscribers.forEach((function(U){mF((function(){U.apply(null,F)}))}))}))}}))}}function HB(U,F){return tF(F).from({prototype:U}),F}function zB(U,F){return!(U.filter||U.algorithm||U.or)&&(F?U.justLimit:!U.replayFilter)}function OB(U,F){U.filter=rB(U.filter,F)}function oB(U,F,Q){var B=U.replayFilter;U.replayFilter=B?()=>rB(B(),F()):F,U.justLimit=Q&&!B}function xB(U,F){if(U.isPrimKey)return F.primaryKey;const Q=F.getIndexByKeyPath(U.index);if(!Q)throw new dQ.Schema("KeyPath "+U.index+" on object store "+F.name+" is not indexed");return Q}function iB(U,F,Q){const B=xB(U,F.schema);return F.openCursor({trans:Q,values:!U.keysOnly,reverse:"prev"===U.dir,unique:!!U.unique,query:{index:B,range:U.range}})}function wB(U,F,Q,B){const R=U.replayFilter?rB(U.filter,U.replayFilter()):U.filter;if(U.or){const V={},d=(U,Q,B)=>{if(!R||R(Q,B,(U=>Q.stop(U)),(U=>Q.fail(U)))){var d=Q.primaryKey,J=""+d;"[object ArrayBuffer]"===J&&(J=""+new Uint8Array(d)),kF(V,J)||(V[J]=!0,F(U,Q,B))}};return Promise.all([U.or._iterate(d,Q),LB(iB(U,B,Q),U.algorithm,d,!U.keysOnly&&U.valueMapper)])}return LB(iB(U,B,Q),rB(U.algorithm,R),F,!U.keysOnly&&U.valueMapper)}function LB(U,F,Q,B){var R=UB(B?(U,F,R)=>Q(B(U),F,R):Q);return U.then((U=>{if(U)return U.start((()=>{var Q=()=>U.continue();F&&!F(U,(U=>Q=U),(F=>{U.stop(F),Q=WQ}),(F=>{U.fail(F),Q=WQ}))||R(U.value,U,(U=>Q=U)),Q()}))}))}function sB(U,F){try{const Q=jB(U),B=jB(F);if(Q!==B)return"Array"===Q?1:"Array"===B?-1:"binary"===Q?1:"binary"===B?-1:"string"===Q?1:"string"===B?-1:"Date"===Q?1:"Date"!==B?NaN:-1;switch(Q){case"number":case"Date":case"string":return U>F?1:U<F?-1:0;case"binary":return function(U,F){const Q=U.length,B=F.length,R=Q<B?Q:B;for(let Q=0;Q<R;++Q)if(U[Q]!==F[Q])return U[Q]<F[Q]?-1:1;return Q===B?0:Q<B?-1:1}(IB(U),IB(F));case"Array":return function(U,F){const Q=U.length,B=F.length,R=Q<B?Q:B;for(let Q=0;Q<R;++Q){const B=sB(U[Q],F[Q]);if(0!==B)return B}return Q===B?0:Q<B?-1:1}(U,F)}}catch(U){}return NaN}function jB(U){const F=typeof U;if("object"!==F)return F;if(ArrayBuffer.isView(U))return"binary";const Q=iF(U);return"ArrayBuffer"===Q?"binary":Q}function IB(U){return U instanceof Uint8Array?U:ArrayBuffer.isView(U)?new Uint8Array(U.buffer,U.byteOffset,U.byteLength):new Uint8Array(U)}class uB{_read(U,F){var Q=this._ctx;return Q.error?Q.table._trans(null,CB.bind(null,Q.error)):Q.table._trans("readonly",U).then(F)}_write(U){var F=this._ctx;return F.error?F.table._trans(null,CB.bind(null,F.error)):F.table._trans("readwrite",U,"locked")}_addAlgorithm(U){var F=this._ctx;F.algorithm=rB(F.algorithm,U)}_iterate(U,F){return wB(this._ctx,U,F,this._ctx.table.core)}clone(U){var F=Object.create(this.constructor.prototype),Q=Object.create(this._ctx);return U&&NF(Q,U),F._ctx=Q,F}raw(){return this._ctx.valueMapper=null,this}each(U){var F=this._ctx;return this._read((Q=>wB(F,U,Q,F.table.core)))}count(U){return this._read((U=>{const F=this._ctx,Q=F.table.core;if(zB(F,!0))return Q.count({trans:U,query:{index:xB(F,Q.schema),range:F.range}}).then((U=>Math.min(U,F.limit)));var B=0;return wB(F,(()=>(++B,!1)),U,Q).then((()=>B))})).then(U)}sortBy(U,F){const Q=U.split(".").reverse(),B=Q[0],R=Q.length-1;function V(U,F){return F?V(U[Q[F]],F-1):U[B]}var d="next"===this._ctx.dir?1:-1;function J(U,F){var Q=V(U,R),B=V(F,R);return Q<B?-d:Q>B?d:0}return this.toArray((function(U){return U.sort(J)})).then(F)}toArray(U){return this._read((U=>{var F=this._ctx;if("next"===F.dir&&zB(F,!0)&&F.limit>0){const{valueMapper:Q}=F,B=xB(F,F.table.core.schema);return F.table.core.query({trans:U,limit:F.limit,values:!0,query:{index:B,range:F.range}}).then((({result:U})=>Q?U.map(Q):U))}{const Q=[];return wB(F,(U=>Q.push(U)),U,F.table.core).then((()=>Q))}}),U)}offset(U){var F=this._ctx;return U<=0||(F.offset+=U,zB(F)?oB(F,(()=>{var F=U;return(U,Q)=>0===F||(1===F?(--F,!1):(Q((()=>{U.advance(F),F=0})),!1))})):oB(F,(()=>{var F=U;return()=>--F<0}))),this}limit(U){return this._ctx.limit=Math.min(this._ctx.limit,U),oB(this._ctx,(()=>{var F=U;return function(U,Q,B){return--F<=0&&Q(B),F>=0}}),!0),this}until(U,F){return OB(this._ctx,(function(Q,B,R){return!U(Q.value)||(B(R),F)})),this}first(U){return this.limit(1).toArray((function(U){return U[0]})).then(U)}last(U){return this.reverse().first(U)}filter(U){var F,Q;return OB(this._ctx,(function(F){return U(F.value)})),F=this._ctx,Q=U,F.isMatch=rB(F.isMatch,Q),this}and(U){return this.filter(U)}or(U){return new this.db.WhereClause(this._ctx.table,U,this)}reverse(){return this._ctx.dir="prev"===this._ctx.dir?"next":"prev",this._ondirectionchange&&this._ondirectionchange(this._ctx.dir),this}desc(){return this.reverse()}eachKey(U){var F=this._ctx;return F.keysOnly=!F.isMatch,this.each((function(F,Q){U(Q.key,Q)}))}eachUniqueKey(U){return this._ctx.unique="unique",this.eachKey(U)}eachPrimaryKey(U){var F=this._ctx;return F.keysOnly=!F.isMatch,this.each((function(F,Q){U(Q.primaryKey,Q)}))}keys(U){var F=this._ctx;F.keysOnly=!F.isMatch;var Q=[];return this.each((function(U,F){Q.push(F.key)})).then((function(){return Q})).then(U)}primaryKeys(U){var F=this._ctx;if("next"===F.dir&&zB(F,!0)&&F.limit>0)return this._read((U=>{var Q=xB(F,F.table.core.schema);return F.table.core.query({trans:U,values:!1,limit:F.limit,query:{index:Q,range:F.range}})})).then((({result:U})=>U)).then(U);F.keysOnly=!F.isMatch;var Q=[];return this.each((function(U,F){Q.push(F.primaryKey)})).then((function(){return Q})).then(U)}uniqueKeys(U){return this._ctx.unique="unique",this.keys(U)}firstKey(U){return this.limit(1).keys((function(U){return U[0]})).then(U)}lastKey(U){return this.reverse().firstKey(U)}distinct(){var U=this._ctx,F=U.index&&U.table.schema.idxByName[U.index];if(!F||!F.multi)return this;var Q={};return OB(this._ctx,(function(U){var F=U.primaryKey.toString(),B=kF(Q,F);return Q[F]=!0,!B})),this}modify(U){var F=this._ctx;return this._write((Q=>{var B;if("function"==typeof U)B=U;else{var R=ZF(U),V=R.length;B=function(F){for(var Q=!1,B=0;B<V;++B){var d=R[B],J=U[d];GF(F,d)!==J&&(rF(F,d,J),Q=!0)}return Q}}const d=F.table.core,{outbound:J,extractKey:l}=d.schema.primaryKey,W=this.db._options.modifyChunkSize||200,Z=[];let n=0;const N=[],E=(U,F)=>{const{failures:Q,numFailures:B}=F;n+=U-B;for(let U of ZF(Q))Z.push(Q[U])};return this.clone().primaryKeys().then((R=>{const V=Z=>{const n=Math.min(W,R.length-Z);return d.getMany({trans:Q,keys:R.slice(Z,Z+n),cache:"immutable"}).then((N=>{const S=[],k=[],T=J?[]:null,a=[];for(let U=0;U<n;++U){const F=N[U],Q={value:OF(F),primKey:R[Z+U]};!1!==B.call(Q,Q.value,Q)&&(null==Q.value?a.push(R[Z+U]):J||0===sB(l(F),l(Q.value))?(k.push(Q.value),J&&T.push(R[Z+U])):(a.push(R[Z+U]),S.push(Q.value)))}const h=zB(F)&&F.limit===1/0&&("function"!=typeof U||U===KB)&&{index:F.index,range:F.range};return Promise.resolve(S.length>0&&d.mutate({trans:Q,type:"add",values:S}).then((U=>{for(let F in U.failures)a.splice(parseInt(F),1);E(S.length,U)}))).then((()=>(k.length>0||h&&"object"==typeof U)&&d.mutate({trans:Q,type:"put",keys:T,values:k,criteria:h,changeSpec:"function"!=typeof U&&U}).then((U=>E(k.length,U))))).then((()=>(a.length>0||h&&U===KB)&&d.mutate({trans:Q,type:"delete",keys:a,criteria:h}).then((U=>E(a.length,U))))).then((()=>R.length>Z+n&&V(Z+W)))}))};return V(0).then((()=>{if(Z.length>0)throw new QQ("Error modifying one or more objects",Z,n,N);return R.length}))}))}))}delete(){var U=this._ctx,F=U.range;return zB(U)&&(U.isPrimKey&&!YB||3===F.type)?this._write((Q=>{const{primaryKey:B}=U.table.core.schema,R=F;return U.table.core.count({trans:Q,query:{index:B,range:R}}).then((F=>U.table.core.mutate({trans:Q,type:"deleteRange",range:R}).then((({failures:U,lastResult:Q,results:B,numFailures:R})=>{if(R)throw new QQ("Could not delete some values",Object.keys(U).map((F=>U[F])),F-R);return F-R}))))})):this.modify(KB)}}const KB=(U,F)=>F.value=null;function gB(U,F){return U<F?-1:U===F?0:1}function fB(U,F){return U>F?-1:U===F?0:1}function qB(U,F,Q){var B=U instanceof FR?new U.Collection(U):U;return B._ctx.error=Q?new Q(F):new TypeError(F),B}function PB(U){return new U.Collection(U,(()=>UR(""))).limit(0)}function AB(U,F,Q,B,R,V){for(var d=Math.min(U.length,B.length),J=-1,l=0;l<d;++l){var W=F[l];if(W!==B[l])return R(U[l],Q[l])<0?U.substr(0,l)+Q[l]+Q.substr(l+1):R(U[l],B[l])<0?U.substr(0,l)+B[l]+Q.substr(l+1):J>=0?U.substr(0,J)+F[J]+Q.substr(J+1):null;R(U[l],W)<0&&(J=l)}return d<B.length&&"next"===V?U+Q.substr(U.length):d<U.length&&"prev"===V?U.substr(0,Q.length):J<0?null:U.substr(0,J)+B[J]+Q.substr(J+1)}function _B(U,F,Q,B){var R,V,d,J,l,W,Z,n=Q.length;if(!Q.every((U=>"string"==typeof U)))return qB(U,"String expected.");function N(U){R=function(U){return"next"===U?U=>U.toUpperCase():U=>U.toLowerCase()}(U),V=function(U){return"next"===U?U=>U.toLowerCase():U=>U.toUpperCase()}(U),d="next"===U?gB:fB;var F=Q.map((function(U){return{lower:V(U),upper:R(U)}})).sort((function(U,F){return d(U.lower,F.lower)}));J=F.map((function(U){return U.upper})),l=F.map((function(U){return U.lower})),W=U,Z="next"===U?"":B}N("next");var E=new U.Collection(U,(()=>$B(J[0],l[n-1]+B)));E._ondirectionchange=function(U){N(U)};var S=0;return E._addAlgorithm((function(U,Q,B){var R=U.key;if("string"!=typeof R)return!1;var N=V(R);if(F(N,l,S))return!0;for(var E=null,k=S;k<n;++k){var T=AB(R,N,J[k],l[k],d,W);null===T&&null===E?S=k+1:(null===E||d(E,T)>0)&&(E=T)}return Q(null!==E?function(){U.continue(E+Z)}:B),!1})),E}function $B(U,F,Q,B){return{type:2,lower:U,upper:F,lowerOpen:Q,upperOpen:B}}function UR(U){return{type:1,lower:U,upper:U}}class FR{get Collection(){return this._ctx.table.db.Collection}between(U,F,Q,B){Q=!1!==Q,B=!0===B;try{return this._cmp(U,F)>0||0===this._cmp(U,F)&&(Q||B)&&(!Q||!B)?PB(this):new this.Collection(this,(()=>$B(U,F,!Q,!B)))}catch(U){return qB(this,cB)}}equals(U){return null==U?qB(this,cB):new this.Collection(this,(()=>UR(U)))}above(U){return null==U?qB(this,cB):new this.Collection(this,(()=>$B(U,void 0,!0)))}aboveOrEqual(U){return null==U?qB(this,cB):new this.Collection(this,(()=>$B(U,void 0,!1)))}below(U){return null==U?qB(this,cB):new this.Collection(this,(()=>$B(void 0,U,!1,!0)))}belowOrEqual(U){return null==U?qB(this,cB):new this.Collection(this,(()=>$B(void 0,U)))}startsWith(U){return"string"!=typeof U?qB(this,"String expected."):this.between(U,U+eB,!0,!0)}startsWithIgnoreCase(U){return""===U?this.startsWith(U):_B(this,((U,F)=>0===U.indexOf(F[0])),[U],eB)}equalsIgnoreCase(U){return _B(this,((U,F)=>U===F[0]),[U],"")}anyOfIgnoreCase(){var U=jF.apply(sF,arguments);return 0===U.length?PB(this):_B(this,((U,F)=>-1!==F.indexOf(U)),U,"")}startsWithAnyOfIgnoreCase(){var U=jF.apply(sF,arguments);return 0===U.length?PB(this):_B(this,((U,F)=>F.some((F=>0===U.indexOf(F)))),U,eB)}anyOf(){const U=jF.apply(sF,arguments);let F=this._cmp;try{U.sort(F)}catch(U){return qB(this,cB)}if(0===U.length)return PB(this);const Q=new this.Collection(this,(()=>$B(U[0],U[U.length-1])));Q._ondirectionchange=Q=>{F="next"===Q?this._ascending:this._descending,U.sort(F)};let B=0;return Q._addAlgorithm(((Q,R,V)=>{const d=Q.key;for(;F(d,U[B])>0;)if(++B,B===U.length)return R(V),!1;return 0===F(d,U[B])||(R((()=>{Q.continue(U[B])})),!1)})),Q}notEqual(U){return this.inAnyRange([[-(1/0),U],[U,this.db._maxKey]],{includeLowers:!1,includeUppers:!1})}noneOf(){const U=jF.apply(sF,arguments);if(0===U.length)return new this.Collection(this);try{U.sort(this._ascending)}catch(U){return qB(this,cB)}const F=U.reduce(((U,F)=>U?U.concat([[U[U.length-1][1],F]]):[[-(1/0),F]]),null);return F.push([U[U.length-1],this.db._maxKey]),this.inAnyRange(F,{includeLowers:!1,includeUppers:!1})}inAnyRange(U,F){const Q=this._cmp,B=this._ascending,R=this._descending,V=this._min,d=this._max;if(0===U.length)return PB(this);if(!U.every((U=>void 0!==U[0]&&void 0!==U[1]&&B(U[0],U[1])<=0)))return qB(this,"First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower",dQ.InvalidArgument);const J=!F||!1!==F.includeLowers,l=F&&!0===F.includeUppers;let W,Z=B;function n(U,F){return Z(U[0],F[0])}try{W=U.reduce((function(U,F){let B=0,R=U.length;for(;B<R;++B){const R=U[B];if(Q(F[0],R[1])<0&&Q(F[1],R[0])>0){R[0]=V(R[0],F[0]),R[1]=d(R[1],F[1]);break}}return B===R&&U.push(F),U}),[]),W.sort(n)}catch(U){return qB(this,cB)}let N=0;const E=l?U=>B(U,W[N][1])>0:U=>B(U,W[N][1])>=0,S=J?U=>R(U,W[N][0])>0:U=>R(U,W[N][0])>=0;let k=E;const T=new this.Collection(this,(()=>$B(W[0][0],W[W.length-1][1],!J,!l)));return T._ondirectionchange=U=>{"next"===U?(k=E,Z=B):(k=S,Z=R),W.sort(n)},T._addAlgorithm(((U,F,Q)=>{for(var R=U.key;k(R);)if(++N,N===W.length)return F(Q),!1;return!!function(U){return!E(U)&&!S(U)}(R)||(0===this._cmp(R,W[N][1])||0===this._cmp(R,W[N][0])||F((()=>{Z===B?U.continue(W[N][0]):U.continue(W[N][1])})),!1)})),T}startsWithAnyOf(){const U=jF.apply(sF,arguments);return U.every((U=>"string"==typeof U))?0===U.length?PB(this):this.inAnyRange(U.map((U=>[U,U+eB]))):qB(this,"startsWithAnyOf() only works with strings")}}function QR(U){return UB((function(F){return BR(F),U(F.target.error),!1}))}function BR(U){U.stopPropagation&&U.stopPropagation(),U.preventDefault&&U.preventDefault()}const RR=XB(null,"storagemutated");class VR{_lock(){return pF(!zQ.global),++this._reculock,1!==this._reculock||zQ.global||(zQ.lockOwnerFor=this),this}_unlock(){if(pF(!zQ.global),0==--this._reculock)for(zQ.global||(zQ.lockOwnerFor=null);this._blockedFuncs.length>0&&!this._locked();){var U=this._blockedFuncs.shift();try{kB(U[1],U[0])}catch(U){}}return this}_locked(){return this._reculock&&zQ.lockOwnerFor!==this}create(U){if(!this.mode)return this;const F=this.db.idbdb,Q=this.db._state.dbOpenError;if(pF(!this.idbtrans),!U&&!F)switch(Q&&Q.name){case"DatabaseClosedError":throw new dQ.DatabaseClosed(Q);case"MissingAPIError":throw new dQ.MissingAPI(Q.message,Q);default:throw new dQ.OpenFailed(Q)}if(!this.active)throw new dQ.TransactionInactive;return pF(null===this._completion._state),(U=this.idbtrans=U||(this.db.core?this.db.core.transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability}):F.transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability}))).onerror=UB((F=>{BR(F),this._reject(U.error)})),U.onabort=UB((F=>{BR(F),this.active&&this._reject(new dQ.Abort(U.error)),this.active=!1,this.on("abort").fire(F)})),U.oncomplete=UB((()=>{this.active=!1,this._resolve(),"mutatedParts"in U&&RR.storagemutated.fire(U.mutatedParts)})),this}_promise(U,F,Q){if("readwrite"===U&&"readwrite"!==this.mode)return CB(new dQ.ReadOnly("Transaction is readonly"));if(!this.active)return CB(new dQ.TransactionInactive);if(this._locked())return new iQ(((B,R)=>{this._blockedFuncs.push([()=>{this._promise(U,F,Q).then(B,R)},zQ])}));if(Q)return JB((()=>{var U=new iQ(((U,Q)=>{this._lock();const B=F(U,Q,this);B&&B.then&&B.then(U,Q)}));return U.finally((()=>this._unlock())),U._lib=!0,U}));var B=new iQ(((U,Q)=>{var B=F(U,Q,this);B&&B.then&&B.then(U,Q)}));return B._lib=!0,B}_root(){return this.parent?this.parent._root():this}waitFor(U){var F=this._root();const Q=iQ.resolve(U);if(F._waitingFor)F._waitingFor=F._waitingFor.then((()=>Q));else{F._waitingFor=Q,F._waitingQueue=[];var B=F.idbtrans.objectStore(F.storeNames[0]);!function U(){for(++F._spinCount;F._waitingQueue.length;)F._waitingQueue.shift()();F._waitingFor&&(B.get(-1/0).onsuccess=U)}()}var R=F._waitingFor;return new iQ(((U,B)=>{Q.then((Q=>F._waitingQueue.push(UB(U.bind(null,Q)))),(U=>F._waitingQueue.push(UB(B.bind(null,U))))).finally((()=>{F._waitingFor===R&&(F._waitingFor=null)}))}))}abort(){this.active&&(this.active=!1,this.idbtrans&&this.idbtrans.abort(),this._reject(new dQ.Abort))}table(U){const F=this._memoizedTables||(this._memoizedTables={});if(kF(F,U))return F[U];const Q=this.schema[U];if(!Q)throw new dQ.NotFound("Table "+U+" not part of transaction");const B=new this.db.Table(U,Q,this);return B.core=this.db.core.table(U),F[U]=B,B}}function dR(U,F,Q,B,R,V,d){return{name:U,keyPath:F,unique:Q,multi:B,auto:R,compound:V,src:(Q&&!d?"&":"")+(B?"*":"")+(R?"++":"")+JR(F)}}function JR(U){return"string"==typeof U?U:U?"["+[].join.call(U,"+")+"]":""}function lR(U,F,Q){return{name:U,primKey:F,indexes:Q,mappedClass:null,idxByName:YF(Q,(U=>[U.name,U]))}}let WR=U=>{try{return U.only([[]]),WR=()=>[[]],[[]]}catch(U){return WR=()=>eB,eB}};function ZR(U){return null==U?()=>{}:"string"==typeof U?function(U){return 1===U.split(".").length?F=>F[U]:F=>GF(F,U)}(U):F=>GF(F,U)}function nR(U){return[].slice.call(U)}let NR=0;function ER(U){return null==U?":id":"string"==typeof U?U:`[${U.join("+")}]`}function SR(U,F,Q){function B(U){if(3===U.type)return null;if(4===U.type)throw new Error("Cannot convert never type to IDBKeyRange");const{lower:Q,upper:B,lowerOpen:R,upperOpen:V}=U;return void 0===Q?void 0===B?null:F.upperBound(B,!!V):void 0===B?F.lowerBound(Q,!!R):F.bound(Q,B,!!R,!!V)}const{schema:R,hasGetAll:V}=function(U,F){const Q=nR(U.objectStoreNames);return{schema:{name:U.name,tables:Q.map((U=>F.objectStore(U))).map((U=>{const{keyPath:F,autoIncrement:Q}=U,B=nF(F),R=null==F,V={},d={name:U.name,primaryKey:{name:null,isPrimaryKey:!0,outbound:R,compound:B,keyPath:F,autoIncrement:Q,unique:!0,extractKey:ZR(F)},indexes:nR(U.indexNames).map((F=>U.index(F))).map((U=>{const{name:F,unique:Q,multiEntry:B,keyPath:R}=U,d={name:F,compound:nF(R),keyPath:R,unique:Q,multiEntry:B,extractKey:ZR(R)};return V[ER(R)]=d,d})),getIndexByKeyPath:U=>V[ER(U)]};return V[":id"]=d.primaryKey,null!=F&&(V[ER(F)]=d.primaryKey),d}))},hasGetAll:Q.length>0&&"getAll"in F.objectStore(Q[0])&&!("undefined"!=typeof navigator&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604)}}(U,Q),d=R.tables.map((U=>function(U){const F=U.name;return{name:F,schema:U,mutate:function({trans:U,type:Q,keys:R,values:V,range:d}){return new Promise(((J,l)=>{J=UB(J);const W=U.objectStore(F),Z=null==W.keyPath,n="put"===Q||"add"===Q;if(!n&&"delete"!==Q&&"deleteRange"!==Q)throw new Error("Invalid operation type: "+Q);const{length:N}=R||V||{length:1};if(R&&V&&R.length!==V.length)throw new Error("Given keys array must have same length as given values array.");if(0===N)return J({numFailures:0,failures:{},results:[],lastResult:void 0});let E;const S=[],k=[];let T=0;const a=U=>{++T,BR(U)};if("deleteRange"===Q){if(4===d.type)return J({numFailures:T,failures:k,results:[],lastResult:void 0});3===d.type?S.push(E=W.clear()):S.push(E=W.delete(B(d)))}else{const[U,F]=n?Z?[V,R]:[V,null]:[R,null];if(n)for(let B=0;B<N;++B)S.push(E=F&&void 0!==F[B]?W[Q](U[B],F[B]):W[Q](U[B])),E.onerror=a;else for(let F=0;F<N;++F)S.push(E=W[Q](U[F])),E.onerror=a}const h=U=>{const F=U.target.result;S.forEach(((U,F)=>null!=U.error&&(k[F]=U.error))),J({numFailures:T,failures:k,results:"delete"===Q?R:S.map((U=>U.result)),lastResult:F})};E.onerror=U=>{a(U),h(U)},E.onsuccess=h}))},getMany:({trans:U,keys:Q})=>new Promise(((B,R)=>{B=UB(B);const V=U.objectStore(F),d=Q.length,J=new Array(d);let l,W=0,Z=0;const n=U=>{const F=U.target;J[F._pos]=F.result,++Z===W&&B(J)},N=QR(R);for(let U=0;U<d;++U)null!=Q[U]&&(l=V.get(Q[U]),l._pos=U,l.onsuccess=n,l.onerror=N,++W);0===W&&B(J)})),get:({trans:U,key:Q})=>new Promise(((B,R)=>{B=UB(B);const V=U.objectStore(F).get(Q);V.onsuccess=U=>B(U.target.result),V.onerror=QR(R)})),query:function(U){return Q=>new Promise(((R,V)=>{R=UB(R);const{trans:d,values:J,limit:l,query:W}=Q,Z=l===1/0?void 0:l,{index:n,range:N}=W,E=d.objectStore(F),S=n.isPrimaryKey?E:E.index(n.name),k=B(N);if(0===l)return R({result:[]});if(U){const U=J?S.getAll(k,Z):S.getAllKeys(k,Z);U.onsuccess=U=>R({result:U.target.result}),U.onerror=QR(V)}else{let U=0;const F=J||!("openKeyCursor"in S)?S.openCursor(k):S.openKeyCursor(k),Q=[];F.onsuccess=B=>{const V=F.result;return V?(Q.push(J?V.value:V.primaryKey),++U===l?R({result:Q}):void V.continue()):R({result:Q})},F.onerror=QR(V)}}))}(V),openCursor:function({trans:U,values:Q,query:R,reverse:V,unique:d}){return new Promise(((J,l)=>{J=UB(J);const{index:W,range:Z}=R,n=U.objectStore(F),N=W.isPrimaryKey?n:n.index(W.name),E=V?d?"prevunique":"prev":d?"nextunique":"next",S=Q||!("openKeyCursor"in N)?N.openCursor(B(Z),E):N.openKeyCursor(B(Z),E);S.onerror=QR(l),S.onsuccess=UB((F=>{const Q=S.result;if(!Q)return void J(null);Q.___id=++NR,Q.done=!1;const B=Q.continue.bind(Q);let R=Q.continuePrimaryKey;R&&(R=R.bind(Q));const V=Q.advance.bind(Q),d=()=>{throw new Error("Cursor not stopped")};Q.trans=U,Q.stop=Q.continue=Q.continuePrimaryKey=Q.advance=()=>{throw new Error("Cursor not started")},Q.fail=UB(l),Q.next=function(){let U=1;return this.start((()=>U--?this.continue():this.stop())).then((()=>this))},Q.start=U=>{const F=new Promise(((U,F)=>{U=UB(U),S.onerror=QR(F),Q.fail=F,Q.stop=F=>{Q.stop=Q.continue=Q.continuePrimaryKey=Q.advance=d,U(F)}})),J=()=>{if(S.result)try{U()}catch(U){Q.fail(U)}else Q.done=!0,Q.start=()=>{throw new Error("Cursor behind last entry")},Q.stop()};return S.onsuccess=UB((U=>{S.onsuccess=J,J()})),Q.continue=B,Q.continuePrimaryKey=R,Q.advance=V,J(),F},J(Q)}),l)}))},count({query:U,trans:Q}){const{index:R,range:V}=U;return new Promise(((U,d)=>{const J=Q.objectStore(F),l=R.isPrimaryKey?J:J.index(R.name),W=B(V),Z=W?l.count(W):l.count();Z.onsuccess=UB((F=>U(F.target.result))),Z.onerror=QR(d)}))}}}(U))),J={};return d.forEach((U=>J[U.name]=U)),{stack:"dbcore",transaction:U.transaction.bind(U),table(U){if(!J[U])throw new Error(`Table '${U}' not found`);return J[U]},MIN_KEY:-1/0,MAX_KEY:WR(F),schema:R}}function kR({_novip:U},F){const Q=F.db,B=function(U,F,{IDBKeyRange:Q,indexedDB:B},R){const V=function(U,F){return F.reduce(((U,{create:F})=>({...U,...F(U)})),U)}(SR(F,Q,R),U.dbcore);return{dbcore:V}}(U._middlewares,Q,U._deps,F);U.core=B.dbcore,U.tables.forEach((F=>{const Q=F.name;U.core.schema.tables.some((U=>U.name===Q))&&(F.core=U.core.table(Q),U[Q]instanceof U.Table&&(U[Q].core=F.core))}))}function TR({_novip:U},F,Q,B){Q.forEach((Q=>{const R=B[Q];F.forEach((F=>{const B=DF(F,Q);(!B||"value"in B&&void 0===B.value)&&(F===U.Transaction.prototype||F instanceof U.Transaction?hF(F,Q,{get(){return this.table(Q)},set(U){aF(this,Q,{value:U,writable:!0,configurable:!0,enumerable:!0})}}):F[Q]=new U.Table(Q,R))}))}))}function aR({_novip:U},F){F.forEach((F=>{for(let Q in F)F[Q]instanceof U.Table&&delete F[Q]}))}function hR(U,F){return U._cfg.version-F._cfg.version}function tR(U,F,Q,B){const R=U._dbSchema,V=U._createTransaction("readwrite",U._storeNames,R);V.create(Q),V._completion.catch(B);const d=V._reject.bind(V),J=zQ.transless||zQ;JB((()=>{zQ.trans=V,zQ.transless=J,0===F?(ZF(R).forEach((U=>{DR(Q,U,R[U].primKey,R[U].indexes)})),kR(U,Q),iQ.follow((()=>U.on.populate.fire(V))).catch(d)):function({_novip:U},F,Q,B){const R=[],V=U._versions;let d=U._dbSchema=cR(U,U.idbdb,B),J=!1;function l(){return R.length?iQ.resolve(R.shift()(Q.idbtrans)).then(l):iQ.resolve()}return V.filter((U=>U._cfg.version>=F)).forEach((V=>{R.push((()=>{const R=d,l=V._cfg.dbschema;MR(U,R,B),MR(U,l,B),d=U._dbSchema=l;const W=CR(R,l);W.add.forEach((U=>{DR(B,U[0],U[1].primKey,U[1].indexes)})),W.change.forEach((U=>{if(U.recreate)throw new dQ.Upgrade("Not yet support for changing primary key");{const F=B.objectStore(U.name);U.add.forEach((U=>eR(F,U))),U.change.forEach((U=>{F.deleteIndex(U.name),eR(F,U)})),U.del.forEach((U=>F.deleteIndex(U)))}}));const Z=V._cfg.contentUpgrade;if(Z&&V._cfg.version>F){kR(U,B),Q._memoizedTables={},J=!0;let F=vF(l);W.del.forEach((U=>{F[U]=R[U]})),aR(U,[U.Transaction.prototype]),TR(U,[U.Transaction.prototype],ZF(F),F),Q.schema=F;const V=IF(Z);let d;V&&lB();const n=iQ.follow((()=>{if(d=Z(Q),d&&V){var U=WB.bind(null,null);d.then(U,U)}}));return d&&"function"==typeof d.then?iQ.resolve(d):n.then((()=>d))}})),R.push((F=>{if(!J||!mB){!function(U,F){[].slice.call(F.db.objectStoreNames).forEach((Q=>null==U[Q]&&F.db.deleteObjectStore(Q)))}(V._cfg.dbschema,F)}aR(U,[U.Transaction.prototype]),TR(U,[U.Transaction.prototype],U._storeNames,U._dbSchema),Q.schema=U._dbSchema}))})),l().then((()=>{var U,F;F=B,ZF(U=d).forEach((Q=>{F.db.objectStoreNames.contains(Q)||DR(F,Q,U[Q].primKey,U[Q].indexes)}))}))}(U,F,V,Q).catch(d)}))}function CR(U,F){const Q={del:[],add:[],change:[]};let B;for(B in U)F[B]||Q.del.push(B);for(B in F){const R=U[B],V=F[B];if(R){const U={name:B,def:V,recreate:!1,del:[],add:[],change:[]};if(""+(R.primKey.keyPath||"")!=""+(V.primKey.keyPath||"")||R.primKey.auto!==V.primKey.auto&&!pB)U.recreate=!0,Q.change.push(U);else{const F=R.idxByName,B=V.idxByName;let d;for(d in F)B[d]||U.del.push(d);for(d in B){const Q=F[d],R=B[d];Q?Q.src!==R.src&&U.change.push(R):U.add.push(R)}(U.del.length>0||U.add.length>0||U.change.length>0)&&Q.change.push(U)}}else Q.add.push([B,V])}return Q}function DR(U,F,Q,B){const R=U.db.createObjectStore(F,Q.keyPath?{keyPath:Q.keyPath,autoIncrement:Q.auto}:{autoIncrement:Q.auto});return B.forEach((U=>eR(R,U))),R}function eR(U,F){U.createIndex(F.name,F.keyPath,{unique:F.unique,multiEntry:F.multi})}function cR(U,F,Q){const B={};return cF(F.objectStoreNames,0).forEach((U=>{const F=Q.objectStore(U);let R=F.keyPath;const V=dR(JR(R),R||"",!1,!1,!!F.autoIncrement,R&&"string"!=typeof R,!0),d=[];for(let U=0;U<F.indexNames.length;++U){const Q=F.index(F.indexNames[U]);R=Q.keyPath;var J=dR(Q.name,R,!!Q.unique,!!Q.multiEntry,!1,R&&"string"!=typeof R,!1);d.push(J)}B[U]=lR(U,V,d)})),B}function MR({_novip:U},F,Q){const B=Q.db.objectStoreNames;for(let R=0;R<B.length;++R){const V=B[R],d=Q.objectStore(V);U._hasGetAll="getAll"in d;for(let U=0;U<d.indexNames.length;++U){const Q=d.indexNames[U],B=d.index(Q).keyPath,R="string"==typeof B?B:"["+cF(B).join("+")+"]";if(F[V]){const U=F[V].idxByName[R];U&&(U.name=Q,delete F[V].idxByName[R],F[V].idxByName[Q]=U)}}}"undefined"!=typeof navigator&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&WF.WorkerGlobalScope&&WF instanceof WF.WorkerGlobalScope&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604&&(U._hasGetAll=!1)}class pR{_parseStoresSpec(U,F){ZF(U).forEach((Q=>{if(null!==U[Q]){var B=U[Q].split(",").map(((U,F)=>{const Q=(U=U.trim()).replace(/([&*]|\+\+)/g,""),B=/^\[/.test(Q)?Q.match(/^\[(.*)\]$/)[1].split("+"):Q;return dR(Q,B||null,/\&/.test(U),/\*/.test(U),/\+\+/.test(U),nF(B),0===F)})),R=B.shift();if(R.multi)throw new dQ.Schema("Primary key cannot be multi-valued");B.forEach((U=>{if(U.auto)throw new dQ.Schema("Only primary key can be marked as autoIncrement (++)");if(!U.keyPath)throw new dQ.Schema("Index must have a name and cannot be an empty string")})),F[Q]=lR(Q,R,B)}}))}stores(U){const F=this.db;this._cfg.storesSource=this._cfg.storesSource?NF(this._cfg.storesSource,U):U;const Q=F._versions,B={};let R={};return Q.forEach((U=>{NF(B,U._cfg.storesSource),R=U._cfg.dbschema={},U._parseStoresSpec(B,R)})),F._dbSchema=R,aR(F,[F._allTables,F,F.Transaction.prototype]),TR(F,[F._allTables,F,F.Transaction.prototype,this._cfg.tables],ZF(R),R),F._storeNames=ZF(R),this}upgrade(U){return this._cfg.contentUpgrade=aQ(this._cfg.contentUpgrade||WQ,U),this}}function mR(U,F){let Q=U._dbNamesDB;return Q||(Q=U._dbNamesDB=new fR("__dbnames",{addons:[],indexedDB:U,IDBKeyRange:F}),Q.version(1).stores({dbnames:"name"})),Q.table("dbnames")}function YR(U){return U&&"function"==typeof U.databases}function GR(U){return JB((function(){return zQ.letThrough=!0,U()}))}function rR(){var U;return!navigator.userAgentData&&/Safari\//.test(navigator.userAgent)&&!/Chrom(e|ium)\//.test(navigator.userAgent)&&indexedDB.databases?new Promise((function(F){var Q=function(){return indexedDB.databases().finally(F)};U=setInterval(Q,100),Q()})).finally((function(){return clearInterval(U)})):Promise.resolve()}function vR(U){const F=U._state,{indexedDB:Q}=U._deps;if(F.isBeingOpened||U.idbdb)return F.dbReadyPromise.then((()=>F.dbOpenError?CB(F.dbOpenError):U));uF&&(F.openCanceller._stackHolder=qF()),F.isBeingOpened=!0,F.dbOpenError=null,F.openComplete=!1;const B=F.openCanceller;function R(){if(F.openCanceller!==B)throw new dQ.DatabaseClosed("db.open() was cancelled")}let V=F.dbReadyResolve,d=null,J=!1;return iQ.race([B,("undefined"==typeof navigator?iQ.resolve():rR()).then((()=>new iQ(((B,V)=>{if(R(),!Q)throw new dQ.MissingAPI;const l=U.name,W=F.autoSchema?Q.open(l):Q.open(l,Math.round(10*U.verno));if(!W)throw new dQ.MissingAPI;W.onerror=QR(V),W.onblocked=UB(U._fireOnBlocked),W.onupgradeneeded=UB((B=>{if(d=W.transaction,F.autoSchema&&!U._options.allowEmptyDB){W.onerror=BR,d.abort(),W.result.close();const U=Q.deleteDatabase(l);U.onsuccess=U.onerror=UB((()=>{V(new dQ.NoSuchDatabase(`Database ${l} doesnt exist`))}))}else{d.onerror=QR(V);var R=B.oldVersion>Math.pow(2,62)?0:B.oldVersion;J=R<1,U._novip.idbdb=W.result,tR(U,R/10,d,V)}}),V),W.onsuccess=UB((()=>{d=null;const Q=U._novip.idbdb=W.result,R=cF(Q.objectStoreNames);if(R.length>0)try{const B=Q.transaction(1===(V=R).length?V[0]:V,"readonly");F.autoSchema?function({_novip:U},F,Q){U.verno=F.version/10;const B=U._dbSchema=cR(0,F,Q);U._storeNames=cF(F.objectStoreNames,0),TR(U,[U._allTables],ZF(B),B)}(U,Q,B):(MR(U,U._dbSchema,B),function(U,F){const Q=CR(cR(0,U.idbdb,F),U._dbSchema);return!(Q.add.length||Q.change.some((U=>U.add.length||U.change.length)))}(U,B)||console.warn("Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Some queries may fail.")),kR(U,B)}catch(U){}var V;MB.push(U),Q.onversionchange=UB((Q=>{F.vcFired=!0,U.on("versionchange").fire(Q)})),Q.onclose=UB((F=>{U.on("close").fire(F)})),J&&function({indexedDB:U,IDBKeyRange:F},Q){!YR(U)&&"__dbnames"!==Q&&mR(U,F).put({name:Q}).catch(WQ)}(U._deps,l),B()}),V)}))))]).then((()=>(R(),F.onReadyBeingFired=[],iQ.resolve(GR((()=>U.on.ready.fire(U.vip)))).then((function Q(){if(F.onReadyBeingFired.length>0){let B=F.onReadyBeingFired.reduce(aQ,WQ);return F.onReadyBeingFired=[],iQ.resolve(GR((()=>B(U.vip)))).then(Q)}}))))).finally((()=>{F.onReadyBeingFired=null,F.isBeingOpened=!1})).then((()=>U)).catch((Q=>{F.dbOpenError=Q;try{d&&d.abort()}catch(U){}return B===F.openCanceller&&U._close(),CB(Q)})).finally((()=>{F.openComplete=!0,V()}))}function bR(U){var F=F=>U.next(F),Q=R(F),B=R((F=>U.throw(F)));function R(U){return F=>{var R=U(F),V=R.value;return R.done?V:V&&"function"==typeof V.then?V.then(Q,B):nF(V)?Promise.all(V).then(Q,B):Q(V)}}return R(F)()}function yR(U,F,Q){var B=arguments.length;if(B<2)throw new dQ.InvalidArgument("Too few arguments");for(var R=new Array(B-1);--B;)R[B-1]=arguments[B];Q=R.pop();var V=yF(R);return[U,V,Q]}function XR(U,F,Q,B,R){return iQ.resolve().then((()=>{const V=zQ.transless||zQ,d=U._createTransaction(F,Q,U._dbSchema,B),J={trans:d,transless:V};if(B)d.idbtrans=B.idbtrans;else try{d.create(),U._state.PR1398_maxLoop=3}catch(B){return B.name===RQ.InvalidState&&U.isOpen()&&--U._state.PR1398_maxLoop>0?(console.warn("Dexie: Need to reopen db"),U._close(),U.open().then((()=>XR(U,F,Q,null,R)))):CB(B)}const l=IF(R);let W;l&&lB();const Z=iQ.follow((()=>{if(W=R.call(d,d),W)if(l){var U=WB.bind(null,null);W.then(U,U)}else"function"==typeof W.next&&"function"==typeof W.throw&&(W=bR(W))}),J);return(W&&"function"==typeof W.then?iQ.resolve(W).then((U=>d.active?U:CB(new dQ.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn")))):Z.then((()=>W))).then((U=>(B&&d._resolve(),d._completion.then((()=>U))))).catch((U=>(d._reject(U),CB(U))))}))}function HR(U,F,Q){const B=nF(U)?U.slice():[U];for(let U=0;U<Q;++U)B.push(F);return B}const zR={stack:"dbcore",name:"VirtualIndexMiddleware",level:1,create:function(U){return{...U,table(F){const Q=U.table(F),{schema:B}=Q,R={},V=[];function d(U,F,Q){const B=ER(U),J=R[B]=R[B]||[],l=null==U?0:"string"==typeof U?1:U.length,W=F>0,Z={...Q,isVirtual:W,keyTail:F,keyLength:l,extractKey:ZR(U),unique:!W&&Q.unique};if(J.push(Z),Z.isPrimaryKey||V.push(Z),l>1){d(2===l?U[0]:U.slice(0,l-1),F+1,Q)}return J.sort(((U,F)=>U.keyTail-F.keyTail)),Z}const J=d(B.primaryKey.keyPath,0,B.primaryKey);R[":id"]=[J];for(const U of B.indexes)d(U.keyPath,0,U);function l(F){const Q=F.query.index;return Q.isVirtual?{...F,query:{index:Q,range:(B=F.query.range,R=Q.keyTail,{type:1===B.type?2:B.type,lower:HR(B.lower,B.lowerOpen?U.MAX_KEY:U.MIN_KEY,R),lowerOpen:!0,upper:HR(B.upper,B.upperOpen?U.MIN_KEY:U.MAX_KEY,R),upperOpen:!0})}}:F;var B,R}const W={...Q,schema:{...B,primaryKey:J,indexes:V,getIndexByKeyPath:function(U){const F=R[ER(U)];return F&&F[0]}},count:U=>Q.count(l(U)),query:U=>Q.query(l(U)),openCursor(F){const{keyTail:B,isVirtual:R,keyLength:V}=F.query.index;if(!R)return Q.openCursor(F);return Q.openCursor(l(F)).then((Q=>Q&&function(Q){const R=Object.create(Q,{continue:{value:function(R){null!=R?Q.continue(HR(R,F.reverse?U.MAX_KEY:U.MIN_KEY,B)):F.unique?Q.continue(Q.key.slice(0,V).concat(F.reverse?U.MIN_KEY:U.MAX_KEY,B)):Q.continue()}},continuePrimaryKey:{value(F,R){Q.continuePrimaryKey(HR(F,U.MAX_KEY,B),R)}},primaryKey:{get:()=>Q.primaryKey},key:{get(){const U=Q.key;return 1===V?U[0]:U.slice(0,V)}},value:{get:()=>Q.value}});return R}(Q)))}};return W}}}};function OR(U,F,Q,B){return Q=Q||{},B=B||"",ZF(U).forEach((R=>{if(kF(F,R)){var V=U[R],d=F[R];if("object"==typeof V&&"object"==typeof d&&V&&d){const U=iF(V);U!==iF(d)?Q[B+R]=F[R]:"Object"===U?OR(V,d,Q,B+R+"."):V!==d&&(Q[B+R]=F[R])}else V!==d&&(Q[B+R]=F[R])}else Q[B+R]=void 0})),ZF(F).forEach((R=>{kF(U,R)||(Q[B+R]=F[R])})),Q}const oR={stack:"dbcore",name:"HooksMiddleware",level:2,create:U=>({...U,table(F){const Q=U.table(F),{primaryKey:B}=Q.schema,R={...Q,mutate(U){const R=zQ.trans,{deleting:V,creating:d,updating:J}=R.table(F).hook;switch(U.type){case"add":if(d.fire===WQ)break;return R._promise("readwrite",(()=>l(U)),!0);case"put":if(d.fire===WQ&&J.fire===WQ)break;return R._promise("readwrite",(()=>l(U)),!0);case"delete":if(V.fire===WQ)break;return R._promise("readwrite",(()=>l(U)),!0);case"deleteRange":if(V.fire===WQ)break;return R._promise("readwrite",(()=>function(U){return W(U.trans,U.range,1e4)}(U)),!0)}return Q.mutate(U);function l(U){const F=zQ.trans,R=U.keys||function(U,F){return"delete"===F.type?F.keys:F.keys||F.values.map(U.extractKey)}(B,U);if(!R)throw new Error("Keys missing");return"delete"!==(U="add"===U.type||"put"===U.type?{...U,keys:R}:{...U}).type&&(U.values=[...U.values]),U.keys&&(U.keys=[...U.keys]),function(U,F,Q){return"add"===F.type?Promise.resolve([]):U.getMany({trans:F.trans,keys:Q,cache:"immutable"})}(Q,U,R).then((l=>{const W=R.map(((Q,R)=>{const W=l[R],Z={onerror:null,onsuccess:null};if("delete"===U.type)V.fire.call(Z,Q,W,F);else if("add"===U.type||void 0===W){const V=d.fire.call(Z,Q,U.values[R],F);null==Q&&null!=V&&(Q=V,U.keys[R]=Q,B.outbound||rF(U.values[R],B.keyPath,Q))}else{const B=OR(W,U.values[R]),V=J.fire.call(Z,B,Q,W,F);if(V){const F=U.values[R];Object.keys(V).forEach((U=>{kF(F,U)?F[U]=V[U]:rF(F,U,V[U])}))}}return Z}));return Q.mutate(U).then((({failures:F,results:Q,numFailures:B,lastResult:V})=>{for(let B=0;B<R.length;++B){const V=Q?Q[B]:R[B],d=W[B];null==V?d.onerror&&d.onerror(F[B]):d.onsuccess&&d.onsuccess("put"===U.type&&l[B]?U.values[B]:V)}return{failures:F,results:Q,numFailures:B,lastResult:V}})).catch((U=>(W.forEach((F=>F.onerror&&F.onerror(U))),Promise.reject(U))))}))}function W(U,F,R){return Q.query({trans:U,values:!1,query:{index:B,range:F},limit:R}).then((({result:Q})=>l({type:"delete",keys:Q,trans:U}).then((B=>B.numFailures>0?Promise.reject(B.failures[0]):Q.length<R?{failures:[],numFailures:0,lastResult:void 0}:W(U,{...F,lower:Q[Q.length-1],lowerOpen:!0},R)))))}}};return R}})};function xR(U,F,Q){try{if(!F)return null;if(F.keys.length<U.length)return null;const B=[];for(let R=0,V=0;R<F.keys.length&&V<U.length;++R)0===sB(F.keys[R],U[V])&&(B.push(Q?OF(F.values[R]):F.values[R]),++V);return B.length===U.length?B:null}catch(U){return null}}const iR={stack:"dbcore",level:-1,create:U=>({table:F=>{const Q=U.table(F);return{...Q,getMany:U=>{if(!U.cache)return Q.getMany(U);const F=xR(U.keys,U.trans._cache,"clone"===U.cache);return F?iQ.resolve(F):Q.getMany(U).then((F=>(U.trans._cache={keys:U.keys,values:"clone"===U.cache?OF(F):F},F)))},mutate:U=>("add"!==U.type&&(U.trans._cache=null),Q.mutate(U))}}})};function wR(U){return!("from"in U)}const LR=function(U,F){if(!this){const F=new LR;return U&&"d"in U&&NF(F,U),F}NF(this,arguments.length?{d:1,from:U,to:arguments.length>1?F:U}:{d:0})};function sR(U,F,Q){const B=sB(F,Q);if(isNaN(B))return;if(B>0)throw RangeError();if(wR(U))return NF(U,{from:F,to:Q,d:1});const R=U.l,V=U.r;if(sB(Q,U.from)<0)return R?sR(R,F,Q):U.l={from:F,to:Q,d:1,l:null,r:null},uR(U);if(sB(F,U.to)>0)return V?sR(V,F,Q):U.r={from:F,to:Q,d:1,l:null,r:null},uR(U);sB(F,U.from)<0&&(U.from=F,U.l=null,U.d=V?V.d+1:1),sB(Q,U.to)>0&&(U.to=Q,U.r=null,U.d=U.l?U.l.d+1:1);const d=!U.r;R&&!U.l&&jR(U,R),V&&d&&jR(U,V)}function jR(U,F){wR(F)||function U(F,{from:Q,to:B,l:R,r:V}){sR(F,Q,B),R&&U(F,R),V&&U(F,V)}(U,F)}function IR(U){let F=wR(U)?null:{s:0,n:U};return{next(U){const Q=arguments.length>0;for(;F;)switch(F.s){case 0:if(F.s=1,Q)for(;F.n.l&&sB(U,F.n.from)<0;)F={up:F,n:F.n.l,s:1};else for(;F.n.l;)F={up:F,n:F.n.l,s:1};case 1:if(F.s=2,!Q||sB(U,F.n.to)<=0)return{value:F.n,done:!1};case 2:if(F.n.r){F.s=3,F={up:F,n:F.n.r,s:0};continue}case 3:F=F.up}return{done:!0}}}}function uR(U){var F,Q;const B=((null===(F=U.r)||void 0===F?void 0:F.d)||0)-((null===(Q=U.l)||void 0===Q?void 0:Q.d)||0),R=B>1?"r":B<-1?"l":"";if(R){const F="r"===R?"l":"r",Q={...U},B=U[R];U.from=B.from,U.to=B.to,U[R]=B[R],Q[R]=B[F],U[F]=Q,Q.d=KR(Q)}U.d=KR(U)}function KR({r:U,l:F}){return(U?F?Math.max(U.d,F.d):U.d:F?F.d:0)+1}TF(LR.prototype,{add(U){return jR(this,U),this},addKey(U){return sR(this,U,U),this},addKeys(U){return U.forEach((U=>sR(this,U,U))),this},[wF](){return IR(this)}});const gR={stack:"dbcore",level:0,create:U=>{const F=U.schema.name,Q=new LR(U.MIN_KEY,U.MAX_KEY);return{...U,table:B=>{const R=U.table(B),{schema:V}=R,{primaryKey:d}=V,{extractKey:J,outbound:l}=d,W={...R,mutate:U=>{const d=U.trans,J=d.mutatedParts||(d.mutatedParts={}),l=U=>{const Q=`idb://${F}/${B}/${U}`;return J[Q]||(J[Q]=new LR)},W=l(""),Z=l(":dels"),{type:n}=U;let[N,E]="deleteRange"===U.type?[U.range]:"delete"===U.type?[U.keys]:U.values.length<50?[[],U.values]:[];const S=U.trans._cache;return R.mutate(U).then((U=>{if(nF(N)){"delete"!==n&&(N=U.results),W.addKeys(N);const F=xR(N,S);F||"add"===n||Z.addKeys(N),(F||E)&&function(U,F,Q,B){function R(F){const R=U(F.name||"");function V(U){return null!=U?F.extractKey(U):null}const d=U=>F.multiEntry&&nF(U)?U.forEach((U=>R.addKey(U))):R.addKey(U);(Q||B).forEach(((U,F)=>{const R=Q&&V(Q[F]),J=B&&V(B[F]);0!==sB(R,J)&&(null!=R&&d(R),null!=J&&d(J))}))}F.indexes.forEach(R)}(l,V,F,E)}else if(N){const U={from:N.lower,to:N.upper};Z.add(U),W.add(U)}else W.add(Q),Z.add(Q),V.indexes.forEach((U=>l(U.name).add(Q)));return U}))}},Z=({query:{index:F,range:Q}})=>{var B,R;return[F,new LR(null!==(B=Q.lower)&&void 0!==B?B:U.MIN_KEY,null!==(R=Q.upper)&&void 0!==R?R:U.MAX_KEY)]},n={get:U=>[d,new LR(U.key)],getMany:U=>[d,(new LR).addKeys(U.keys)],count:Z,query:Z,openCursor:Z};return ZF(n).forEach((U=>{W[U]=function(V){const{subscr:d}=zQ;if(d){const W=U=>{const Q=`idb://${F}/${B}/${U}`;return d[Q]||(d[Q]=new LR)},Z=W(""),N=W(":dels"),[E,S]=n[U](V);if(W(E.name||"").add(S),!E.isPrimaryKey){if("count"!==U){const F="query"===U&&l&&V.values&&R.query({...V,values:!1});return R[U].apply(this,arguments).then((Q=>{if("query"===U){if(l&&V.values)return F.then((({result:U})=>(Z.addKeys(U),Q)));const U=V.values?Q.result.map(J):Q.result;V.values?Z.addKeys(U):N.addKeys(U)}else if("openCursor"===U){const U=Q,F=V.values;return U&&Object.create(U,{key:{get:()=>(N.addKey(U.primaryKey),U.key)},primaryKey:{get(){const F=U.primaryKey;return N.addKey(F),F}},value:{get:()=>(F&&Z.addKey(U.primaryKey),U.value)}})}return Q}))}N.add(Q)}}return R[U].apply(this,arguments)}})),W}}}};class fR{constructor(U,F){this._middlewares={},this.verno=0;const Q=fR.dependencies;this._options=F={addons:fR.addons,autoOpen:!0,indexedDB:Q.indexedDB,IDBKeyRange:Q.IDBKeyRange,...F},this._deps={indexedDB:F.indexedDB,IDBKeyRange:F.IDBKeyRange};const{addons:B}=F;this._dbSchema={},this._versions=[],this._storeNames=[],this._allTables={},this.idbdb=null,this._novip=this;const R={dbOpenError:null,isBeingOpened:!1,onReadyBeingFired:null,openComplete:!1,dbReadyResolve:WQ,dbReadyPromise:null,cancelOpen:WQ,openCanceller:null,autoSchema:!0,PR1398_maxLoop:3};var V;R.dbReadyPromise=new iQ((U=>{R.dbReadyResolve=U})),R.openCanceller=new iQ(((U,F)=>{R.cancelOpen=F})),this._state=R,this.name=U,this.on=XB(this,"populate","blocked","versionchange","close",{ready:[aQ,WQ]}),this.on.ready.subscribe=MF(this.on.ready.subscribe,(U=>(F,Q)=>{fR.vip((()=>{const B=this._state;if(B.openComplete)B.dbOpenError||iQ.resolve().then(F),Q&&U(F);else if(B.onReadyBeingFired)B.onReadyBeingFired.push(F),Q&&U(F);else{U(F);const B=this;Q||U((function U(){B.on.ready.unsubscribe(F),B.on.ready.unsubscribe(U)}))}}))})),this.Collection=(V=this,HB(uB.prototype,(function(U,F){this.db=V;let Q=vB,B=null;if(F)try{Q=F()}catch(U){B=U}const R=U._ctx,d=R.table,J=d.hook.reading.fire;this._ctx={table:d,index:R.index,isPrimKey:!R.index||d.schema.primKey.keyPath&&R.index===d.schema.primKey.name,range:Q,keysOnly:!1,dir:"next",unique:"",algorithm:null,filter:null,replayFilter:null,justLimit:!0,isMatch:null,offset:0,limit:1/0,error:B,or:R.or,valueMapper:J!==ZQ?J:null}}))),this.Table=function(U){return HB(yB.prototype,(function(F,Q,B){this.db=U,this._tx=B,this.name=F,this.schema=Q,this.hook=U._allTables[F]?U._allTables[F].hook:XB(null,{creating:[EQ,WQ],reading:[nQ,ZQ],updating:[kQ,WQ],deleting:[SQ,WQ]})}))}(this),this.Transaction=function(U){return HB(VR.prototype,(function(F,Q,B,R,V){this.db=U,this.mode=F,this.storeNames=Q,this.schema=B,this.chromeTransactionDurability=R,this.idbtrans=null,this.on=XB(this,"complete","error","abort"),this.parent=V||null,this.active=!0,this._reculock=0,this._blockedFuncs=[],this._resolve=null,this._reject=null,this._waitingFor=null,this._waitingQueue=null,this._spinCount=0,this._completion=new iQ(((U,F)=>{this._resolve=U,this._reject=F})),this._completion.then((()=>{this.active=!1,this.on.complete.fire()}),(U=>{var F=this.active;return this.active=!1,this.on.error.fire(U),this.parent?this.parent._reject(U):F&&this.idbtrans&&this.idbtrans.abort(),CB(U)}))}))}(this),this.Version=function(U){return HB(pR.prototype,(function(F){this.db=U,this._cfg={version:F,storesSource:null,dbschema:{},tables:{},contentUpgrade:null}}))}(this),this.WhereClause=function(U){return HB(FR.prototype,(function(F,Q,B){this.db=U,this._ctx={table:F,index:":id"===Q?null:Q,or:B};const R=U._deps.indexedDB;if(!R)throw new dQ.MissingAPI;this._cmp=this._ascending=R.cmp.bind(R),this._descending=(U,F)=>R.cmp(F,U),this._max=(U,F)=>R.cmp(U,F)>0?U:F,this._min=(U,F)=>R.cmp(U,F)<0?U:F,this._IDBKeyRange=U._deps.IDBKeyRange}))}(this),this.on("versionchange",(U=>{U.newVersion>0?console.warn(`Another connection wants to upgrade database '${this.name}'. Closing db now to resume the upgrade.`):console.warn(`Another connection wants to delete database '${this.name}'. Closing db now to resume the delete request.`),this.close()})),this.on("blocked",(U=>{!U.newVersion||U.newVersion<U.oldVersion?console.warn(`Dexie.delete('${this.name}') was blocked`):console.warn(`Upgrade '${this.name}' blocked by other connection holding version ${U.oldVersion/10}`)})),this._maxKey=WR(F.IDBKeyRange),this._createTransaction=(U,F,Q,B)=>new this.Transaction(U,F,Q,this._options.chromeTransactionDurability,B),this._fireOnBlocked=U=>{this.on("blocked").fire(U),MB.filter((U=>U.name===this.name&&U!==this&&!U._state.vcFired)).map((F=>F.on("versionchange").fire(U)))},this.use(zR),this.use(oR),this.use(gR),this.use(iR),this.vip=Object.create(this,{_vip:{value:!0}}),B.forEach((U=>U(this)))}version(U){if(isNaN(U)||U<.1)throw new dQ.Type("Given version is not a positive number");if(U=Math.round(10*U)/10,this.idbdb||this._state.isBeingOpened)throw new dQ.Schema("Cannot add version when database is open");this.verno=Math.max(this.verno,U);const F=this._versions;var Q=F.filter((F=>F._cfg.version===U))[0];return Q||(Q=new this.Version(U),F.push(Q),F.sort(hR),Q.stores({}),this._state.autoSchema=!1,Q)}_whenReady(U){return this.idbdb&&(this._state.openComplete||zQ.letThrough||this._vip)?U():new iQ(((U,F)=>{if(this._state.openComplete)return F(new dQ.DatabaseClosed(this._state.dbOpenError));if(!this._state.isBeingOpened){if(!this._options.autoOpen)return void F(new dQ.DatabaseClosed);this.open().catch(WQ)}this._state.dbReadyPromise.then(U,F)})).then(U)}use({stack:U,create:F,level:Q,name:B}){B&&this.unuse({stack:U,name:B});const R=this._middlewares[U]||(this._middlewares[U]=[]);return R.push({stack:U,create:F,level:null==Q?10:Q,name:B}),R.sort(((U,F)=>U.level-F.level)),this}unuse({stack:U,name:F,create:Q}){return U&&this._middlewares[U]&&(this._middlewares[U]=this._middlewares[U].filter((U=>Q?U.create!==Q:!!F&&U.name!==F))),this}open(){return vR(this)}_close(){const U=this._state,F=MB.indexOf(this);if(F>=0&&MB.splice(F,1),this.idbdb){try{this.idbdb.close()}catch(U){}this._novip.idbdb=null}U.dbReadyPromise=new iQ((F=>{U.dbReadyResolve=F})),U.openCanceller=new iQ(((F,Q)=>{U.cancelOpen=Q}))}close(){this._close();const U=this._state;this._options.autoOpen=!1,U.dbOpenError=new dQ.DatabaseClosed,U.isBeingOpened&&U.cancelOpen(U.dbOpenError)}delete(){const U=arguments.length>0,F=this._state;return new iQ(((Q,B)=>{const R=()=>{this.close();var U=this._deps.indexedDB.deleteDatabase(this.name);U.onsuccess=UB((()=>{!function({indexedDB:U,IDBKeyRange:F},Q){!YR(U)&&"__dbnames"!==Q&&mR(U,F).delete(Q).catch(WQ)}(this._deps,this.name),Q()})),U.onerror=QR(B),U.onblocked=this._fireOnBlocked};if(U)throw new dQ.InvalidArgument("Arguments not allowed in db.delete()");F.isBeingOpened?F.dbReadyPromise.then(R):R()}))}backendDB(){return this.idbdb}isOpen(){return null!==this.idbdb}hasBeenClosed(){const U=this._state.dbOpenError;return U&&"DatabaseClosed"===U.name}hasFailed(){return null!==this._state.dbOpenError}dynamicallyOpened(){return this._state.autoSchema}get tables(){return ZF(this._allTables).map((U=>this._allTables[U]))}transaction(){const U=yR.apply(this,arguments);return this._transaction.apply(this,U)}_transaction(U,F,Q){let B=zQ.trans;B&&B.db===this&&-1===U.indexOf("!")||(B=null);const R=-1!==U.indexOf("?");let V,d;U=U.replace("!","").replace("?","");try{if(d=F.map((U=>{var F=U instanceof this.Table?U.name:U;if("string"!=typeof F)throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");return F})),"r"==U||"readonly"===U)V="readonly";else{if("rw"!=U&&"readwrite"!=U)throw new dQ.InvalidArgument("Invalid transaction mode: "+U);V="readwrite"}if(B){if("readonly"===B.mode&&"readwrite"===V){if(!R)throw new dQ.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");B=null}B&&d.forEach((U=>{if(B&&-1===B.storeNames.indexOf(U)){if(!R)throw new dQ.SubTransaction("Table "+U+" not included in parent transaction.");B=null}})),R&&B&&!B.active&&(B=null)}}catch(U){return B?B._promise(null,((F,Q)=>{Q(U)})):CB(U)}const J=XR.bind(null,this,V,d,B,Q);return B?B._promise(V,J,"lock"):zQ.trans?kB(zQ.transless,(()=>this._whenReady(J))):this._whenReady(J)}table(U){if(!kF(this._allTables,U))throw new dQ.InvalidTable(`Table ${U} does not exist`);return this._allTables[U]}}const qR="undefined"!=typeof Symbol&&"observable"in Symbol?Symbol.observable:"@@observable";class PR{constructor(U){this._subscribe=U}subscribe(U,F,Q){return this._subscribe(U&&"function"!=typeof U?U:{next:U,error:F,complete:Q})}[qR](){return this}}function AR(U,F){return ZF(F).forEach((Q=>{jR(U[Q]||(U[Q]=new LR),F[Q])})),U}let _R;try{_R={indexedDB:WF.indexedDB||WF.mozIndexedDB||WF.webkitIndexedDB||WF.msIndexedDB,IDBKeyRange:WF.IDBKeyRange||WF.webkitIDBKeyRange}}catch(U){_R={indexedDB:null,IDBKeyRange:null}}const $R=fR;function UV(U){let F=FV;try{FV=!0,RR.storagemutated.fire(U)}finally{FV=F}}TF($R,{...lQ,delete:U=>new $R(U,{addons:[]}).delete(),exists:U=>new $R(U,{addons:[]}).open().then((U=>(U.close(),!0))).catch("NoSuchDatabaseError",(()=>!1)),getDatabaseNames(U){try{return function({indexedDB:U,IDBKeyRange:F}){return YR(U)?Promise.resolve(U.databases()).then((U=>U.map((U=>U.name)).filter((U=>"__dbnames"!==U)))):mR(U,F).toCollection().primaryKeys()}($R.dependencies).then(U)}catch(U){return CB(new dQ.MissingAPI)}},defineClass:()=>function(U){NF(this,U)},ignoreTransaction:U=>zQ.trans?kB(zQ.transless,U):U(),vip:GR,async:function(U){return function(){try{var F=bR(U.apply(this,arguments));return F&&"function"==typeof F.then?F:iQ.resolve(F)}catch(U){return CB(U)}}},spawn:function(U,F,Q){try{var B=bR(U.apply(Q,F||[]));return B&&"function"==typeof B.then?B:iQ.resolve(B)}catch(U){return CB(U)}},currentTransaction:{get:()=>zQ.trans||null},waitFor:function(U,F){const Q=iQ.resolve("function"==typeof U?$R.ignoreTransaction(U):U).timeout(F||6e4);return zQ.trans?zQ.trans.waitFor(Q):Q},Promise:iQ,debug:{get:()=>uF,set:U=>{KF(U,"dexie"===U?()=>!0:GB)}},derive:tF,extend:NF,props:TF,override:MF,Events:XB,on:RR,liveQuery:function(U){return new PR((F=>{const Q=IF(U);let B=!1,R={},V={};const d={get closed(){return B},unsubscribe:()=>{B=!0,RR.storagemutated.unsubscribe(Z)}};F.start&&F.start(d);let J=!1,l=!1;function W(){return ZF(V).some((U=>R[U]&&function(U,F){const Q=IR(F);let B=Q.next();if(B.done)return!1;let R=B.value;const V=IR(U);let d=V.next(R.from),J=d.value;for(;!B.done&&!d.done;){if(sB(J.from,R.to)<=0&&sB(J.to,R.from)>=0)return!0;sB(R.from,J.from)<0?R=(B=Q.next(J.from)).value:J=(d=V.next(R.from)).value}return!1}(R[U],V[U])))}const Z=U=>{AR(R,U),W()&&n()},n=()=>{if(J||B)return;R={};const N={},E=function(F){Q&&lB();const B=()=>JB(U,{subscr:F,trans:null}),R=zQ.trans?kB(zQ.transless,B):B();return Q&&R.then(WB,WB),R}(N);l||(RR("storagemutated",Z),l=!0),J=!0,Promise.resolve(E).then((U=>{J=!1,B||(W()?n():(R={},V=N,F.next&&F.next(U)))}),(U=>{J=!1,F.error&&F.error(U),d.unsubscribe()}))};return n(),d}))},extendObservabilitySet:AR,getByKeyPath:GF,setByKeyPath:rF,delByKeyPath:function(U,F){"string"==typeof F?rF(U,F,void 0):"length"in F&&[].map.call(F,(function(F){rF(U,F,void 0)}))},shallowClone:vF,deepClone:OF,getObjectDiff:OR,cmp:sB,asap:mF,minKey:-(1/0),addons:[],connections:MB,errnames:RQ,dependencies:_R,semVer:"3.2.2",version:"3.2.2".split(".").map((U=>parseInt(U))).reduce(((U,F,Q)=>U+F/Math.pow(10,2*Q)))}),$R.maxKey=WR($R.dependencies.IDBKeyRange),"undefined"!=typeof dispatchEvent&&"undefined"!=typeof addEventListener&&(RR("storagemutated",(U=>{if(!FV){let F;pB?(F=document.createEvent("CustomEvent"),F.initCustomEvent("x-storagemutated-1",!0,!0,U)):F=new CustomEvent("x-storagemutated-1",{detail:U}),FV=!0,dispatchEvent(F),FV=!1}})),addEventListener("x-storagemutated-1",(({detail:U})=>{FV||UV(U)})));let FV=!1;if("undefined"!=typeof BroadcastChannel){const U=new BroadcastChannel("x-storagemutated-1");RR("storagemutated",(F=>{FV||U.postMessage(F)})),U.onmessage=U=>{U.data&&UV(U.data)}}else if("undefined"!=typeof self&&"undefined"!=typeof navigator){RR("storagemutated",(U=>{try{FV||("undefined"!=typeof localStorage&&localStorage.setItem("x-storagemutated-1",JSON.stringify({trig:Math.random(),changedParts:U})),"object"==typeof self.clients&&[...self.clients.matchAll({includeUncontrolled:!0})].forEach((F=>F.postMessage({type:"x-storagemutated-1",changedParts:U}))))}catch(U){}})),"undefined"!=typeof addEventListener&&addEventListener("storage",(U=>{if("x-storagemutated-1"===U.key){const F=JSON.parse(U.newValue);F&&UV(F.changedParts)}}));const U=self.document&&navigator.serviceWorker;U&&U.addEventListener("message",(function({data:U}){U&&"x-storagemutated-1"===U.type&&UV(U.changedParts)}))}iQ.rejectionMapper=function(U,F){if(!U||U instanceof UQ||U instanceof TypeError||U instanceof SyntaxError||!U.name||!JQ[U.name])return U;var Q=new JQ[U.name](F||U.message,U);return"stack"in U&&hF(Q,"stack",{get:function(){return this.inner.stack}}),Q},KF(uF,GB);const QV=new class extends fR{constructor(){super("omnisearch/cache/"+app.appId),this.version(5).stores({pdf:"path, hash, size",searchHistory:"++id",minisearch:"date"})}};const BV=new class{constructor(){this.documentsCache=new Map,this.nextQueryIsEmpty=!1}async addToSearchHistory(U){if(!U)return void(this.nextQueryIsEmpty=!0);this.nextQueryIsEmpty=!1;let F=await QV.searchHistory.toArray();F=F.filter((F=>F.query!==U)).reverse(),F.unshift({query:U}),F=F.slice(0,10),await QV.searchHistory.clear(),await QV.searchHistory.bulkAdd(F)}async getSearchHistory(){const U=(await QV.searchHistory.toArray()).reverse().map((U=>U.query));return this.nextQueryIsEmpty&&U.unshift(""),U}async updateDocument(U,F){this.documentsCache.set(U,F)}deleteDocument(U){this.documentsCache.delete(U)}getDocument(U){return this.documentsCache.get(U)}getNonExistingNotesFromMemCache(){return Object.values(this.documentsCache).filter((U=>U.doesNotExist))}isDocumentOutdated(U){const F=this.getDocument(U.path);return!F||F.mtime!==U.stat.mtime}async getMinisearchCache(){const U=(await QV.minisearch.toArray())[0];if(!U)return null;try{return a.loadJSON(U.data,RV)}catch(U){return console.error("Omnisearch - Error while loading Minisearch cache"),console.error(U),null}}async writeMinisearchCache(U){await QV.minisearch.clear(),await QV.minisearch.add({date:(new Date).toISOString(),data:JSON.stringify(U.toJSON())}),console.log("Omnisearch - Search cache written")}},RV={tokenize:U=>{const F=U.split(o),Q=app.plugins.plugins["cm-chs-patch"];return Q?F.flatMap((U=>y.test(U)?Q.cut(U):[U])):F},processTerm:U=>(fU.ignoreDiacritics?dF(U):U).toLowerCase(),idField:"path",fields:["basename","aliases","content","headings1","headings2","headings3"],storeFields:["tags"]};class VV{constructor(){this.minisearch=new a(RV)}static getEngine(){return this.engine||(this.engine=new VV),this.engine}static getTmpEngine(){return this.tmpEngine||(this.tmpEngine=new VV),this.tmpEngine}static async initFromCache(){try{const U=await BV.getMinisearchCache();U&&(this.getEngine().minisearch=U)}catch(U){console.error(U)}}static loadTmpDataIntoMain(){const U=this.getTmpEngine().minisearch.toJSON();this.getEngine().minisearch=a.loadJS(U,RV)}static clearTmp(){this.getTmpEngine().minisearch=new a(RV)}async search(U,F={fuzzy:.1,prefix:!1}){if(!U.segmentsToStr())return[];let Q=this.minisearch.search(U.segmentsToStr(),{prefix:U=>F.prefix||U.length>4,fuzzy:F.fuzzy,combineWith:"AND",boost:{basename:fU.weightBasename,aliases:fU.weightBasename,headings1:fU.weightH1,headings2:fU.weightH2,headings3:fU.weightH3}});fU.respectExcluded&&Q.forEach((U=>{app.metadataCache.isUserIgnored&&app.metadataCache.isUserIgnored(U.id)&&(U.score/=10)}));const B=U.getExactTerms();B.length&&(Q=Q.filter((U=>{const F=BV.getDocument(U.id)?.path.toLowerCase()??"",Q=BF(BV.getDocument(U.id)?.content??"").toLowerCase();return B.every((U=>Q.includes(U)||F.includes(U)))})));const R=U.exclusions;return R.length&&(Q=Q.filter((U=>{const F=BF(BV.getDocument(U.id)?.content??"").toLowerCase();return R.every((U=>!F.includes(U.value)))}))),Q}getMatches(U,F,Q){let B=null;const R=[];let V=0;for(;null!==(B=F.exec(U))&&!(++V>=100);){const U=B[0];U&&R.push({match:U,offset:B.index})}const d=U.toLowerCase().indexOf(Q.segmentsToStr());return d>-1&&R.unshift({offset:d,match:Q.segmentsToStr()}),R}async getSuggestions(U,F){let Q=await this.search(U);if(0==Q.length&&fU.retryWhenZeroResult&&(Q=await this.search(U,{fuzzy:.2,prefix:!0})),!Q.length)return[];const B=U.segments.filter((U=>U.value.startsWith("#"))).map((U=>U.value));if(F?.singleFilePath){const U=Q.find((U=>U.id===F.singleFilePath));Q=U?[U]:[]}else{Q=Q.slice(0,50);for(const U of B)for(const F of Q)(F.tags??[]).includes(U)&&(F.score*=100)}return Q.map((F=>{let Q=BV.getDocument(F.id);Q||(Q={content:"",basename:F.id,path:F.id}),U.segments.forEach((U=>{U.value=U.value.replace(/^#/,"")}));const R=[...Object.keys(F.match),...U.segments.filter((U=>U.exact)).map((U=>U.value)),...B].filter((U=>U.length>1)),V=this.getMatches(Q.content,$U(R),U);return{score:F.score,foundWords:R,matches:V,...Q}}))}async addAllToMinisearch(U){await this.minisearch.addAllAsync(U)}addSingleToMinisearch(U){this.minisearch.add(U)}removeFromMinisearch(U){this.minisearch.remove(U)}async writeToCache(){await BV.writeMinisearchCache(this.minisearch)}}function dV(U){let F,Q,B,R,V,d,J;const l=U[6].default,W=u(l,U,U[5],null);return{c(){F=UU("div"),Q=UU("div"),B=UU("input"),R=QU(),W&&W.c(),VU(B,"class","prompt-input"),VU(B,"placeholder",U[0]),VU(B,"spellcheck","false"),VU(B,"type","text"),VU(Q,"class","omnisearch-input-field"),VU(F,"class","omnisearch-input-container")},m(l,Z){A(l,F,Z),P(F,Q),P(Q,B),U[7](B),JU(B,U[1]),P(F,R),W&&W.m(F,null),V=!0,d||(J=[RU(B,"input",U[8]),RU(B,"compositionend",U[9]),RU(B,"compositionstart",U[10]),RU(B,"input",U[3])],d=!0)},p(U,[F]){(!V||1&F)&&VU(B,"placeholder",U[0]),2&F&&B.value!==U[1]&&JU(B,U[1]),W&&W.p&&(!V||32&F)&&f(W,l,U,U[5],V?g(l,U[5],F,null):q(U[5]),null)},i(U){V||(HU(W,U),V=!0)},o(U){zU(W,U),V=!1},d(Q){Q&&_(F),U[7](null),W&&W.d(Q),d=!1,L(J)}}}function JV(F,Q,B){let R,{$$slots:V={},$$scope:d}=Q,{initialValue:J=""}=Q,{placeholder:l=""}=Q,W="";const Z=kU();const n=U.debounce((()=>{BV.addToSearchHistory(""),Z("input",W)}),200);return F.$$set=U=>{"initialValue"in U&&B(4,J=U.initialValue),"placeholder"in U&&B(0,l=U.placeholder),"$$scope"in U&&B(5,d=U.$$scope)},F.$$.update=()=>{16&F.$$.dirty&&J&&(B(1,W=J),async function(){await MU(),R.focus(),await MU(),R.select(),await MU()}())},[l,W,R,n,J,d,V,function(U){hU[U?"unshift":"push"]((()=>{R=U,B(2,R)}))},function(){W=this.value,B(1,W),B(4,J)},U=>O(!1),U=>O(!0)]}VV.isIndexing=sU(!0);class lV extends wU{constructor(U){super(),iU(this,U,JV,dV,j,{initialValue:4,placeholder:0})}}function WV(U){let F,Q,B,R;const V=U[1].default,d=u(V,U,U[0],null);return{c(){F=UU("div"),d&&d.c(),VU(F,"class","prompt-results")},m(U,V){A(U,F,V),d&&d.m(F,null),Q=!0,B||(R=RU(F,"mousedown",ZV),B=!0)},p(U,[F]){d&&d.p&&(!Q||1&F)&&f(d,V,U,U[0],Q?g(V,U[0],F,null):q(U[0]),null)},i(U){Q||(HU(d,U),Q=!0)},o(U){zU(d,U),Q=!1},d(U){U&&_(F),d&&d.d(U),B=!1,R()}}}const ZV=U=>U.preventDefault();function nV(U,F,Q){let{$$slots:B={},$$scope:R}=F;return U.$$set=U=>{"$$scope"in U&&Q(0,R=U.$$scope)},[R,B]}class NV extends wU{constructor(U){super(),iU(this,U,nV,WV,j,{})}}async function EV(F,Q=!1){const B=$U(F.foundWords);B.exec(F.content);const R=B.lastIndex;let V=!1;app.workspace.iterateAllLeaves((B=>{B.view instanceof U.MarkdownView&&!Q&&B.getViewState().state?.file===F.path&&B.getViewState()?.pinned&&(app.workspace.setActiveLeaf(B,{focus:!0}),V=!0)})),V||await app.workspace.openLinkText(F.path,"",Q);const d=app.workspace.getActiveViewOfType(U.MarkdownView);if(!d)return;const J=d.editor.offsetToPos(R);J.ch=0,d.editor.setCursor(J),d.editor.scrollIntoView({from:{line:J.line-10,ch:0},to:{line:J.line+10,ch:0}})}function SV(U){return U.split(/[\^#]+/)[0]}function kV(U){let F;return{c(){F=UU("span"),F.innerHTML='<svg viewBox="0 0 100 100" class="add-note-glyph" width="16" height="16"><path fill="currentColor" stroke="currentColor" d="M23.3,6.7c-3.7,0-6.7,3-6.7,6.7v73.3c0,3.7,3,6.7,6.7,6.7h28.4c-3.2-4.8-5.1-10.5-5.1-16.7c0-16.6,13.4-30,30-30 c2.3,0,4.5,0.3,6.7,0.8V31.7c0-0.9-0.3-1.7-1-2.4L60.7,7.6c-0.6-0.6-1.5-1-2.4-1L23.3,6.7z M56.7,13L77,33.3H60 c-1.8,0-3.3-1.5-3.3-3.3L56.7,13z M76.7,53.3c-12.9,0-23.3,10.4-23.3,23.3S63.8,100,76.7,100S100,89.6,100,76.7 S89.6,53.3,76.7,53.3z M76.7,63.3c1.8,0,3.3,1.5,3.3,3.3v6.7h6.7c1.8,0,3.3,1.5,3.3,3.3c0,1.8-1.5,3.3-3.3,3.3H80v6.7 c0,1.8-1.5,3.3-3.3,3.3c-1.8,0-3.3-1.5-3.3-3.3V80h-6.7c-1.8,0-3.3-1.5-3.3-3.3s1.5-3.3,3.3-3.3h6.7v-6.7 C73.3,64.8,74.8,63.3,76.7,63.3L76.7,63.3z"></path></svg>',VU(F,"class","suggestion-flair"),VU(F,"aria-label","Not created yet, select to create")},m(U,Q){A(U,F,Q)},p:x,i:x,o:x,d(U){U&&_(F)}}}function TV(U){return[]}class aV extends wU{constructor(U){super(),iU(this,U,TV,kV,j,{})}}function hV(U){let F,Q;return F=new aV({}),{c(){OU(F.$$.fragment)},m(U,B){oU(F,U,B),Q=!0},i(U){Q||(HU(F.$$.fragment,U),Q=!0)},o(U){zU(F.$$.fragment,U),Q=!1},d(U){xU(F,U)}}}function tV(U){let F,Q,B,R,V,d=U[2]&&hV();const J=U[4].default,l=u(J,U,U[3],null);return{c(){F=UU("div"),d&&d.c(),Q=QU(),l&&l.c(),VU(F,"data-result-id",U[0]),VU(F,"class","suggestion-item omnisearch-result"),WU(F,"is-selected",U[1])},m(J,W){A(J,F,W),d&&d.m(F,null),P(F,Q),l&&l.m(F,null),B=!0,R||(V=[RU(F,"mousemove",U[5]),RU(F,"click",U[6]),RU(F,"auxclick",U[7])],R=!0)},p(U,[R]){U[2]?d?4&R&&HU(d,1):(d=hV(),d.c(),HU(d,1),d.m(F,Q)):d&&(yU(),zU(d,1,1,(()=>{d=null})),XU()),l&&l.p&&(!B||8&R)&&f(l,J,U,U[3],B?g(J,U[3],R,null):q(U[3]),null),(!B||1&R)&&VU(F,"data-result-id",U[0]),(!B||2&R)&&WU(F,"is-selected",U[1])},i(U){B||(HU(d),HU(l,U),B=!0)},o(U){zU(d),zU(l,U),B=!1},d(U){U&&_(F),d&&d.d(),l&&l.d(U),R=!1,L(V)}}}function CV(U,F,Q){let{$$slots:B={},$$scope:R}=F,{id:V}=F,{selected:d=!1}=F,{glyph:J=!1}=F;return U.$$set=U=>{"id"in U&&Q(0,V=U.id),"selected"in U&&Q(1,d=U.selected),"glyph"in U&&Q(2,J=U.glyph),"$$scope"in U&&Q(3,R=U.$$scope)},[V,d,J,R,B,function(F){TU.call(this,U,F)},function(F){TU.call(this,U,F)},function(F){TU.call(this,U,F)}]}class DV extends wU{constructor(U){super(),iU(this,U,CV,tV,j,{id:0,selected:1,glyph:2})}}function eV(U){let F,Q,B,R,V=U[1].matches.length+"",d=U[1].matches.length>1?"matches":"match";return{c(){F=UU("span"),Q=FU(V),B=FU(" "),R=FU(d),VU(F,"class","omnisearch-result__counter")},m(U,V){A(U,F,V),P(F,Q),P(F,B),P(F,R)},p(U,F){2&F&&V!==(V=U[1].matches.length+"")&&dU(Q,V),2&F&&d!==(d=U[1].matches.length>1?"matches":"match")&&dU(R,d)},d(U){U&&_(F)}}}function cV(U){let F,Q=U[4].replace(U[5],AU)+"";return{c(){F=UU("div"),VU(F,"class","omnisearch-result__body")},m(U,B){A(U,F,B),F.innerHTML=Q},p(U,B){48&B&&Q!==(Q=U[4].replace(U[5],AU)+"")&&(F.innerHTML=Q)},d(U){U&&_(F)}}}function MV(U){let F,Q,B,R,V,d=U[2].replace(U[5],AU)+"",J=U[1].matches.length>0&&eV(U),l=U[6]&&cV(U);return{c(){F=UU("div"),Q=UU("span"),B=QU(),J&&J.c(),R=QU(),l&&l.c(),V=BU(),VU(Q,"class","omnisearch-result__title")},m(U,W){A(U,F,W),P(F,Q),Q.innerHTML=d,P(F,B),J&&J.m(F,null),A(U,R,W),l&&l.m(U,W),A(U,V,W)},p(U,B){36&B&&d!==(d=U[2].replace(U[5],AU)+"")&&(Q.innerHTML=d),U[1].matches.length>0?J?J.p(U,B):(J=eV(U),J.c(),J.m(F,null)):J&&(J.d(1),J=null),U[6]?l?l.p(U,B):(l=cV(U),l.c(),l.m(V.parentNode,V)):l&&(l.d(1),l=null)},d(U){U&&_(F),J&&J.d(),U&&_(R),l&&l.d(U),U&&_(V)}}}function pV(U){let F,Q;return F=new DV({props:{id:U[1].path,selected:U[0],glyph:U[3],$$slots:{default:[MV]},$$scope:{ctx:U}}}),F.$on("mousemove",U[7]),F.$on("click",U[8]),{c(){OU(F.$$.fragment)},m(U,B){oU(F,U,B),Q=!0},p(U,[Q]){const B={};2&Q&&(B.id=U[1].path),1&Q&&(B.selected=U[0]),8&Q&&(B.glyph=U[3]),630&Q&&(B.$$scope={dirty:Q,ctx:U}),F.$set(B)},i(U){Q||(HU(F.$$.fragment,U),Q=!0)},o(U){zU(F.$$.fragment,U),Q=!1},d(U){xU(F,U)}}}function mV(U,F,Q){let B,R,V,d,J;I(U,jU,(U=>Q(6,J=U)));let{selected:l=!1}=F,{note:W}=F;return U.$$set=U=>{"selected"in U&&Q(0,l=U.selected),"note"in U&&Q(1,W=U.note)},U.$$.update=()=>{2&U.$$.dirty&&Q(5,B=$U(W.foundWords)),2&U.$$.dirty&&Q(4,R=QF(W.content,W.matches[0]?.offset??-1)),2&U.$$.dirty&&Q(3,V=BV.getDocument(W.path)?.doesNotExist),2&U.$$.dirty&&Q(2,d=fU.showShortName?W.basename:W.path)},[l,W,d,V,R,B,J,function(F){TU.call(this,U,F)},function(F){TU.call(this,U,F)}]}class YV extends wU{constructor(U){super(),iU(this,U,mV,pV,j,{selected:0,note:1})}}
/*!
 * search-query-parser.js
 * Original: https://github.com/nepsilon/search-query-parser
 * Modified by Simon Cambier
 * Copyright(c) 2014-2019
 * MIT Licensed
 */class GV{constructor(U=""){this.segments=[],this.exclusions=[],fU.ignoreDiacritics&&(U=dF(U));const F=function(U,F){F?F.offsets=void 0===F.offsets||F.offsets:F={offsets:!0,tokenize:!0},U||(U="");const Q={text:[],offsets:[],exclude:{text:[]}};F.offsets&&(Q.offsets=[]);const B={text:[]},R=[],V=/(\S+:'(?:[^'\\]|\\.)*')|(\S+:"(?:[^"\\]|\\.)*")|(-?"(?:[^"\\]|\\.)*")|(-?'(?:[^'\\]|\\.)*')|\S+|\S+:\S+/g;let d,J,l=0;for(;null!==(d=V.exec(U))&&!(++l>=100);){let U=d[0];const F=U.indexOf(":");if(-1!==F){const Q=U.slice(0,F);let B=U.slice(F+1);B=(B+"").replace(/\\(.?)/g,(function(U,F){switch(F){case"\\":return"\\";case"0":return"\0";case"":return"";default:return F}})),R.push({keyword:Q,value:B,offsetStart:d.index,offsetEnd:d.index+U.length})}else{let F=!1;"-"===U[0]&&(F=!0,U=U.slice(1)),U=(U+"").replace(/\\(.?)/g,(function(U,F){switch(F){case"\\":return"\\";case"0":return"\0";case"":return"";default:return F}})),F?B.text.push(U):R.push({text:U,offsetStart:d.index,offsetEnd:d.index+U.length})}}for(R.reverse();J=R.pop();)if(J.text)Q.text.push(J.text),F.offsets&&Q.offsets.push(J);else if(J.keyword){let U=J.keyword;F.keywords=F.keywords||[];let R=!1,V=!1;if(/^-/.test(U)){if("-"===U[0]){const Q=U.slice(1);R=!(-1===F.keywords.indexOf(Q)),R&&(U=Q,V=!0)}}else R=!(-1===F.keywords.indexOf(U));F.ranges=F.ranges||[];const d=!(-1===F.ranges.indexOf(U));if(R){F.offsets&&Q.offsets.push({keyword:U,value:J.value,offsetStart:V?J.offsetStart+1:J.offsetStart,offsetEnd:J.offsetEnd});const R=J.value;if(R.length){const d=R.split(",");V?B[U]?B[U]instanceof Array?d.length>1?B[U]=B[U].concat(d):B[U].push(R):(B[U]=[B[U]],B[U].push(R)):d.length>1?B[U]=d:F.alwaysArray?B[U]=[R]:B[U]=R:Q[U]?Q[U]instanceof Array?d.length>1?Q[U]=Q[U].concat(d):Q[U].push(R):(Q[U]=[Q[U]],Q[U].push(R)):d.length>1?Q[U]=d:F.alwaysArray?Q[U]=[R]:Q[U]=R}}else if(d){F.offsets&&Q.offsets.push(J);const B=J.value,R=B.split("-");Q[U]={},2===R.length?(Q[U].from=R[0],Q[U].to=R[1]):Q[U].from=B}else{const U=J.keyword+":"+J.value;Q.text.push(U),F.offsets&&Q.offsets.push({text:U,offsetStart:J.offsetStart,offsetEnd:J.offsetEnd})}}return Q.exclude=B,Q}(U.toLowerCase(),{tokenize:!0});this.exclusions=F.exclude.text.map(this.formatToken).filter((U=>!!U.value)),this.segments=F.text.reduce(((U,F)=>{const Q=this.formatToken(F);return Q.value&&U.push(Q),U}),[])}segmentsToStr(){return this.segments.map((({value:U})=>U)).join(" ")}getExactTerms(){return this.segments.filter((({exact:U})=>U)).map((({value:U})=>U))}formatToken(U){const F=function(U){return U.replace(b,"")}(U);return{value:F,exact:F!==U}}}class rV{value;next;constructor(U){this.value=U}}class vV{#U;#F;#Q;constructor(){this.clear()}enqueue(U){const F=new rV(U);this.#U?(this.#F.next=F,this.#F=F):(this.#U=F,this.#F=F),this.#Q++}dequeue(){const U=this.#U;if(U)return this.#U=this.#U.next,this.#Q--,U.value}clear(){this.#U=void 0,this.#F=void 0,this.#Q=0}get size(){return this.#Q}*[Symbol.iterator](){let U=this.#U;for(;U;)yield U.value,U=U.next}}function bV(U,F,Q){var B=void 0===F?null:F,R=function(U,F){var Q=atob(U);if(F){for(var B=new Uint8Array(Q.length),R=0,V=Q.length;R<V;++R)B[R]=Q.charCodeAt(R);return String.fromCharCode.apply(null,new Uint16Array(B.buffer))}return Q}(U,void 0!==Q&&Q),V=R.indexOf("\n",10)+1,d=R.substring(V)+(B?"//# sourceMappingURL="+B:""),J=new Blob([d],{type:"application/javascript"});return URL.createObjectURL(J)}var yV,XV,HV,zV,OV=(yV="",XV=null,HV=!1,function(U){return zV=zV||bV(yV,XV,HV),new Worker(zV,U)});class oV{constructor(U){this.worker=U,this.running=!1}static getWorker(){const U=oV.pool.find((U=>!U.running));if(U)return U;const F=new oV(new OV({name:"PDF Text Extractor"}));return oV.pool.push(F),F}async run(U){return new Promise(((F,Q)=>{this.running=!0;const B=setTimeout((()=>{this.worker.terminate(),console.warn("Omnisearch - Worker timeout"),Q("timeout"),this.running=!1}),12e4);this.worker.postMessage(U),this.worker.onmessage=U=>{clearTimeout(B),F(U),this.running=!1}}))}}oV.pool=[];const xV=new class{async getPdfText(Q){const B=await QV.pdf.get({path:Q.path,size:Q.stat.size});if(B)return B.text;const R=new Uint8Array(await app.vault.readBinary(Q)),V=function(Q){return U.Platform.isMobileApp?PU.exports.md5(Q.toString()):F.createHash("md5").update(Q).digest("hex")}(R),d=await QV.pdf.get(V);if(d)return d.text;const J=oV.getWorker();return new Promise((async(U,F)=>{try{const F=(await J.run({data:R,name:Q.basename})).data.text.replace(/\n/g," ").replace(/ +/g," ").trim();QV.pdf.add({hash:V,text:F,path:Q.path,size:Q.stat.size}).then((()=>{U(F)}))}catch(F){QV.pdf.add({hash:V,text:"",path:Q.path,size:Q.stat.size}).then((()=>{U("")}))}}))}async cleanCache(){QV.pdf.each((async U=>{await app.vault.adapter.exists(U.path)||console.log(U.path+" does not exist")}))}};async function iV(U){let F;if(lF(U.path))F=dF(await app.vault.cachedRead(U));else{if(!U.path.endsWith(".pdf"))throw new Error("Invalid file: "+U.path);F=dF(await xV.getPdfText(U))}F=dF(F);const Q=app.metadataCache.getFileCache(U);if(Q?.frontmatter?.["excalidraw-plugin"]){const U=Q.sections?.filter((U=>"comment"===U.type))??[];for(const{start:Q,end:B}of U.map((U=>U.position)))F=F.substring(0,Q.offset-1)+F.substring(B.offset)}if(Q){const F=function(U,F){return(F.links??[]).map((F=>{const Q=SV(F.link);return app.metadataCache.getFirstLinkpathDest(Q,U.path)?"":F.link})).filter((U=>!!U))}(U,Q);for(const Q of F.filter((U=>!BV.getDocument(U))))sV(Q,U.path)}return{basename:dF(U.basename),content:F,path:U.path,mtime:U.stat.mtime,tags:VF(Q),aliases:RF(Q).join(""),headings1:Q?UF(Q,1).join(" "):"",headings2:Q?UF(Q,2).join(" "):"",headings3:Q?UF(Q,3).join(" "):""}}const wV=function(U){if(!Number.isInteger(U)&&U!==Number.POSITIVE_INFINITY||!(U>0))throw new TypeError("Expected `concurrency` to be a number from 1 and up");const F=new vV;let Q=0;const B=async(U,B,R)=>{Q++;const V=(async()=>U(...R))();B(V);try{await V}catch{}Q--,F.size>0&&F.dequeue()()},R=(R,...V)=>new Promise((d=>{((R,V,d)=>{F.enqueue(B.bind(void 0,R,V,d)),(async()=>{await Promise.resolve(),Q<U&&F.size>0&&F.dequeue()()})()})(R,d,V)}));return Object.defineProperties(R,{activeCount:{get:()=>Q},pendingCount:{get:()=>F.size},clearQueue:{value:()=>{F.clear()}}}),R}(fU.backgroundProcesses);async function LV(F){if(F instanceof U.TFile&&JF(F.path)){BV.getDocument(F.path)?.doesNotExist&&jV(F.path);try{if(BV.getDocument(F.path))throw new Error(`${F.basename} is already indexed`);const U=await iV(F);VV.getEngine().addSingleToMinisearch(U),await BV.updateDocument(U.path,U)}catch(U){console.error(U)}}}function sV(U,F){const Q=(U=SV(U))+(U.endsWith(".md")?"":".md");if(BV.getDocument(Q))return;const B={path:Q,basename:U,mtime:0,content:"",tags:[],aliases:"",headings1:"",headings2:"",headings3:"",doesNotExist:!0,parent:F};VV.getEngine().addSingleToMinisearch(B),BV.updateDocument(Q,B)}function jV(U){if(!JF(U))return void console.info(`"${U}" is not an indexable file`);const F=BV.getDocument(U);F?(VV.getEngine().removeFromMinisearch(F),BV.deleteDocument(U)):console.warn(`Omnisearch - Note not found under path ${U}`)}const IV=new Set;function uV(U,F,Q){const B=U.slice();return B[26]=F[Q],B[28]=Q,B}function KV(U){let F,Q=fU.showCreateButton&&function(U){let F,Q,B;return{c(){F=UU("button"),F.textContent="Create note"},m(R,V){A(R,F,V),Q||(B=RU(F,"click",U[7]),Q=!0)},p:x,d(U){U&&_(F),Q=!1,B()}}}(U);return{c(){Q&&Q.c(),F=BU()},m(U,B){Q&&Q.m(U,B),A(U,F,B)},p(U,F){fU.showCreateButton&&Q.p(U,F)},d(U){Q&&Q.d(U),U&&_(F)}}}function gV(U){let F;return{c(){F=UU("div"),F.textContent="⏳ Omnisearch indexing is currently in progress",lU(F,"text-align","center"),lU(F,"color","var(--text-accent)"),lU(F,"margin-top","10px")},m(U,Q){A(U,F,Q)},d(U){U&&_(F)}}}function fV(U){let F,Q;return F=new YV({props:{selected:U[28]===U[1],note:U[26]}}),F.$on("mousemove",(function(...F){return U[10](U[28],...F)})),F.$on("click",U[6]),{c(){OU(F.$$.fragment)},m(U,B){oU(F,U,B),Q=!0},p(Q,B){U=Q;const R={};2&B&&(R.selected=U[28]===U[1]),8&B&&(R.note=U[26]),F.$set(R)},i(U){Q||(HU(F.$$.fragment,U),Q=!0)},o(U){zU(F.$$.fragment,U),Q=!1},d(U){xU(F,U)}}}function qV(U){let F;return{c(){F=UU("div"),F.textContent="We found 0 result for your search here.",lU(F,"text-align","center")},m(U,Q){A(U,F,Q)},d(U){U&&_(F)}}}function PV(U){let F,Q,B,R=U[3],V=[];for(let F=0;F<R.length;F+=1)V[F]=fV(uV(U,R,F));const d=U=>zU(V[U],1,1,(()=>{V[U]=null}));let J=!U[3].length&&U[2]&&qV();return{c(){for(let U=0;U<V.length;U+=1)V[U].c();F=QU(),J&&J.c(),Q=BU()},m(U,R){for(let F=0;F<V.length;F+=1)V[F].m(U,R);A(U,F,R),J&&J.m(U,R),A(U,Q,R),B=!0},p(U,B){if(74&B){let Q;for(R=U[3],Q=0;Q<R.length;Q+=1){const d=uV(U,R,Q);V[Q]?(V[Q].p(d,B),HU(V[Q],1)):(V[Q]=fV(d),V[Q].c(),HU(V[Q],1),V[Q].m(F.parentNode,F))}for(yU(),Q=R.length;Q<V.length;Q+=1)d(Q);XU()}!U[3].length&&U[2]?J||(J=qV(),J.c(),J.m(Q.parentNode,Q)):J&&(J.d(1),J=null)},i(U){if(!B){for(let U=0;U<R.length;U+=1)HU(V[U]);B=!0}},o(U){V=V.filter(Boolean);for(let U=0;U<V.length;U+=1)zU(V[U]);B=!1},d(U){$(V,U),U&&_(F),J&&J.d(U),U&&_(Q)}}}function AV(F){let Q,B,R,V,d,J,l,W,Z,n,N,E,S,k,T,a,h,t,C,D,e,c,M,p,m,Y,G,r,v,b,y,X,H;Q=new lV({props:{initialValue:F[0],placeholder:"Omnisearch - Vault",$$slots:{default:[KV]},$$scope:{ctx:F}}}),Q.$on("input",F[9]);let z=F[4]&&gV();return V=new NV({props:{$$slots:{default:[PV]},$$scope:{ctx:F}}}),{c(){OU(Q.$$.fragment),B=QU(),z&&z.c(),R=QU(),OU(V.$$.fragment),d=QU(),J=UU("div"),l=UU("div"),l.innerHTML='<span class="prompt-instruction-command">↑↓</span><span>to navigate</span>',W=QU(),Z=UU("div"),Z.innerHTML='<span class="prompt-instruction-command">alt ↑↓</span> \n    <span>to cycle history</span>',n=QU(),N=UU("div"),N.innerHTML='<span class="prompt-instruction-command">↵</span><span>to open</span>',E=QU(),S=UU("div"),S.innerHTML='<span class="prompt-instruction-command">↹</span> \n    <span>to switch to In-File Search</span>',k=QU(),T=UU("br"),a=QU(),h=UU("div"),t=UU("span"),t.textContent=(U.Platform.isMacOS?"⌘":"ctrl")+" ↵",C=QU(),D=UU("span"),D.textContent="to open in a new pane",e=QU(),c=UU("div"),c.innerHTML='<span class="prompt-instruction-command">shift ↵</span> \n    <span>to create</span>',M=QU(),p=UU("div"),p.innerHTML='<span class="prompt-instruction-command">ctrl shift ↵</span> \n    <span>to create in a new pane</span>',m=QU(),Y=UU("br"),G=QU(),r=UU("div"),r.innerHTML='<span class="prompt-instruction-command">alt ↵</span> \n    <span>to insert a link</span>',v=QU(),b=UU("div"),b.innerHTML='<span class="prompt-instruction-command">ctrl+h</span> \n    <span>to toggle excerpt</span>',y=QU(),X=UU("div"),X.innerHTML='<span class="prompt-instruction-command">esc</span><span>to close</span>',VU(l,"class","prompt-instruction"),VU(Z,"class","prompt-instruction"),VU(N,"class","prompt-instruction"),VU(S,"class","prompt-instruction"),VU(t,"class","prompt-instruction-command"),VU(h,"class","prompt-instruction"),VU(c,"class","prompt-instruction"),VU(p,"class","prompt-instruction"),VU(r,"class","prompt-instruction"),VU(b,"class","prompt-instruction"),VU(X,"class","prompt-instruction"),VU(J,"class","prompt-instructions")},m(U,F){oU(Q,U,F),A(U,B,F),z&&z.m(U,F),A(U,R,F),oU(V,U,F),A(U,d,F),A(U,J,F),P(J,l),P(J,W),P(J,Z),P(J,n),P(J,N),P(J,E),P(J,S),P(J,k),P(J,T),P(J,a),P(J,h),P(h,t),P(h,C),P(h,D),P(J,e),P(J,c),P(J,M),P(J,p),P(J,m),P(J,Y),P(J,G),P(J,r),P(J,v),P(J,b),P(J,y),P(J,X),H=!0},p(U,[F]){const B={};1&F&&(B.initialValue=U[0]),536870912&F&&(B.$$scope={dirty:F,ctx:U}),Q.$set(B),U[4]?z||(z=gV(),z.c(),z.m(R.parentNode,R)):z&&(z.d(1),z=null);const d={};536870926&F&&(d.$$scope={dirty:F,ctx:U}),V.$set(d)},i(U){H||(HU(Q.$$.fragment,U),HU(V.$$.fragment,U),H=!0)},o(U){zU(Q.$$.fragment,U),zU(V.$$.fragment,U),H=!1},d(U){xU(Q,U),U&&_(B),z&&z.d(U),U&&_(R),xU(V,U),U&&_(d),U&&_(J)}}}function _V(F,Q,B){let R,V,d,J,{modal:l}=Q,{previousQuery:W}=Q,Z=0,n=0,N=[],{isIndexing:E}=VV;async function S(){const U=(await BV.getSearchHistory()).filter((U=>U));++n>=U.length&&(n=0),B(0,W=U[n])}async function k(){const U=(await BV.getSearchHistory()).filter((U=>U));--n<0&&(n=U.length?U.length-1:0),B(0,W=U[n])}function T(){R&&(t(R),l.close())}function a(){R&&(t(R,!0),l.close())}function h(){d&&BV.addToSearchHistory(d)}function t(U,F=!1){h(),EV(U,F)}async function C(F){if(d){try{await async function(U,F=!1){try{let Q;switch(app.vault.getConfig("newFileLocation")){case"current":Q=(app.workspace.getActiveFile()?.parent.path??"")+"/";break;case"folder":Q=app.vault.getConfig("newFileFolderPath")+"/";break;default:Q=""}await app.workspace.openLinkText(`${Q}${U}.md`,"",F)}catch(U){throw U.message="OmniSearch - Could not create note: "+U.message,console.error(U),U}}(d,F?.newLeaf)}catch(F){return void new U.Notice(F.message)}l.close()}}function D(){if(!R)return;const F=app.vault.getMarkdownFiles().find((U=>U.path===R.path)),Q=app.workspace.getActiveFile(),B=app.workspace.getActiveViewOfType(U.MarkdownView);if(!B?.editor)return void new U.Notice("Omnisearch - Error - No active editor",3e3);let V;V=F&&Q?app.fileManager.generateMarkdownLink(F,Q.path):`[[${R.basename}.${function(U){const F=U.split(".");return F[F.length-1]??""}(R.path)}]]`;const d=B.editor.getCursor();B.editor.replaceRange(V,d,d),d.ch+=V.length,B.editor.setCursor(d),l.close()}function e(){if(!R?.path.endsWith(".pdf")&&R?.matches.length)if(h(),l.close(),R){const F=app.vault.getAbstractFileByPath(R.path);F&&F instanceof U.TFile&&new ad(app,F,d).open()}else{const F=app.workspace.getActiveViewOfType(U.MarkdownView);F&&new ad(app,F.file,d).open()}}function c(U){B(1,Z=FF(Z+U,N.length)),M()}async function M(){if(await MU(),R){document.querySelector(`[data-result-id="${R.path}"]`)?.scrollIntoView({behavior:"auto",block:"nearest"})}}I(F,E,(U=>B(4,V=U))),EU((async()=>{X.enable("vault"),X.on("vault","enter",T),X.on("vault","create-note",C),X.on("vault","open-in-new-pane",a),X.on("vault","insert-link",D),X.on("vault","tab",e),X.on("vault","arrow-up",(()=>c(-1))),X.on("vault","arrow-down",(()=>c(1))),X.on("vault","prev-search-history",S),X.on("vault","next-search-history",k),await async function(){if(IV.size>0){fU.showIndexingNotices&&new U.Notice(`Omnisearch - Reindexing ${IV.size} notes`,2e3);for(const U of IV)jV(U.path),await LV(U),await _U(0);IV.clear()}}(),fU.showPreviousQueryResults&&B(0,W=(await BV.getSearchHistory())[0])})),SU((()=>{X.disable("vault")}));return F.$$set=U=>{"modal"in U&&B(8,l=U.modal),"previousQuery"in U&&B(0,W=U.previousQuery)},F.$$.update=()=>{5&F.$$.dirty&&B(2,d=d??W),4&F.$$.dirty&&(d?async function(){J=new GV(d),B(3,N=(await VV.getEngine().getSuggestions(J)).sort(((U,F)=>F.score-U.score))),B(1,Z=0),await M()}():B(3,N=[])),10&F.$$.dirty&&(R=N[Z])},[W,Z,d,N,V,E,function(U){R&&(U?.ctrlKey?a():T(),l.close())},async function(U){await C()},l,U=>B(2,d=U.detail),(U,F)=>B(1,Z=U)]}class $V extends wU{constructor(U){super(),iU(this,U,_V,AV,j,{modal:8,previousQuery:0})}}function Ud(U){let F,Q=U[2].replace(U[3],AU)+"";return{c(){F=UU("div"),VU(F,"class","omnisearch-result__body")},m(U,B){A(U,F,B),F.innerHTML=Q},p(U,B){12&B&&Q!==(Q=U[2].replace(U[3],AU)+"")&&(F.innerHTML=Q)},d(U){U&&_(F)}}}function Fd(U){let F,Q;return F=new DV({props:{id:U[0].toString(),selected:U[1],$$slots:{default:[Ud]},$$scope:{ctx:U}}}),F.$on("mousemove",U[6]),F.$on("click",U[7]),{c(){OU(F.$$.fragment)},m(U,B){oU(F,U,B),Q=!0},p(U,[Q]){const B={};1&Q&&(B.id=U[0].toString()),2&Q&&(B.selected=U[1]),268&Q&&(B.$$scope={dirty:Q,ctx:U}),F.$set(B)},i(U){Q||(HU(F.$$.fragment,U),Q=!0)},o(U){zU(F.$$.fragment,U),Q=!1},d(U){xU(F,U)}}}function Qd(U,F,Q){let B,R,{offset:V}=F,{note:d}=F,{index:J=0}=F,{selected:l=!1}=F;return U.$$set=U=>{"offset"in U&&Q(4,V=U.offset),"note"in U&&Q(5,d=U.note),"index"in U&&Q(0,J=U.index),"selected"in U&&Q(1,l=U.selected)},U.$$.update=()=>{32&U.$$.dirty&&Q(3,B=$U(d.foundWords)),48&U.$$.dirty&&Q(2,R=QF(d?.content??"",V))},[J,l,R,B,V,d,function(F){TU.call(this,U,F)},function(F){TU.call(this,U,F)}]}class Bd extends wU{constructor(U){super(),iU(this,U,Qd,Fd,j,{offset:4,note:5,index:0,selected:1})}}function Rd(U,F,Q){const B=U.slice();return B[16]=F[Q],B[18]=Q,B}function Vd(U){let F;return{c(){F=UU("div"),F.textContent="We found 0 result for your search here.",lU(F,"text-align","center")},m(U,Q){A(U,F,Q)},p:x,i:x,o:x,d(U){U&&_(F)}}}function dd(U){let F,Q,B=U[4],R=[];for(let F=0;F<B.length;F+=1)R[F]=Jd(Rd(U,B,F));const V=U=>zU(R[U],1,1,(()=>{R[U]=null}));return{c(){for(let U=0;U<R.length;U+=1)R[U].c();F=BU()},m(U,B){for(let F=0;F<R.length;F+=1)R[F].m(U,B);A(U,F,B),Q=!0},p(U,Q){if(120&Q){let d;for(B=U[4],d=0;d<B.length;d+=1){const V=Rd(U,B,d);R[d]?(R[d].p(V,Q),HU(R[d],1)):(R[d]=Jd(V),R[d].c(),HU(R[d],1),R[d].m(F.parentNode,F))}for(yU(),d=B.length;d<R.length;d+=1)V(d);XU()}},i(U){if(!Q){for(let U=0;U<B.length;U+=1)HU(R[U]);Q=!0}},o(U){R=R.filter(Boolean);for(let U=0;U<R.length;U+=1)zU(R[U]);Q=!1},d(U){$(R,U),U&&_(F)}}}function Jd(U){let F,Q;return F=new Bd({props:{offset:U[16],note:U[3],index:U[18],selected:U[18]===U[5]}}),F.$on("mousemove",(function(...F){return U[11](U[18],...F)})),F.$on("click",U[6]),{c(){OU(F.$$.fragment)},m(U,B){oU(F,U,B),Q=!0},p(Q,B){U=Q;const R={};16&B&&(R.offset=U[16]),8&B&&(R.note=U[3]),32&B&&(R.selected=U[18]===U[5]),F.$set(R)},i(U){Q||(HU(F.$$.fragment,U),Q=!0)},o(U){zU(F.$$.fragment,U),Q=!1},d(U){xU(F,U)}}}function ld(U){let F,Q,B,R;const V=[dd,Vd],d=[];function J(U,F){return U[4].length&&U[3]?0:1}return F=J(U),Q=d[F]=V[F](U),{c(){Q.c(),B=BU()},m(U,Q){d[F].m(U,Q),A(U,B,Q),R=!0},p(U,R){let l=F;F=J(U),F===l?d[F].p(U,R):(yU(),zU(d[l],1,1,(()=>{d[l]=null})),XU(),Q=d[F],Q?Q.p(U,R):(Q=d[F]=V[F](U),Q.c()),HU(Q,1),Q.m(B.parentNode,B))},i(U){R||(HU(Q),R=!0)},o(U){zU(Q),R=!1},d(U){d[F].d(U),U&&_(B)}}}function Wd(U){let F;return{c(){F=UU("span"),F.textContent="to close"},m(U,Q){A(U,F,Q)},d(U){U&&_(F)}}}function Zd(U){let F;return{c(){F=UU("span"),F.textContent="to go back to Vault Search"},m(U,Q){A(U,F,Q)},d(U){U&&_(F)}}}function nd(U){let F,Q,B,R,V,d,J,l,W,Z,n,N,E,S,k;function T(U,F){return U[0]?Zd:Wd}F=new lV({props:{placeholder:"Omnisearch - File",initialValue:U[1]}}),F.$on("input",U[10]),B=new NV({props:{$$slots:{default:[ld]},$$scope:{ctx:U}}});let a=T(U),h=a(U);return{c(){OU(F.$$.fragment),Q=QU(),OU(B.$$.fragment),R=QU(),V=UU("div"),d=UU("div"),d.innerHTML='<span class="prompt-instruction-command">↑↓</span><span>to navigate</span>',J=QU(),l=UU("div"),l.innerHTML='<span class="prompt-instruction-command">↵</span><span>to open</span>',W=QU(),Z=UU("div"),Z.innerHTML='<span class="prompt-instruction-command">↹</span> \n    <span>to switch to Vault Search</span>',n=QU(),N=UU("div"),E=UU("span"),E.textContent="esc",S=QU(),h.c(),VU(d,"class","prompt-instruction"),VU(l,"class","prompt-instruction"),VU(Z,"class","prompt-instruction"),VU(E,"class","prompt-instruction-command"),VU(N,"class","prompt-instruction"),VU(V,"class","prompt-instructions")},m(U,T){oU(F,U,T),A(U,Q,T),oU(B,U,T),A(U,R,T),A(U,V,T),P(V,d),P(V,J),P(V,l),P(V,W),P(V,Z),P(V,n),P(V,N),P(N,E),P(N,S),h.m(N,null),k=!0},p(U,[Q]){const R={};2&Q&&(R.initialValue=U[1]),F.$set(R);const V={};524344&Q&&(V.$$scope={dirty:Q,ctx:U}),B.$set(V),a!==(a=T(U))&&(h.d(1),h=a(U),h&&(h.c(),h.m(N,null)))},i(U){k||(HU(F.$$.fragment,U),HU(B.$$.fragment,U),k=!0)},o(U){zU(F.$$.fragment,U),zU(B.$$.fragment,U),k=!1},d(U){xU(F,U),U&&_(Q),xU(B,U),U&&_(R),U&&_(V),h.d()}}}function Nd(U,F,Q){const B=U.find((U=>U.offset>F));return B?U.filter((U=>U.offset>F&&U.offset<=B.offset+Q)):[]}function Ed(F,Q,B){let R,V,d,{modal:J}=Q,{parent:l=null}=Q,{singleFilePath:W=""}=Q,{previousQuery:Z}=Q,n=[],N=0;function E(U){B(5,N=FF(N+U,n.length)),S()}async function S(){await MU();document.querySelector(`[data-result-id="${N}"]`)?.scrollIntoView({behavior:"auto",block:"nearest"})}async function k(F){if(V){J.close(),l&&l.close(),await EV(V,F?.ctrlKey);const Q=app.workspace.getActiveViewOfType(U.MarkdownView);if(!Q)return;const B=n[N]??0,R=Q.editor.offsetToPos(B);R.ch=0,Q.editor.setCursor(R),Q.editor.scrollIntoView({from:{line:R.line-10,ch:0},to:{line:R.line+10,ch:0}})}}function T(){new Td(app,Z).open(),J.close()}EU((()=>{X.enable("infile"),X.on("infile","enter",k),X.on("infile","arrow-up",(()=>E(-1))),X.on("infile","arrow-down",(()=>E(1))),X.on("infile","tab",T)})),SU((()=>{X.disable("infile")}));return F.$$set=U=>{"modal"in U&&B(7,J=U.modal),"parent"in U&&B(0,l=U.parent),"singleFilePath"in U&&B(8,W=U.singleFilePath),"previousQuery"in U&&B(1,Z=U.previousQuery)},F.$$.update=()=>{if(2&F.$$.dirty&&B(2,R=Z??""),772&F.$$.dirty&&(async()=>{R&&(B(9,d=new GV(R)),B(3,V=(await VV.getEngine().getSuggestions(d,{singleFilePath:W}))[0]??null)),B(5,N=0),await S()})(),8&F.$$.dirty&&V){const U=function(U){const F=[];let Q=-1,B=0;for(;;){const R=Nd(U,Q,180);if(!R.length)break;if(Q=R.last().offset,F.push(R),++B>100)break}return F}(V.matches);B(4,n=U.map((U=>Math.round((U.first().offset+U.last().offset)/2))))}},[l,Z,R,V,n,N,k,J,W,d,U=>B(2,R=U.detail),(U,F)=>B(5,N=U)]}class Sd extends wU{constructor(U){super(),iU(this,U,Ed,nd,j,{modal:7,parent:0,singleFilePath:8,previousQuery:1})}}class kd extends U.Modal{constructor(U){super(U),this.modalEl.replaceChildren(),this.modalEl.addClass("omnisearch-modal","prompt"),this.modalEl.removeClass("modal"),this.modalEl.tabIndex=-1,this.scope.register([],"ArrowDown",(U=>{U.preventDefault(),X.emit("arrow-down")})),this.scope.register([],"ArrowUp",(U=>{U.preventDefault(),X.emit("arrow-up")}));for(const U of[{k:"J",dir:"down"},{k:"K",dir:"up"}])for(const F of["Ctrl","Mod"])this.scope.register([F],U.k,(F=>{this.app.vault.getConfig("vimMode")&&X.emit("arrow-"+U.dir)}));for(const U of[{k:"N",dir:"down"},{k:"P",dir:"up"}])for(const F of["Ctrl","Mod"])this.scope.register([F],U.k,(F=>{this.app.vault.getConfig("vimMode")&&X.emit("arrow-"+U.dir)}));this.scope.register(["Mod"],"Enter",(U=>{U.preventDefault(),X.emit("open-in-new-pane")})),this.scope.register(["Alt"],"Enter",(U=>{U.preventDefault(),X.emit("insert-link")})),this.scope.register(["Shift"],"Enter",(U=>{U.preventDefault(),X.emit("create-note")})),this.scope.register(["Ctrl","Shift"],"Enter",(U=>{U.preventDefault(),X.emit("create-note",{newLeaf:!0})})),this.scope.register([],"Enter",(U=>{z||(U.preventDefault(),X.emit("enter"))})),this.scope.register([],"Tab",(U=>{U.preventDefault(),X.emit("tab")})),this.scope.register(["Alt"],"ArrowDown",(U=>{U.preventDefault(),X.emit("next-search-history")})),this.scope.register(["Alt"],"ArrowUp",(U=>{U.preventDefault(),X.emit("prev-search-history")})),this.scope.register(["Ctrl"],"H",(U=>{X.emit(H)}))}}class Td extends kd{constructor(U,F){super(U);const Q=new $V({target:this.modalEl,props:{modal:this,previousQuery:F}});this.onClose=()=>{Q.$destroy()}}}class ad extends kd{constructor(U,F,Q="",B){super(U);const R=new Sd({target:this.modalEl,props:{modal:this,singleFilePath:F.path,parent:B,previousQuery:Q}});B&&B.containerEl.toggleVisibility(!1),this.onClose=()=>{B&&B.containerEl.toggleVisibility(!0),R.$destroy()}}}var hd={search:async function(U){const F=new GV(U);return(await VV.getEngine().getSuggestions(F)).map((U=>{const{score:F,path:Q,basename:B,foundWords:R,matches:V}=U;return{score:F,path:Q,basename:B,foundWords:R,matches:V.map((U=>({match:U.match,offset:U.offset})))}}))}};class td extends U.Plugin{async onload(){var F;await async function(){const U=[`${app.vault.configDir}/plugins/omnisearch/searchIndex.json`,`${app.vault.configDir}/plugins/omnisearch/notesCache.json`,`${app.vault.configDir}/plugins/omnisearch/notesCache.data`,`${app.vault.configDir}/plugins/omnisearch/searchIndex.data`,`${app.vault.configDir}/plugins/omnisearch/historyCache.json`,`${app.vault.configDir}/plugins/omnisearch/pdfCache.data`];for(const F of U)if(await app.vault.adapter.exists(F))try{await app.vault.adapter.remove(F)}catch(U){}}(),await async function(F){fU=Object.assign({},gU,await F.loadData()),U.Platform.isIosApp&&(fU.PDFIndexing=!1),jU.set(fU.showExcerpt)}(this),await VV.initFromCache(),function(U,F,Q){window.PluginApi=window.PluginApi||{},window.PluginApi[U]=F,Q.register((()=>{delete window.PluginApi[U]}))}("omnisearch",hd,F=this),app.plugins.plugins.omnisearch.api=hd,F.register((()=>{delete app.plugins.plugins.omnisearch.api})),fU.ribbonIcon&&this.addRibbonButton(),this.addSettingTab(new IU(this)),X.disable("vault"),X.disable("infile"),X.on("global",H,(()=>{jU.set(!fU.showExcerpt)})),this.addCommand({id:"show-modal",name:"Vault search",callback:()=>{new Td(app).open()}}),this.addCommand({id:"show-modal-infile",name:"In-file search",editorCallback:(U,F)=>{new ad(app,F.file).open()}}),app.workspace.onLayoutReady((async()=>{this.registerEvent(this.app.vault.on("create",(U=>{LV(U)}))),this.registerEvent(this.app.vault.on("delete",(U=>{jV(U.path)}))),this.registerEvent(this.app.vault.on("modify",(async U=>{var F;F=U,IV.add(F)}))),this.registerEvent(this.app.vault.on("rename",(async(F,Q)=>{F instanceof U.TFile&&lF(F.path)&&(jV(Q),await LV(F))}))),await async function(){const U=VV.getTmpEngine();console.time("Omnisearch - Timing");const F=await async function(){const U=app.vault.getFiles().filter((U=>lF(U.path))),F=[];for(const Q of U){const U=await iV(Q);F.push(U),await BV.updateDocument(Q.path,U)}return F}();if(await U.addAllToMinisearch(F),console.log(`Omnisearch - Indexed ${F.length} notes`),console.timeEnd("Omnisearch - Timing"),VV.loadTmpDataIntoMain(),fU.PDFIndexing){console.time("Omnisearch - Timing");const F=await async function(){const U=app.vault.getFiles().filter((U=>U.path.endsWith(".pdf"))),F=[],Q=[];for(const B of U)Q.push(wV((async()=>{const U=await iV(B);await BV.updateDocument(B.path,U),F.push(U)})));return await Promise.all(Q),F}();await U.addAllToMinisearch(F),console.log(`Omnisearch - Indexed ${F.length} PDFs`),console.timeEnd("Omnisearch - Timing")}VV.loadTmpDataIntoMain(),VV.isIndexing.set(!1),await U.writeToCache(),VV.clearTmp()}()})),function(F){const Q="1.7.6";if(fU.welcomeMessage!==Q){const F=new DocumentFragment;F.createSpan({},(U=>{U.innerHTML='<strong>Omnisearch has been updated</strong>\nNew beta feature: PDF search 🔎📄\n<small>Toggle "<i>BETA - Index PDFs</i>" in Omnisearch settings page.</small>'})),new U.Notice(F,3e4)}fU.welcomeMessage=Q,F.saveData(fU)}(this)}onunload(){wV.clearQueue()}addRibbonButton(){this.ribbonButton=this.addRibbonIcon("search","Omnisearch",(U=>{new Td(app).open()}))}removeRibbonButton(){this.ribbonButton&&this.ribbonButton.parentNode?.removeChild(this.ribbonButton)}}module.exports=td;
