/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var V=Object.create;var h=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var H=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,F=Object.prototype.hasOwnProperty;var v=e=>h(e,"__esModule",{value:!0});var R=(e,t)=>{v(e);for(var i in t)h(e,i,{get:t[i],enumerable:!0})},I=(e,t,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of H(t))!F.call(e,s)&&s!=="default"&&h(e,s,{get:()=>t[s],enumerable:!(i=C(t,s))||i.enumerable});return e},l=e=>I(v(h(e!=null?V(_(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var d=(e,t,i)=>new Promise((s,r)=>{var n=o=>{try{p(i.next(o))}catch(g){r(g)}},a=o=>{try{p(i.throw(o))}catch(g){r(g)}},p=o=>o.done?s(o.value):Promise.resolve(o.value).then(n,a);p((i=i.apply(e,t)).next())});R(exports,{default:()=>x});var N=l(require("obsidian"));var T=l(require("@codemirror/view")),u=l(require("@codemirror/gutter")),f=l(require("obsidian")),M=l(require("@codemirror/language")),m=l(require("@codemirror/rangeset")),P=l(require("@codemirror/stream-parser")),S=l(require("@codemirror/state")),O=[1,2,3,4,5,6],E="cm-heading-marker",y=class extends u.GutterMarker{constructor(t,i,s,r,n){super();this.app=t;this.view=i;this.headingLevel=s;this.from=r;this.to=n}toDOM(){let t=createDiv({cls:E});return t.dataset.level=String(this.headingLevel),t}};function L(e,t){let i=T.ViewPlugin.fromClass(class{constructor(r){this.view=r;this.markers=this.buildMarkers(e,r)}buildMarkers(r,n){let a=new m.RangeSetBuilder;return(0,M.syntaxTree)(n.state).iterate({enter:(p,o,g)=>{var c;let w=/header-(\d)$/.exec((c=p.prop(P.lineClassNodeProp))!=null?c:"");if(w){let B=Number(w[1]),D=new y(r,n,B,o,g);a.add(o,g,D)}}}),a.finish()}update(r){if(!r.state.field(f.editorLivePreviewField)){this.markers=m.RangeSet.empty;return}this.markers=this.buildMarkers(e,this.view)}}),s=t?S.Prec.high:S.Prec.low;return[i,s((0,u.gutter)({class:"cm-lapel",markers(r){var n;return((n=r.plugin(i))==null?void 0:n.markers)||m.RangeSet.empty},domEventHandlers:{click:(r,n,a)=>{if(a.target instanceof HTMLDivElement&&a.target.classList.contains(E)){let p=new f.Menu(this.app);return O.forEach(o=>{p.addItem(g=>g.setIcon("hash").setTitle(`Heading ${o}`).onClick(()=>{let c=r.state.doc.lineAt(n.from).text.replace(/^#{1,6} /,"");r.dispatch({changes:{from:n.from,to:n.to,insert:`${"#".repeat(o)} ${c}`}})}))}),p.showAtMouseEvent(a),!0}return!1},mousedown:(r,n,a)=>a.target instanceof HTMLDivElement&&a.target.classList.contains(E)}}))]}var b=l(require("obsidian")),A={showBeforeLineNumbers:!0},k=class extends b.PluginSettingTab{constructor(t,i){super(t,i);this.plugin=i}display(){let{containerEl:t}=this;t.empty(),t.createEl("h3",{text:"Appearance"}),new b.Setting(t).setName("Show before line numbers").setDesc("Toggle whether the heading markers are shown before or after the line numbers in the gutter.").addToggle(i=>i.setValue(this.plugin.settings.showBeforeLineNumbers).onChange(s=>d(this,null,function*(){this.plugin.updateSettings(()=>({showBeforeLineNumbers:s}))})))}};var x=class extends N.Plugin{onload(){return d(this,null,function*(){yield this.loadSettings(),this.cmExtension=L(this.app,this.settings.showBeforeLineNumbers),this.registerEditorExtension([this.cmExtension]),this.registerSettingsTab()})}loadSettings(){return d(this,null,function*(){this.settings=Object.assign({},A,yield this.loadData())})}registerSettingsTab(){this.addSettingTab(new k(this.app,this))}updateSettings(t){return d(this,null,function*(){let i=t(this.settings),s=Object.assign({},this.settings,i);if(this.settings.showBeforeLineNumbers!==i.showBeforeLineNumbers){let r=L(this.app,s.showBeforeLineNumbers);this.cmExtension[0]=r,this.app.workspace.updateOptions()}this.settings=s,yield this.saveData(this.settings)})}};
